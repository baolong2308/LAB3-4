
LAB3-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000360c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003718  08003718  00004718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003744  08003744  00005018  2**0
                  CONTENTS
  4 .ARM          00000000  08003744  08003744  00005018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003744  08003744  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003744  08003744  00004744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003748  08003748  00004748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  0800374c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  20000018  08003764  00005018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08003764  0000553c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b88c  00000000  00000000  00005041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002202  00000000  00000000  000108cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00012ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a78  00000000  00000000  00013870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018849  00000000  00000000  000142e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012327  00000000  00000000  0002cb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008858d  00000000  00000000  0003ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c73e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036d0  00000000  00000000  000c7428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000caaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08003700 	.word	0x08003700

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08003700 	.word	0x08003700

0800014c <isButtonPressed>:
int KeyReg1[MAX_BUTTON] = { NORMAL_STATE };
int KeyReg2[MAX_BUTTON] = { NORMAL_STATE };
int KeyReg3[MAX_BUTTON] = { NORMAL_STATE }; // trạng thái ổn định trước đó
int button_flag[MAX_BUTTON];

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000d4 	.word	0x200000d4

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a06      	ldr	r2, [pc, #24]	@ (80001a4 <subKeyProcess+0x24>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000192:	2110      	movs	r1, #16
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <subKeyProcess+0x28>)
 8000196:	f002 f952 	bl	800243e <HAL_GPIO_TogglePin>
}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	200000d4 	.word	0x200000d4
 80001a8:	40010800 	.word	0x40010800

080001ac <getKeyInput>:

void getKeyInput() {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
	KeyReg0[0] = KeyReg1[0];
 80001b2:	4b36      	ldr	r3, [pc, #216]	@ (800028c <getKeyInput+0xe0>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a36      	ldr	r2, [pc, #216]	@ (8000290 <getKeyInput+0xe4>)
 80001b8:	6013      	str	r3, [r2, #0]
	KeyReg1[0] = KeyReg2[0];
 80001ba:	4b36      	ldr	r3, [pc, #216]	@ (8000294 <getKeyInput+0xe8>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a33      	ldr	r2, [pc, #204]	@ (800028c <getKeyInput+0xe0>)
 80001c0:	6013      	str	r3, [r2, #0]
	KeyReg2[0] = HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin);
 80001c2:	2102      	movs	r1, #2
 80001c4:	4834      	ldr	r0, [pc, #208]	@ (8000298 <getKeyInput+0xec>)
 80001c6:	f002 f90b 	bl	80023e0 <HAL_GPIO_ReadPin>
 80001ca:	4603      	mov	r3, r0
 80001cc:	461a      	mov	r2, r3
 80001ce:	4b31      	ldr	r3, [pc, #196]	@ (8000294 <getKeyInput+0xe8>)
 80001d0:	601a      	str	r2, [r3, #0]

	KeyReg0[1] = KeyReg1[1];
 80001d2:	4b2e      	ldr	r3, [pc, #184]	@ (800028c <getKeyInput+0xe0>)
 80001d4:	685b      	ldr	r3, [r3, #4]
 80001d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000290 <getKeyInput+0xe4>)
 80001d8:	6053      	str	r3, [r2, #4]
	KeyReg1[1] = KeyReg2[1];
 80001da:	4b2e      	ldr	r3, [pc, #184]	@ (8000294 <getKeyInput+0xe8>)
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	4a2b      	ldr	r2, [pc, #172]	@ (800028c <getKeyInput+0xe0>)
 80001e0:	6053      	str	r3, [r2, #4]
	KeyReg2[1] = HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin);
 80001e2:	2104      	movs	r1, #4
 80001e4:	482c      	ldr	r0, [pc, #176]	@ (8000298 <getKeyInput+0xec>)
 80001e6:	f002 f8fb 	bl	80023e0 <HAL_GPIO_ReadPin>
 80001ea:	4603      	mov	r3, r0
 80001ec:	461a      	mov	r2, r3
 80001ee:	4b29      	ldr	r3, [pc, #164]	@ (8000294 <getKeyInput+0xe8>)
 80001f0:	605a      	str	r2, [r3, #4]

	KeyReg0[2] = KeyReg1[2];
 80001f2:	4b26      	ldr	r3, [pc, #152]	@ (800028c <getKeyInput+0xe0>)
 80001f4:	689b      	ldr	r3, [r3, #8]
 80001f6:	4a26      	ldr	r2, [pc, #152]	@ (8000290 <getKeyInput+0xe4>)
 80001f8:	6093      	str	r3, [r2, #8]
	KeyReg1[2] = KeyReg2[2];
 80001fa:	4b26      	ldr	r3, [pc, #152]	@ (8000294 <getKeyInput+0xe8>)
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	4a23      	ldr	r2, [pc, #140]	@ (800028c <getKeyInput+0xe0>)
 8000200:	6093      	str	r3, [r2, #8]
	KeyReg2[2] = HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin);
 8000202:	2108      	movs	r1, #8
 8000204:	4824      	ldr	r0, [pc, #144]	@ (8000298 <getKeyInput+0xec>)
 8000206:	f002 f8eb 	bl	80023e0 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	461a      	mov	r2, r3
 800020e:	4b21      	ldr	r3, [pc, #132]	@ (8000294 <getKeyInput+0xe8>)
 8000210:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < MAX_BUTTON; i++) {
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	e031      	b.n	800027c <getKeyInput+0xd0>
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000218:	4a1d      	ldr	r2, [pc, #116]	@ (8000290 <getKeyInput+0xe4>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	491a      	ldr	r1, [pc, #104]	@ (800028c <getKeyInput+0xe0>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d124      	bne.n	8000276 <getKeyInput+0xca>
 800022c:	4a17      	ldr	r2, [pc, #92]	@ (800028c <getKeyInput+0xe0>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	4917      	ldr	r1, [pc, #92]	@ (8000294 <getKeyInput+0xe8>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d11a      	bne.n	8000276 <getKeyInput+0xca>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000240:	4a16      	ldr	r2, [pc, #88]	@ (800029c <getKeyInput+0xf0>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	4912      	ldr	r1, [pc, #72]	@ (8000294 <getKeyInput+0xe8>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000250:	429a      	cmp	r2, r3
 8000252:	d010      	beq.n	8000276 <getKeyInput+0xca>
				KeyReg3[i] = KeyReg2[i];
 8000254:	4a0f      	ldr	r2, [pc, #60]	@ (8000294 <getKeyInput+0xe8>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <getKeyInput+0xf0>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg2[i] == PRESSED_STATE) {
 8000264:	4a0b      	ldr	r2, [pc, #44]	@ (8000294 <getKeyInput+0xe8>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d102      	bne.n	8000276 <getKeyInput+0xca>
					//TODO
					subKeyProcess(i);
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f7ff ff85 	bl	8000180 <subKeyProcess>
	for (int i = 0; i < MAX_BUTTON; i++) {
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	3301      	adds	r3, #1
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b09      	cmp	r3, #9
 8000280:	ddca      	ble.n	8000218 <getKeyInput+0x6c>

				}
			}
		}
	}
}
 8000282:	bf00      	nop
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	2000005c 	.word	0x2000005c
 8000290:	20000034 	.word	0x20000034
 8000294:	20000084 	.word	0x20000084
 8000298:	40010800 	.word	0x40010800
 800029c:	200000ac 	.word	0x200000ac

080002a0 <scanLEDs>:
 *      Author: admin
 */

#include"fsm_automatic.h"
#include"led7_segment.h"
void scanLEDs(int time_1, int time_2) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	updateClockBuffer(time_1, time_2);
 80002aa:	6839      	ldr	r1, [r7, #0]
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f000 fc81 	bl	8000bb4 <updateClockBuffer>
	update7SEG_2(index_led_2++ % 2);
 80002b2:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <scanLEDs+0x58>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	1c5a      	adds	r2, r3, #1
 80002b8:	490f      	ldr	r1, [pc, #60]	@ (80002f8 <scanLEDs+0x58>)
 80002ba:	600a      	str	r2, [r1, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	bfb8      	it	lt
 80002c4:	425b      	neglt	r3, r3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fce8 	bl	8000c9c <update7SEG_2>
	update7SEG_1(index_led_1++ % 2);
 80002cc:	4b0b      	ldr	r3, [pc, #44]	@ (80002fc <scanLEDs+0x5c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	490a      	ldr	r1, [pc, #40]	@ (80002fc <scanLEDs+0x5c>)
 80002d4:	600a      	str	r2, [r1, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	f003 0301 	and.w	r3, r3, #1
 80002dc:	bfb8      	it	lt
 80002de:	425b      	neglt	r3, r3
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fca3 	bl	8000c2c <update7SEG_1>
	setTimer(3, 25);
 80002e6:	2119      	movs	r1, #25
 80002e8:	2003      	movs	r0, #3
 80002ea:	f001 fc53 	bl	8001b94 <setTimer>
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000118 	.word	0x20000118
 80002fc:	20000114 	.word	0x20000114

08000300 <fsm_automatic_run>:

void fsm_automatic_run() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0

	if (isTimerExpired(0) == 1) {
 8000304:	2000      	movs	r0, #0
 8000306:	f001 fc5d 	bl	8001bc4 <isTimerExpired>
 800030a:	4603      	mov	r3, r0
 800030c:	2b01      	cmp	r3, #1
 800030e:	d107      	bne.n	8000320 <fsm_automatic_run+0x20>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000310:	2120      	movs	r1, #32
 8000312:	4887      	ldr	r0, [pc, #540]	@ (8000530 <fsm_automatic_run+0x230>)
 8000314:	f002 f893 	bl	800243e <HAL_GPIO_TogglePin>
		setTimer(0, 100);
 8000318:	2164      	movs	r1, #100	@ 0x64
 800031a:	2000      	movs	r0, #0
 800031c:	f001 fc3a 	bl	8001b94 <setTimer>
	}

	switch (status) {
 8000320:	4b84      	ldr	r3, [pc, #528]	@ (8000534 <fsm_automatic_run+0x234>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	3b01      	subs	r3, #1
 8000326:	2b04      	cmp	r3, #4
 8000328:	f200 81d9 	bhi.w	80006de <fsm_automatic_run+0x3de>
 800032c:	a201      	add	r2, pc, #4	@ (adr r2, 8000334 <fsm_automatic_run+0x34>)
 800032e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000332:	bf00      	nop
 8000334:	08000349 	.word	0x08000349
 8000338:	080003a1 	.word	0x080003a1
 800033c:	08000465 	.word	0x08000465
 8000340:	08000555 	.word	0x08000555
 8000344:	08000617 	.word	0x08000617
	case INIT:

		TIME_RED = 5;
 8000348:	4b7b      	ldr	r3, [pc, #492]	@ (8000538 <fsm_automatic_run+0x238>)
 800034a:	2205      	movs	r2, #5
 800034c:	601a      	str	r2, [r3, #0]
		TIME_YELLOW = 2;
 800034e:	4b7b      	ldr	r3, [pc, #492]	@ (800053c <fsm_automatic_run+0x23c>)
 8000350:	2202      	movs	r2, #2
 8000352:	601a      	str	r2, [r3, #0]
		TIME_GREEN = 3;
 8000354:	4b7a      	ldr	r3, [pc, #488]	@ (8000540 <fsm_automatic_run+0x240>)
 8000356:	2203      	movs	r2, #3
 8000358:	601a      	str	r2, [r3, #0]
		status = RED_GREEN;
 800035a:	4b76      	ldr	r3, [pc, #472]	@ (8000534 <fsm_automatic_run+0x234>)
 800035c:	2202      	movs	r2, #2
 800035e:	601a      	str	r2, [r3, #0]

		time_1 = TIME_GREEN - 1;
 8000360:	4b77      	ldr	r3, [pc, #476]	@ (8000540 <fsm_automatic_run+0x240>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3b01      	subs	r3, #1
 8000366:	4a77      	ldr	r2, [pc, #476]	@ (8000544 <fsm_automatic_run+0x244>)
 8000368:	6013      	str	r3, [r2, #0]
		time_2 = TIME_RED - 1;
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <fsm_automatic_run+0x238>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3b01      	subs	r3, #1
 8000370:	4a75      	ldr	r2, [pc, #468]	@ (8000548 <fsm_automatic_run+0x248>)
 8000372:	6013      	str	r3, [r2, #0]
		setTimer(0, 100); //timer DOT
 8000374:	2164      	movs	r1, #100	@ 0x64
 8000376:	2000      	movs	r0, #0
 8000378:	f001 fc0c 	bl	8001b94 <setTimer>
		setTimer(1, TIME_GREEN * 100);
 800037c:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <fsm_automatic_run+0x240>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2264      	movs	r2, #100	@ 0x64
 8000382:	fb02 f303 	mul.w	r3, r2, r3
 8000386:	4619      	mov	r1, r3
 8000388:	2001      	movs	r0, #1
 800038a:	f001 fc03 	bl	8001b94 <setTimer>
		setTimer(2, 100); // timer second
 800038e:	2164      	movs	r1, #100	@ 0x64
 8000390:	2002      	movs	r0, #2
 8000392:	f001 fbff 	bl	8001b94 <setTimer>
		setTimer(3, 1); // timer scan
 8000396:	2101      	movs	r1, #1
 8000398:	2003      	movs	r0, #3
 800039a:	f001 fbfb 	bl	8001b94 <setTimer>
		break;
 800039e:	e1a7      	b.n	80006f0 <fsm_automatic_run+0x3f0>
	case RED_GREEN:

		turnOn_RED1();
 80003a0:	f001 fc5a 	bl	8001c58 <turnOn_RED1>
		turnOn_GREEN2();
 80003a4:	f001 fcb2 	bl	8001d0c <turnOn_GREEN2>
		if (isTimerExpired(3) == 1) {
 80003a8:	2003      	movs	r0, #3
 80003aa:	f001 fc0b 	bl	8001bc4 <isTimerExpired>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d107      	bne.n	80003c4 <fsm_automatic_run+0xc4>
			scanLEDs(time_1, time_2);
 80003b4:	4b63      	ldr	r3, [pc, #396]	@ (8000544 <fsm_automatic_run+0x244>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a63      	ldr	r2, [pc, #396]	@ (8000548 <fsm_automatic_run+0x248>)
 80003ba:	6812      	ldr	r2, [r2, #0]
 80003bc:	4611      	mov	r1, r2
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff ff6e 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(2) == 1) {
 80003c4:	2002      	movs	r0, #2
 80003c6:	f001 fbfd 	bl	8001bc4 <isTimerExpired>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d10d      	bne.n	80003ec <fsm_automatic_run+0xec>
			time_1--;
 80003d0:	4b5c      	ldr	r3, [pc, #368]	@ (8000544 <fsm_automatic_run+0x244>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	3b01      	subs	r3, #1
 80003d6:	4a5b      	ldr	r2, [pc, #364]	@ (8000544 <fsm_automatic_run+0x244>)
 80003d8:	6013      	str	r3, [r2, #0]
			time_2--;
 80003da:	4b5b      	ldr	r3, [pc, #364]	@ (8000548 <fsm_automatic_run+0x248>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	3b01      	subs	r3, #1
 80003e0:	4a59      	ldr	r2, [pc, #356]	@ (8000548 <fsm_automatic_run+0x248>)
 80003e2:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 80003e4:	2164      	movs	r1, #100	@ 0x64
 80003e6:	2002      	movs	r0, #2
 80003e8:	f001 fbd4 	bl	8001b94 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 80003ec:	2001      	movs	r0, #1
 80003ee:	f001 fbe9 	bl	8001bc4 <isTimerExpired>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d110      	bne.n	800041a <fsm_automatic_run+0x11a>
			status = RED_YELLOW;
 80003f8:	4b4e      	ldr	r3, [pc, #312]	@ (8000534 <fsm_automatic_run+0x234>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	601a      	str	r2, [r3, #0]
			time_1 = TIME_YELLOW - 1;
 80003fe:	4b4f      	ldr	r3, [pc, #316]	@ (800053c <fsm_automatic_run+0x23c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	3b01      	subs	r3, #1
 8000404:	4a4f      	ldr	r2, [pc, #316]	@ (8000544 <fsm_automatic_run+0x244>)
 8000406:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_YELLOW * 100);
 8000408:	4b4c      	ldr	r3, [pc, #304]	@ (800053c <fsm_automatic_run+0x23c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2264      	movs	r2, #100	@ 0x64
 800040e:	fb02 f303 	mul.w	r3, r2, r3
 8000412:	4619      	mov	r1, r3
 8000414:	2001      	movs	r0, #1
 8000416:	f001 fbbd 	bl	8001b94 <setTimer>

		}
//		if (isTimerExpired(3) == 1) {
//			scanLEDs(time_1, time_2);
//		}
		if (isButtonPressed(0) == 1) {
 800041a:	2000      	movs	r0, #0
 800041c:	f7ff fe96 	bl	800014c <isButtonPressed>
 8000420:	4603      	mov	r3, r0
 8000422:	2b01      	cmp	r3, #1
 8000424:	d10d      	bne.n	8000442 <fsm_automatic_run+0x142>
			status = SET_RED;
 8000426:	4b43      	ldr	r3, [pc, #268]	@ (8000534 <fsm_automatic_run+0x234>)
 8000428:	2210      	movs	r2, #16
 800042a:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 800042c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000430:	2001      	movs	r0, #1
 8000432:	f001 fbaf 	bl	8001b94 <setTimer>
			setTimer(6, 50); // toggle led
 8000436:	2132      	movs	r1, #50	@ 0x32
 8000438:	2006      	movs	r0, #6
 800043a:	f001 fbab 	bl	8001b94 <setTimer>
			turnOff();
 800043e:	f001 fc95 	bl	8001d6c <turnOff>
		}
		if (isButtonPressed(1) == 1) {
 8000442:	2001      	movs	r0, #1
 8000444:	f7ff fe82 	bl	800014c <isButtonPressed>
 8000448:	4603      	mov	r3, r0
 800044a:	2b01      	cmp	r3, #1
 800044c:	f040 8149 	bne.w	80006e2 <fsm_automatic_run+0x3e2>
			status = MANUAL;
 8000450:	4b38      	ldr	r3, [pc, #224]	@ (8000534 <fsm_automatic_run+0x234>)
 8000452:	2208      	movs	r2, #8
 8000454:	601a      	str	r2, [r3, #0]
			status_1 = MAN_RED_1;
 8000456:	4b3d      	ldr	r3, [pc, #244]	@ (800054c <fsm_automatic_run+0x24c>)
 8000458:	220c      	movs	r2, #12
 800045a:	601a      	str	r2, [r3, #0]
			status_2 = MAN_RED_2;
 800045c:	4b3c      	ldr	r3, [pc, #240]	@ (8000550 <fsm_automatic_run+0x250>)
 800045e:	2209      	movs	r2, #9
 8000460:	601a      	str	r2, [r3, #0]

		}

		break;
 8000462:	e13e      	b.n	80006e2 <fsm_automatic_run+0x3e2>
	case RED_YELLOW:
		turnOn_YELLOW2();
 8000464:	f001 fc6a 	bl	8001d3c <turnOn_YELLOW2>
		if (isTimerExpired(3) == 1) {
 8000468:	2003      	movs	r0, #3
 800046a:	f001 fbab 	bl	8001bc4 <isTimerExpired>
 800046e:	4603      	mov	r3, r0
 8000470:	2b01      	cmp	r3, #1
 8000472:	d107      	bne.n	8000484 <fsm_automatic_run+0x184>
			scanLEDs(time_1, time_2);
 8000474:	4b33      	ldr	r3, [pc, #204]	@ (8000544 <fsm_automatic_run+0x244>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a33      	ldr	r2, [pc, #204]	@ (8000548 <fsm_automatic_run+0x248>)
 800047a:	6812      	ldr	r2, [r2, #0]
 800047c:	4611      	mov	r1, r2
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff0e 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(2) == 1) {
 8000484:	2002      	movs	r0, #2
 8000486:	f001 fb9d 	bl	8001bc4 <isTimerExpired>
 800048a:	4603      	mov	r3, r0
 800048c:	2b01      	cmp	r3, #1
 800048e:	d10d      	bne.n	80004ac <fsm_automatic_run+0x1ac>
			time_1--;
 8000490:	4b2c      	ldr	r3, [pc, #176]	@ (8000544 <fsm_automatic_run+0x244>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	3b01      	subs	r3, #1
 8000496:	4a2b      	ldr	r2, [pc, #172]	@ (8000544 <fsm_automatic_run+0x244>)
 8000498:	6013      	str	r3, [r2, #0]
			time_2--;
 800049a:	4b2b      	ldr	r3, [pc, #172]	@ (8000548 <fsm_automatic_run+0x248>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a29      	ldr	r2, [pc, #164]	@ (8000548 <fsm_automatic_run+0x248>)
 80004a2:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 80004a4:	2164      	movs	r1, #100	@ 0x64
 80004a6:	2002      	movs	r0, #2
 80004a8:	f001 fb74 	bl	8001b94 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 80004ac:	2001      	movs	r0, #1
 80004ae:	f001 fb89 	bl	8001bc4 <isTimerExpired>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d115      	bne.n	80004e4 <fsm_automatic_run+0x1e4>
			status = GREEN_RED;
 80004b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000534 <fsm_automatic_run+0x234>)
 80004ba:	2204      	movs	r2, #4
 80004bc:	601a      	str	r2, [r3, #0]
			time_1 = TIME_RED - 1;
 80004be:	4b1e      	ldr	r3, [pc, #120]	@ (8000538 <fsm_automatic_run+0x238>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000544 <fsm_automatic_run+0x244>)
 80004c6:	6013      	str	r3, [r2, #0]
			time_2 = TIME_GREEN - 1;
 80004c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000540 <fsm_automatic_run+0x240>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000548 <fsm_automatic_run+0x248>)
 80004d0:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_GREEN * 100);
 80004d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <fsm_automatic_run+0x240>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2264      	movs	r2, #100	@ 0x64
 80004d8:	fb02 f303 	mul.w	r3, r2, r3
 80004dc:	4619      	mov	r1, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	f001 fb58 	bl	8001b94 <setTimer>

		}

		if (isButtonPressed(0) == 1) {
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff fe31 	bl	800014c <isButtonPressed>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d10d      	bne.n	800050c <fsm_automatic_run+0x20c>
			status = SET_RED;
 80004f0:	4b10      	ldr	r3, [pc, #64]	@ (8000534 <fsm_automatic_run+0x234>)
 80004f2:	2210      	movs	r2, #16
 80004f4:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 80004f6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004fa:	2001      	movs	r0, #1
 80004fc:	f001 fb4a 	bl	8001b94 <setTimer>
			setTimer(6, 50);
 8000500:	2132      	movs	r1, #50	@ 0x32
 8000502:	2006      	movs	r0, #6
 8000504:	f001 fb46 	bl	8001b94 <setTimer>
			turnOff();
 8000508:	f001 fc30 	bl	8001d6c <turnOff>
		}
		if (isButtonPressed(1) == 1) {
 800050c:	2001      	movs	r0, #1
 800050e:	f7ff fe1d 	bl	800014c <isButtonPressed>
 8000512:	4603      	mov	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	f040 80e6 	bne.w	80006e6 <fsm_automatic_run+0x3e6>
			status = MANUAL;
 800051a:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <fsm_automatic_run+0x234>)
 800051c:	2208      	movs	r2, #8
 800051e:	601a      	str	r2, [r3, #0]
			status_1 = MAN_RED_1;
 8000520:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <fsm_automatic_run+0x24c>)
 8000522:	220c      	movs	r2, #12
 8000524:	601a      	str	r2, [r3, #0]
			status_2 = MAN_RED_2;
 8000526:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <fsm_automatic_run+0x250>)
 8000528:	2209      	movs	r2, #9
 800052a:	601a      	str	r2, [r3, #0]

		}

		break;
 800052c:	e0db      	b.n	80006e6 <fsm_automatic_run+0x3e6>
 800052e:	bf00      	nop
 8000530:	40010800 	.word	0x40010800
 8000534:	200000fc 	.word	0x200000fc
 8000538:	20000000 	.word	0x20000000
 800053c:	20000004 	.word	0x20000004
 8000540:	20000008 	.word	0x20000008
 8000544:	20000108 	.word	0x20000108
 8000548:	2000010c 	.word	0x2000010c
 800054c:	20000100 	.word	0x20000100
 8000550:	20000104 	.word	0x20000104
	case GREEN_RED:
		turnOn_GREEN1();
 8000554:	f001 fb96 	bl	8001c84 <turnOn_GREEN1>
		turnOn_RED2();
 8000558:	f001 fbc0 	bl	8001cdc <turnOn_RED2>
		if (isTimerExpired(3) == 1) {
 800055c:	2003      	movs	r0, #3
 800055e:	f001 fb31 	bl	8001bc4 <isTimerExpired>
 8000562:	4603      	mov	r3, r0
 8000564:	2b01      	cmp	r3, #1
 8000566:	d107      	bne.n	8000578 <fsm_automatic_run+0x278>
			scanLEDs(time_1, time_2);
 8000568:	4b62      	ldr	r3, [pc, #392]	@ (80006f4 <fsm_automatic_run+0x3f4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a62      	ldr	r2, [pc, #392]	@ (80006f8 <fsm_automatic_run+0x3f8>)
 800056e:	6812      	ldr	r2, [r2, #0]
 8000570:	4611      	mov	r1, r2
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff fe94 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(2) == 1) {
 8000578:	2002      	movs	r0, #2
 800057a:	f001 fb23 	bl	8001bc4 <isTimerExpired>
 800057e:	4603      	mov	r3, r0
 8000580:	2b01      	cmp	r3, #1
 8000582:	d10d      	bne.n	80005a0 <fsm_automatic_run+0x2a0>
			time_1--;
 8000584:	4b5b      	ldr	r3, [pc, #364]	@ (80006f4 <fsm_automatic_run+0x3f4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3b01      	subs	r3, #1
 800058a:	4a5a      	ldr	r2, [pc, #360]	@ (80006f4 <fsm_automatic_run+0x3f4>)
 800058c:	6013      	str	r3, [r2, #0]
			time_2--;
 800058e:	4b5a      	ldr	r3, [pc, #360]	@ (80006f8 <fsm_automatic_run+0x3f8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	3b01      	subs	r3, #1
 8000594:	4a58      	ldr	r2, [pc, #352]	@ (80006f8 <fsm_automatic_run+0x3f8>)
 8000596:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 8000598:	2164      	movs	r1, #100	@ 0x64
 800059a:	2002      	movs	r0, #2
 800059c:	f001 fafa 	bl	8001b94 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 80005a0:	2001      	movs	r0, #1
 80005a2:	f001 fb0f 	bl	8001bc4 <isTimerExpired>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d110      	bne.n	80005ce <fsm_automatic_run+0x2ce>
			status = YELLOW_RED;
 80005ac:	4b53      	ldr	r3, [pc, #332]	@ (80006fc <fsm_automatic_run+0x3fc>)
 80005ae:	2205      	movs	r2, #5
 80005b0:	601a      	str	r2, [r3, #0]
			time_2 = TIME_YELLOW - 1;
 80005b2:	4b53      	ldr	r3, [pc, #332]	@ (8000700 <fsm_automatic_run+0x400>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	3b01      	subs	r3, #1
 80005b8:	4a4f      	ldr	r2, [pc, #316]	@ (80006f8 <fsm_automatic_run+0x3f8>)
 80005ba:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_YELLOW * 100);
 80005bc:	4b50      	ldr	r3, [pc, #320]	@ (8000700 <fsm_automatic_run+0x400>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2264      	movs	r2, #100	@ 0x64
 80005c2:	fb02 f303 	mul.w	r3, r2, r3
 80005c6:	4619      	mov	r1, r3
 80005c8:	2001      	movs	r0, #1
 80005ca:	f001 fae3 	bl	8001b94 <setTimer>

		}

		if (isButtonPressed(0) == 1) {
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff fdbc 	bl	800014c <isButtonPressed>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d10d      	bne.n	80005f6 <fsm_automatic_run+0x2f6>
			status = SET_RED;
 80005da:	4b48      	ldr	r3, [pc, #288]	@ (80006fc <fsm_automatic_run+0x3fc>)
 80005dc:	2210      	movs	r2, #16
 80005de:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 80005e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005e4:	2001      	movs	r0, #1
 80005e6:	f001 fad5 	bl	8001b94 <setTimer>
			setTimer(6, 50);
 80005ea:	2132      	movs	r1, #50	@ 0x32
 80005ec:	2006      	movs	r0, #6
 80005ee:	f001 fad1 	bl	8001b94 <setTimer>
			turnOff();
 80005f2:	f001 fbbb 	bl	8001d6c <turnOff>
		}
		if (isButtonPressed(1) == 1) {
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff fda8 	bl	800014c <isButtonPressed>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d173      	bne.n	80006ea <fsm_automatic_run+0x3ea>
			status = MANUAL;
 8000602:	4b3e      	ldr	r3, [pc, #248]	@ (80006fc <fsm_automatic_run+0x3fc>)
 8000604:	2208      	movs	r2, #8
 8000606:	601a      	str	r2, [r3, #0]
			status_1 = MAN_RED_1;
 8000608:	4b3e      	ldr	r3, [pc, #248]	@ (8000704 <fsm_automatic_run+0x404>)
 800060a:	220c      	movs	r2, #12
 800060c:	601a      	str	r2, [r3, #0]
			status_2 = MAN_RED_2;
 800060e:	4b3e      	ldr	r3, [pc, #248]	@ (8000708 <fsm_automatic_run+0x408>)
 8000610:	2209      	movs	r2, #9
 8000612:	601a      	str	r2, [r3, #0]

		}

		break;
 8000614:	e069      	b.n	80006ea <fsm_automatic_run+0x3ea>
	case YELLOW_RED:
		turnOn_YELLOW1();
 8000616:	f001 fb4b 	bl	8001cb0 <turnOn_YELLOW1>
		if (isTimerExpired(3) == 1) {
 800061a:	2003      	movs	r0, #3
 800061c:	f001 fad2 	bl	8001bc4 <isTimerExpired>
 8000620:	4603      	mov	r3, r0
 8000622:	2b01      	cmp	r3, #1
 8000624:	d107      	bne.n	8000636 <fsm_automatic_run+0x336>
			scanLEDs(time_1, time_2);
 8000626:	4b33      	ldr	r3, [pc, #204]	@ (80006f4 <fsm_automatic_run+0x3f4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a33      	ldr	r2, [pc, #204]	@ (80006f8 <fsm_automatic_run+0x3f8>)
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	4611      	mov	r1, r2
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fe35 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(2) == 1) {
 8000636:	2002      	movs	r0, #2
 8000638:	f001 fac4 	bl	8001bc4 <isTimerExpired>
 800063c:	4603      	mov	r3, r0
 800063e:	2b01      	cmp	r3, #1
 8000640:	d10d      	bne.n	800065e <fsm_automatic_run+0x35e>
			time_1--;
 8000642:	4b2c      	ldr	r3, [pc, #176]	@ (80006f4 <fsm_automatic_run+0x3f4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a2a      	ldr	r2, [pc, #168]	@ (80006f4 <fsm_automatic_run+0x3f4>)
 800064a:	6013      	str	r3, [r2, #0]
			time_2--;
 800064c:	4b2a      	ldr	r3, [pc, #168]	@ (80006f8 <fsm_automatic_run+0x3f8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3b01      	subs	r3, #1
 8000652:	4a29      	ldr	r2, [pc, #164]	@ (80006f8 <fsm_automatic_run+0x3f8>)
 8000654:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 8000656:	2164      	movs	r1, #100	@ 0x64
 8000658:	2002      	movs	r0, #2
 800065a:	f001 fa9b 	bl	8001b94 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 800065e:	2001      	movs	r0, #1
 8000660:	f001 fab0 	bl	8001bc4 <isTimerExpired>
 8000664:	4603      	mov	r3, r0
 8000666:	2b01      	cmp	r3, #1
 8000668:	d115      	bne.n	8000696 <fsm_automatic_run+0x396>
			status = RED_GREEN;
 800066a:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <fsm_automatic_run+0x3fc>)
 800066c:	2202      	movs	r2, #2
 800066e:	601a      	str	r2, [r3, #0]
			time_1 = TIME_GREEN - 1;
 8000670:	4b26      	ldr	r3, [pc, #152]	@ (800070c <fsm_automatic_run+0x40c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3b01      	subs	r3, #1
 8000676:	4a1f      	ldr	r2, [pc, #124]	@ (80006f4 <fsm_automatic_run+0x3f4>)
 8000678:	6013      	str	r3, [r2, #0]
			time_2 = TIME_RED - 1;
 800067a:	4b25      	ldr	r3, [pc, #148]	@ (8000710 <fsm_automatic_run+0x410>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	3b01      	subs	r3, #1
 8000680:	4a1d      	ldr	r2, [pc, #116]	@ (80006f8 <fsm_automatic_run+0x3f8>)
 8000682:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_GREEN * 100);
 8000684:	4b21      	ldr	r3, [pc, #132]	@ (800070c <fsm_automatic_run+0x40c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2264      	movs	r2, #100	@ 0x64
 800068a:	fb02 f303 	mul.w	r3, r2, r3
 800068e:	4619      	mov	r1, r3
 8000690:	2001      	movs	r0, #1
 8000692:	f001 fa7f 	bl	8001b94 <setTimer>

		}

		if (isButtonPressed(0) == 1) {
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff fd58 	bl	800014c <isButtonPressed>
 800069c:	4603      	mov	r3, r0
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10d      	bne.n	80006be <fsm_automatic_run+0x3be>
			status = SET_RED;
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <fsm_automatic_run+0x3fc>)
 80006a4:	2210      	movs	r2, #16
 80006a6:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 80006a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006ac:	2001      	movs	r0, #1
 80006ae:	f001 fa71 	bl	8001b94 <setTimer>
			setTimer(6, 50);
 80006b2:	2132      	movs	r1, #50	@ 0x32
 80006b4:	2006      	movs	r0, #6
 80006b6:	f001 fa6d 	bl	8001b94 <setTimer>
			turnOff();
 80006ba:	f001 fb57 	bl	8001d6c <turnOff>
		}
		if (isButtonPressed(1) == 1) {
 80006be:	2001      	movs	r0, #1
 80006c0:	f7ff fd44 	bl	800014c <isButtonPressed>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d111      	bne.n	80006ee <fsm_automatic_run+0x3ee>
			status = MANUAL;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <fsm_automatic_run+0x3fc>)
 80006cc:	2208      	movs	r2, #8
 80006ce:	601a      	str	r2, [r3, #0]
			status_1 = MAN_RED_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <fsm_automatic_run+0x404>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	601a      	str	r2, [r3, #0]
			status_2 = MAN_RED_2;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <fsm_automatic_run+0x408>)
 80006d8:	2209      	movs	r2, #9
 80006da:	601a      	str	r2, [r3, #0]
		}
		break;
 80006dc:	e007      	b.n	80006ee <fsm_automatic_run+0x3ee>
	default:
		break;
 80006de:	bf00      	nop
 80006e0:	e006      	b.n	80006f0 <fsm_automatic_run+0x3f0>
		break;
 80006e2:	bf00      	nop
 80006e4:	e004      	b.n	80006f0 <fsm_automatic_run+0x3f0>
		break;
 80006e6:	bf00      	nop
 80006e8:	e002      	b.n	80006f0 <fsm_automatic_run+0x3f0>
		break;
 80006ea:	bf00      	nop
 80006ec:	e000      	b.n	80006f0 <fsm_automatic_run+0x3f0>
		break;
 80006ee:	bf00      	nop
	}
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000108 	.word	0x20000108
 80006f8:	2000010c 	.word	0x2000010c
 80006fc:	200000fc 	.word	0x200000fc
 8000700:	20000004 	.word	0x20000004
 8000704:	20000100 	.word	0x20000100
 8000708:	20000104 	.word	0x20000104
 800070c:	20000008 	.word	0x20000008
 8000710:	20000000 	.word	0x20000000

08000714 <fsm_manual_run>:
 *  Created on: Oct 27, 2024
 *      Author: admin
 */
#include"fsm_manual.h"

void fsm_manual_run() {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	switch (status) {
 8000718:	4b7f      	ldr	r3, [pc, #508]	@ (8000918 <fsm_manual_run+0x204>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b08      	cmp	r3, #8
 800071e:	d003      	beq.n	8000728 <fsm_manual_run+0x14>
 8000720:	2b0f      	cmp	r3, #15
 8000722:	f000 80db 	beq.w	80008dc <fsm_manual_run+0x1c8>
		setTimer(2, 100);
		setTimer(1, TIME_GREEN * 100);

		break;
	default:
		break;
 8000726:	e0f5      	b.n	8000914 <fsm_manual_run+0x200>
		switch (status_1) {
 8000728:	4b7c      	ldr	r3, [pc, #496]	@ (800091c <fsm_manual_run+0x208>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b0e      	cmp	r3, #14
 800072e:	d025      	beq.n	800077c <fsm_manual_run+0x68>
 8000730:	2b0e      	cmp	r3, #14
 8000732:	dc64      	bgt.n	80007fe <fsm_manual_run+0xea>
 8000734:	2b0c      	cmp	r3, #12
 8000736:	d002      	beq.n	800073e <fsm_manual_run+0x2a>
 8000738:	2b0d      	cmp	r3, #13
 800073a:	d03e      	beq.n	80007ba <fsm_manual_run+0xa6>
 800073c:	e05f      	b.n	80007fe <fsm_manual_run+0xea>
			turnOn_RED1();
 800073e:	f001 fa8b 	bl	8001c58 <turnOn_RED1>
			if (isButtonPressed(1) == 1) {
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff fd02 	bl	800014c <isButtonPressed>
 8000748:	4603      	mov	r3, r0
 800074a:	2b01      	cmp	r3, #1
 800074c:	d102      	bne.n	8000754 <fsm_manual_run+0x40>
				status_1 = MAN_YELLOW_1;
 800074e:	4b73      	ldr	r3, [pc, #460]	@ (800091c <fsm_manual_run+0x208>)
 8000750:	220e      	movs	r2, #14
 8000752:	601a      	str	r2, [r3, #0]
			if (isTimerExpired(3) == 1) {
 8000754:	2003      	movs	r0, #3
 8000756:	f001 fa35 	bl	8001bc4 <isTimerExpired>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d103      	bne.n	8000768 <fsm_manual_run+0x54>
				scanLEDs(99, 99);
 8000760:	2163      	movs	r1, #99	@ 0x63
 8000762:	2063      	movs	r0, #99	@ 0x63
 8000764:	f7ff fd9c 	bl	80002a0 <scanLEDs>
			if (isButtonPressed(0) == 1) {
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff fcef 	bl	800014c <isButtonPressed>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d141      	bne.n	80007f8 <fsm_manual_run+0xe4>
				status = READY;
 8000774:	4b68      	ldr	r3, [pc, #416]	@ (8000918 <fsm_manual_run+0x204>)
 8000776:	220f      	movs	r2, #15
 8000778:	601a      	str	r2, [r3, #0]
			break;
 800077a:	e03d      	b.n	80007f8 <fsm_manual_run+0xe4>
			turnOn_YELLOW1();
 800077c:	f001 fa98 	bl	8001cb0 <turnOn_YELLOW1>
			if (isButtonPressed(1) == 1) {
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff fce3 	bl	800014c <isButtonPressed>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d102      	bne.n	8000792 <fsm_manual_run+0x7e>
				status_1 = MAN_GREEN_1;
 800078c:	4b63      	ldr	r3, [pc, #396]	@ (800091c <fsm_manual_run+0x208>)
 800078e:	220d      	movs	r2, #13
 8000790:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(0) == 1) {
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff fcda 	bl	800014c <isButtonPressed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d102      	bne.n	80007a4 <fsm_manual_run+0x90>
				status = READY;
 800079e:	4b5e      	ldr	r3, [pc, #376]	@ (8000918 <fsm_manual_run+0x204>)
 80007a0:	220f      	movs	r2, #15
 80007a2:	601a      	str	r2, [r3, #0]
			if (isTimerExpired(3) == 1) {
 80007a4:	2003      	movs	r0, #3
 80007a6:	f001 fa0d 	bl	8001bc4 <isTimerExpired>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d125      	bne.n	80007fc <fsm_manual_run+0xe8>
				scanLEDs(99, 99);
 80007b0:	2163      	movs	r1, #99	@ 0x63
 80007b2:	2063      	movs	r0, #99	@ 0x63
 80007b4:	f7ff fd74 	bl	80002a0 <scanLEDs>
			break;
 80007b8:	e020      	b.n	80007fc <fsm_manual_run+0xe8>
			turnOn_GREEN1();
 80007ba:	f001 fa63 	bl	8001c84 <turnOn_GREEN1>
			if (isButtonPressed(1) == 1) {
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fcc4 	bl	800014c <isButtonPressed>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d102      	bne.n	80007d0 <fsm_manual_run+0xbc>
				status_1 = MAN_RED_1;
 80007ca:	4b54      	ldr	r3, [pc, #336]	@ (800091c <fsm_manual_run+0x208>)
 80007cc:	220c      	movs	r2, #12
 80007ce:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(0) == 1) {
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff fcbb 	bl	800014c <isButtonPressed>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d102      	bne.n	80007e2 <fsm_manual_run+0xce>
				status = READY;
 80007dc:	4b4e      	ldr	r3, [pc, #312]	@ (8000918 <fsm_manual_run+0x204>)
 80007de:	220f      	movs	r2, #15
 80007e0:	601a      	str	r2, [r3, #0]
			if (isTimerExpired(3) == 1) {
 80007e2:	2003      	movs	r0, #3
 80007e4:	f001 f9ee 	bl	8001bc4 <isTimerExpired>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d107      	bne.n	80007fe <fsm_manual_run+0xea>
				scanLEDs(99, 99);
 80007ee:	2163      	movs	r1, #99	@ 0x63
 80007f0:	2063      	movs	r0, #99	@ 0x63
 80007f2:	f7ff fd55 	bl	80002a0 <scanLEDs>
 80007f6:	e002      	b.n	80007fe <fsm_manual_run+0xea>
			break;
 80007f8:	bf00      	nop
 80007fa:	e000      	b.n	80007fe <fsm_manual_run+0xea>
			break;
 80007fc:	bf00      	nop
		switch (status_2) {
 80007fe:	4b48      	ldr	r3, [pc, #288]	@ (8000920 <fsm_manual_run+0x20c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b0b      	cmp	r3, #11
 8000804:	d026      	beq.n	8000854 <fsm_manual_run+0x140>
 8000806:	2b0b      	cmp	r3, #11
 8000808:	f300 8083 	bgt.w	8000912 <fsm_manual_run+0x1fe>
 800080c:	2b09      	cmp	r3, #9
 800080e:	d002      	beq.n	8000816 <fsm_manual_run+0x102>
 8000810:	2b0a      	cmp	r3, #10
 8000812:	d03e      	beq.n	8000892 <fsm_manual_run+0x17e>
		break;
 8000814:	e07d      	b.n	8000912 <fsm_manual_run+0x1fe>
			turnOn_RED2();
 8000816:	f001 fa61 	bl	8001cdc <turnOn_RED2>
			if (isButtonPressed(2) == 1) {
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff fc96 	bl	800014c <isButtonPressed>
 8000820:	4603      	mov	r3, r0
 8000822:	2b01      	cmp	r3, #1
 8000824:	d102      	bne.n	800082c <fsm_manual_run+0x118>
				status_2 = MAN_YELLOW_2;
 8000826:	4b3e      	ldr	r3, [pc, #248]	@ (8000920 <fsm_manual_run+0x20c>)
 8000828:	220b      	movs	r2, #11
 800082a:	601a      	str	r2, [r3, #0]
			if (isTimerExpired(3) == 1) {
 800082c:	2003      	movs	r0, #3
 800082e:	f001 f9c9 	bl	8001bc4 <isTimerExpired>
 8000832:	4603      	mov	r3, r0
 8000834:	2b01      	cmp	r3, #1
 8000836:	d103      	bne.n	8000840 <fsm_manual_run+0x12c>
				scanLEDs(99, 99);
 8000838:	2163      	movs	r1, #99	@ 0x63
 800083a:	2063      	movs	r0, #99	@ 0x63
 800083c:	f7ff fd30 	bl	80002a0 <scanLEDs>
			if (isButtonPressed(0) == 1) {
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff fc83 	bl	800014c <isButtonPressed>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d141      	bne.n	80008d0 <fsm_manual_run+0x1bc>
				status = READY;
 800084c:	4b32      	ldr	r3, [pc, #200]	@ (8000918 <fsm_manual_run+0x204>)
 800084e:	220f      	movs	r2, #15
 8000850:	601a      	str	r2, [r3, #0]
			break;
 8000852:	e03d      	b.n	80008d0 <fsm_manual_run+0x1bc>
			turnOn_YELLOW2();
 8000854:	f001 fa72 	bl	8001d3c <turnOn_YELLOW2>
			if (isButtonPressed(2) == 1) {
 8000858:	2002      	movs	r0, #2
 800085a:	f7ff fc77 	bl	800014c <isButtonPressed>
 800085e:	4603      	mov	r3, r0
 8000860:	2b01      	cmp	r3, #1
 8000862:	d102      	bne.n	800086a <fsm_manual_run+0x156>
				status_2 = MAN_GREEN_2;
 8000864:	4b2e      	ldr	r3, [pc, #184]	@ (8000920 <fsm_manual_run+0x20c>)
 8000866:	220a      	movs	r2, #10
 8000868:	601a      	str	r2, [r3, #0]
			if (isTimerExpired(3) == 1) {
 800086a:	2003      	movs	r0, #3
 800086c:	f001 f9aa 	bl	8001bc4 <isTimerExpired>
 8000870:	4603      	mov	r3, r0
 8000872:	2b01      	cmp	r3, #1
 8000874:	d103      	bne.n	800087e <fsm_manual_run+0x16a>
				scanLEDs(99, 5);
 8000876:	2105      	movs	r1, #5
 8000878:	2063      	movs	r0, #99	@ 0x63
 800087a:	f7ff fd11 	bl	80002a0 <scanLEDs>
			if (isButtonPressed(0) == 1) {
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff fc64 	bl	800014c <isButtonPressed>
 8000884:	4603      	mov	r3, r0
 8000886:	2b01      	cmp	r3, #1
 8000888:	d124      	bne.n	80008d4 <fsm_manual_run+0x1c0>
				status = READY;
 800088a:	4b23      	ldr	r3, [pc, #140]	@ (8000918 <fsm_manual_run+0x204>)
 800088c:	220f      	movs	r2, #15
 800088e:	601a      	str	r2, [r3, #0]
			break;
 8000890:	e020      	b.n	80008d4 <fsm_manual_run+0x1c0>
			turnOn_GREEN2();
 8000892:	f001 fa3b 	bl	8001d0c <turnOn_GREEN2>
			if (isButtonPressed(2) == 1) {
 8000896:	2002      	movs	r0, #2
 8000898:	f7ff fc58 	bl	800014c <isButtonPressed>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d102      	bne.n	80008a8 <fsm_manual_run+0x194>
				status_2 = MAN_RED_2;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <fsm_manual_run+0x20c>)
 80008a4:	2209      	movs	r2, #9
 80008a6:	601a      	str	r2, [r3, #0]
			if (isTimerExpired(3) == 1) {
 80008a8:	2003      	movs	r0, #3
 80008aa:	f001 f98b 	bl	8001bc4 <isTimerExpired>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d103      	bne.n	80008bc <fsm_manual_run+0x1a8>
				scanLEDs(99, 5);
 80008b4:	2105      	movs	r1, #5
 80008b6:	2063      	movs	r0, #99	@ 0x63
 80008b8:	f7ff fcf2 	bl	80002a0 <scanLEDs>
			if (isButtonPressed(0) == 1) {
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fc45 	bl	800014c <isButtonPressed>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d107      	bne.n	80008d8 <fsm_manual_run+0x1c4>
				status = READY;
 80008c8:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <fsm_manual_run+0x204>)
 80008ca:	220f      	movs	r2, #15
 80008cc:	601a      	str	r2, [r3, #0]
			break;
 80008ce:	e003      	b.n	80008d8 <fsm_manual_run+0x1c4>
			break;
 80008d0:	bf00      	nop
 80008d2:	e01e      	b.n	8000912 <fsm_manual_run+0x1fe>
			break;
 80008d4:	bf00      	nop
 80008d6:	e01c      	b.n	8000912 <fsm_manual_run+0x1fe>
			break;
 80008d8:	bf00      	nop
		break;
 80008da:	e01a      	b.n	8000912 <fsm_manual_run+0x1fe>
		status = RED_GREEN;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <fsm_manual_run+0x204>)
 80008de:	2202      	movs	r2, #2
 80008e0:	601a      	str	r2, [r3, #0]
		time_1 = TIME_GREEN - 1;
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <fsm_manual_run+0x210>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000928 <fsm_manual_run+0x214>)
 80008ea:	6013      	str	r3, [r2, #0]
		time_2 = TIME_RED - 1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <fsm_manual_run+0x218>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000930 <fsm_manual_run+0x21c>)
 80008f4:	6013      	str	r3, [r2, #0]
		setTimer(2, 100);
 80008f6:	2164      	movs	r1, #100	@ 0x64
 80008f8:	2002      	movs	r0, #2
 80008fa:	f001 f94b 	bl	8001b94 <setTimer>
		setTimer(1, TIME_GREEN * 100);
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <fsm_manual_run+0x210>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2264      	movs	r2, #100	@ 0x64
 8000904:	fb02 f303 	mul.w	r3, r2, r3
 8000908:	4619      	mov	r1, r3
 800090a:	2001      	movs	r0, #1
 800090c:	f001 f942 	bl	8001b94 <setTimer>
		break;
 8000910:	e000      	b.n	8000914 <fsm_manual_run+0x200>
		break;
 8000912:	bf00      	nop
	}
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200000fc 	.word	0x200000fc
 800091c:	20000100 	.word	0x20000100
 8000920:	20000104 	.word	0x20000104
 8000924:	20000008 	.word	0x20000008
 8000928:	20000108 	.word	0x20000108
 800092c:	20000000 	.word	0x20000000
 8000930:	2000010c 	.word	0x2000010c

08000934 <fsm_setting>:
 *      Author: admin
 */

#include"fsm_setting.h"

void fsm_setting() {
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	switch (status) {
 8000938:	4b96      	ldr	r3, [pc, #600]	@ (8000b94 <fsm_setting+0x260>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3b10      	subs	r3, #16
 800093e:	2b04      	cmp	r3, #4
 8000940:	f200 811c 	bhi.w	8000b7c <fsm_setting+0x248>
 8000944:	a201      	add	r2, pc, #4	@ (adr r2, 800094c <fsm_setting+0x18>)
 8000946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094a:	bf00      	nop
 800094c:	08000961 	.word	0x08000961
 8000950:	080009f1 	.word	0x080009f1
 8000954:	08000acf 	.word	0x08000acf
 8000958:	08000b7d 	.word	0x08000b7d
 800095c:	08000b55 	.word	0x08000b55

	case SET_RED:

		if (isTimerExpired(6) == 1) {
 8000960:	2006      	movs	r0, #6
 8000962:	f001 f92f 	bl	8001bc4 <isTimerExpired>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	d10c      	bne.n	8000986 <fsm_setting+0x52>
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800096c:	2140      	movs	r1, #64	@ 0x40
 800096e:	488a      	ldr	r0, [pc, #552]	@ (8000b98 <fsm_setting+0x264>)
 8000970:	f001 fd65 	bl	800243e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8000974:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000978:	4887      	ldr	r0, [pc, #540]	@ (8000b98 <fsm_setting+0x264>)
 800097a:	f001 fd60 	bl	800243e <HAL_GPIO_TogglePin>
			setTimer(6, 50);
 800097e:	2132      	movs	r1, #50	@ 0x32
 8000980:	2006      	movs	r0, #6
 8000982:	f001 f907 	bl	8001b94 <setTimer>
		}

		if (isButtonPressed(0) == 1) {
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fbe0 	bl	800014c <isButtonPressed>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d107      	bne.n	80009a2 <fsm_setting+0x6e>
			status = SET_YELLOW;
 8000992:	4b80      	ldr	r3, [pc, #512]	@ (8000b94 <fsm_setting+0x260>)
 8000994:	2212      	movs	r2, #18
 8000996:	601a      	str	r2, [r3, #0]
			turnOff();
 8000998:	f001 f9e8 	bl	8001d6c <turnOff>
			count = 0;
 800099c:	4b7f      	ldr	r3, [pc, #508]	@ (8000b9c <fsm_setting+0x268>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]

		}
		if (isTimerExpired(3) == 1) {
 80009a2:	2003      	movs	r0, #3
 80009a4:	f001 f90e 	bl	8001bc4 <isTimerExpired>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d105      	bne.n	80009ba <fsm_setting+0x86>

			scanLEDs(count, 2);
 80009ae:	4b7b      	ldr	r3, [pc, #492]	@ (8000b9c <fsm_setting+0x268>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2102      	movs	r1, #2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fc73 	bl	80002a0 <scanLEDs>
		}
		if (isButtonPressed(1) == 1) {
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff fbc6 	bl	800014c <isButtonPressed>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d104      	bne.n	80009d0 <fsm_setting+0x9c>
			count++;
 80009c6:	4b75      	ldr	r3, [pc, #468]	@ (8000b9c <fsm_setting+0x268>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	3301      	adds	r3, #1
 80009cc:	4a73      	ldr	r2, [pc, #460]	@ (8000b9c <fsm_setting+0x268>)
 80009ce:	6013      	str	r3, [r2, #0]

		}
		if (isButtonPressed(2) == 1) {
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff fbbb 	bl	800014c <isButtonPressed>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b01      	cmp	r3, #1
 80009da:	f040 80d1 	bne.w	8000b80 <fsm_setting+0x24c>
			TIME_RED = count;
 80009de:	4b6f      	ldr	r3, [pc, #444]	@ (8000b9c <fsm_setting+0x268>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a6f      	ldr	r2, [pc, #444]	@ (8000ba0 <fsm_setting+0x26c>)
 80009e4:	6013      	str	r3, [r2, #0]
			time_1 = count;
 80009e6:	4b6d      	ldr	r3, [pc, #436]	@ (8000b9c <fsm_setting+0x268>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a6e      	ldr	r2, [pc, #440]	@ (8000ba4 <fsm_setting+0x270>)
 80009ec:	6013      	str	r3, [r2, #0]
		}
		break;
 80009ee:	e0c7      	b.n	8000b80 <fsm_setting+0x24c>
	case SET_GREEN:

		if (isTimerExpired(6) == 1) {
 80009f0:	2006      	movs	r0, #6
 80009f2:	f001 f8e7 	bl	8001bc4 <isTimerExpired>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d10d      	bne.n	8000a18 <fsm_setting+0xe4>
			HAL_GPIO_TogglePin(LED_6_GPIO_Port, LED_6_Pin);
 80009fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a00:	4865      	ldr	r0, [pc, #404]	@ (8000b98 <fsm_setting+0x264>)
 8000a02:	f001 fd1c 	bl	800243e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000a06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a0a:	4863      	ldr	r0, [pc, #396]	@ (8000b98 <fsm_setting+0x264>)
 8000a0c:	f001 fd17 	bl	800243e <HAL_GPIO_TogglePin>
			setTimer(6, 50);
 8000a10:	2132      	movs	r1, #50	@ 0x32
 8000a12:	2006      	movs	r0, #6
 8000a14:	f001 f8be 	bl	8001b94 <setTimer>
		}

		if (isTimerExpired(3) == 1) {
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f001 f8d3 	bl	8001bc4 <isTimerExpired>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d105      	bne.n	8000a30 <fsm_setting+0xfc>
			scanLEDs(count, 4);
 8000a24:	4b5d      	ldr	r3, [pc, #372]	@ (8000b9c <fsm_setting+0x268>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2104      	movs	r1, #4
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fc38 	bl	80002a0 <scanLEDs>
		}

		if (isButtonPressed(1) == 1) {
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff fb8b 	bl	800014c <isButtonPressed>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d104      	bne.n	8000a46 <fsm_setting+0x112>
			count++;
 8000a3c:	4b57      	ldr	r3, [pc, #348]	@ (8000b9c <fsm_setting+0x268>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	4a56      	ldr	r2, [pc, #344]	@ (8000b9c <fsm_setting+0x268>)
 8000a44:	6013      	str	r3, [r2, #0]

		}
		if (isButtonPressed(2) == 1) {
 8000a46:	2002      	movs	r0, #2
 8000a48:	f7ff fb80 	bl	800014c <isButtonPressed>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d107      	bne.n	8000a62 <fsm_setting+0x12e>
			TIME_GREEN = count;
 8000a52:	4b52      	ldr	r3, [pc, #328]	@ (8000b9c <fsm_setting+0x268>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a54      	ldr	r2, [pc, #336]	@ (8000ba8 <fsm_setting+0x274>)
 8000a58:	6013      	str	r3, [r2, #0]
			time_1 = count;
 8000a5a:	4b50      	ldr	r3, [pc, #320]	@ (8000b9c <fsm_setting+0x268>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a51      	ldr	r2, [pc, #324]	@ (8000ba4 <fsm_setting+0x270>)
 8000a60:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(0) == 1) {
 8000a62:	2000      	movs	r0, #0
 8000a64:	f7ff fb72 	bl	800014c <isButtonPressed>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	f040 808a 	bne.w	8000b84 <fsm_setting+0x250>
			count = 0;
 8000a70:	4b4a      	ldr	r3, [pc, #296]	@ (8000b9c <fsm_setting+0x268>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
			if (TIME_RED == TIME_YELLOW + TIME_GREEN) {
 8000a76:	4b4d      	ldr	r3, [pc, #308]	@ (8000bac <fsm_setting+0x278>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8000ba8 <fsm_setting+0x274>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	441a      	add	r2, r3
 8000a80:	4b47      	ldr	r3, [pc, #284]	@ (8000ba0 <fsm_setting+0x26c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d11a      	bne.n	8000abe <fsm_setting+0x18a>
				status = RED_GREEN;
 8000a88:	4b42      	ldr	r3, [pc, #264]	@ (8000b94 <fsm_setting+0x260>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	601a      	str	r2, [r3, #0]
				time_1 = TIME_GREEN - 1;
 8000a8e:	4b46      	ldr	r3, [pc, #280]	@ (8000ba8 <fsm_setting+0x274>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	4a43      	ldr	r2, [pc, #268]	@ (8000ba4 <fsm_setting+0x270>)
 8000a96:	6013      	str	r3, [r2, #0]
				time_2 = TIME_RED - 1;
 8000a98:	4b41      	ldr	r3, [pc, #260]	@ (8000ba0 <fsm_setting+0x26c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	4a44      	ldr	r2, [pc, #272]	@ (8000bb0 <fsm_setting+0x27c>)
 8000aa0:	6013      	str	r3, [r2, #0]
				setTimer(2, 100);
 8000aa2:	2164      	movs	r1, #100	@ 0x64
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f001 f875 	bl	8001b94 <setTimer>
				setTimer(1, TIME_GREEN * 100);
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8000ba8 <fsm_setting+0x274>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2264      	movs	r2, #100	@ 0x64
 8000ab0:	fb02 f303 	mul.w	r3, r2, r3
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f001 f86c 	bl	8001b94 <setTimer>
				status = ERR;
				setTimer(4, 100);
			}

		}
		break;
 8000abc:	e062      	b.n	8000b84 <fsm_setting+0x250>
				status = ERR;
 8000abe:	4b35      	ldr	r3, [pc, #212]	@ (8000b94 <fsm_setting+0x260>)
 8000ac0:	2214      	movs	r2, #20
 8000ac2:	601a      	str	r2, [r3, #0]
				setTimer(4, 100);
 8000ac4:	2164      	movs	r1, #100	@ 0x64
 8000ac6:	2004      	movs	r0, #4
 8000ac8:	f001 f864 	bl	8001b94 <setTimer>
		break;
 8000acc:	e05a      	b.n	8000b84 <fsm_setting+0x250>
	case SET_YELLOW:

		if (isTimerExpired(6) == 1) {
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f001 f878 	bl	8001bc4 <isTimerExpired>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d10c      	bne.n	8000af4 <fsm_setting+0x1c0>
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000ada:	2180      	movs	r1, #128	@ 0x80
 8000adc:	482e      	ldr	r0, [pc, #184]	@ (8000b98 <fsm_setting+0x264>)
 8000ade:	f001 fcae 	bl	800243e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_5_GPIO_Port, LED_5_Pin);
 8000ae2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae6:	482c      	ldr	r0, [pc, #176]	@ (8000b98 <fsm_setting+0x264>)
 8000ae8:	f001 fca9 	bl	800243e <HAL_GPIO_TogglePin>
			setTimer(6, 50);
 8000aec:	2132      	movs	r1, #50	@ 0x32
 8000aee:	2006      	movs	r0, #6
 8000af0:	f001 f850 	bl	8001b94 <setTimer>
		}

		if (isTimerExpired(3) == 1) {
 8000af4:	2003      	movs	r0, #3
 8000af6:	f001 f865 	bl	8001bc4 <isTimerExpired>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d105      	bne.n	8000b0c <fsm_setting+0x1d8>

			scanLEDs(count, 3);
 8000b00:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <fsm_setting+0x268>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2103      	movs	r1, #3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fbca 	bl	80002a0 <scanLEDs>

		}
		if (isButtonPressed(0) == 1) {
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff fb1d 	bl	800014c <isButtonPressed>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d107      	bne.n	8000b28 <fsm_setting+0x1f4>
			status = SET_GREEN;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <fsm_setting+0x260>)
 8000b1a:	2211      	movs	r2, #17
 8000b1c:	601a      	str	r2, [r3, #0]
			turnOff();
 8000b1e:	f001 f925 	bl	8001d6c <turnOff>
			count = 0;
 8000b22:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <fsm_setting+0x268>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1) {
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f7ff fb0f 	bl	800014c <isButtonPressed>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d104      	bne.n	8000b3e <fsm_setting+0x20a>
			count++;
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <fsm_setting+0x268>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	4a18      	ldr	r2, [pc, #96]	@ (8000b9c <fsm_setting+0x268>)
 8000b3c:	6013      	str	r3, [r2, #0]

		}
		if (isButtonPressed(2) == 1) {
 8000b3e:	2002      	movs	r0, #2
 8000b40:	f7ff fb04 	bl	800014c <isButtonPressed>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d11e      	bne.n	8000b88 <fsm_setting+0x254>
			TIME_YELLOW = count;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <fsm_setting+0x268>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a17      	ldr	r2, [pc, #92]	@ (8000bac <fsm_setting+0x278>)
 8000b50:	6013      	str	r3, [r2, #0]

		}
		break;
 8000b52:	e019      	b.n	8000b88 <fsm_setting+0x254>
	case ERR:
		if (isTimerExpired(3)) {
 8000b54:	2003      	movs	r0, #3
 8000b56:	f001 f835 	bl	8001bc4 <isTimerExpired>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <fsm_setting+0x234>
			scanLEDs(99, 99);
 8000b60:	2163      	movs	r1, #99	@ 0x63
 8000b62:	2063      	movs	r0, #99	@ 0x63
 8000b64:	f7ff fb9c 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(4)) {
 8000b68:	2004      	movs	r0, #4
 8000b6a:	f001 f82b 	bl	8001bc4 <isTimerExpired>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00b      	beq.n	8000b8c <fsm_setting+0x258>
			status = INIT;
 8000b74:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <fsm_setting+0x260>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b7a:	e007      	b.n	8000b8c <fsm_setting+0x258>
	default:
		break;
 8000b7c:	bf00      	nop
 8000b7e:	e006      	b.n	8000b8e <fsm_setting+0x25a>
		break;
 8000b80:	bf00      	nop
 8000b82:	e004      	b.n	8000b8e <fsm_setting+0x25a>
		break;
 8000b84:	bf00      	nop
 8000b86:	e002      	b.n	8000b8e <fsm_setting+0x25a>
		break;
 8000b88:	bf00      	nop
 8000b8a:	e000      	b.n	8000b8e <fsm_setting+0x25a>
		break;
 8000b8c:	bf00      	nop
	}
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000fc 	.word	0x200000fc
 8000b98:	40010800 	.word	0x40010800
 8000b9c:	20000110 	.word	0x20000110
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000108 	.word	0x20000108
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000004 	.word	0x20000004
 8000bb0:	2000010c 	.word	0x2000010c

08000bb4 <updateClockBuffer>:
 *      Author: admin
 */
#include"led7_segment.h"
int led_buffer[4] = { 0, 0, 0, 0 };

void updateClockBuffer(int time1, int time2) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	led_buffer[0] = time1 / 10;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a18      	ldr	r2, [pc, #96]	@ (8000c24 <updateClockBuffer+0x70>)
 8000bc2:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc6:	1092      	asrs	r2, r2, #2
 8000bc8:	17db      	asrs	r3, r3, #31
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	4a16      	ldr	r2, [pc, #88]	@ (8000c28 <updateClockBuffer+0x74>)
 8000bce:	6013      	str	r3, [r2, #0]
	led_buffer[1] = time1 % 10;
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <updateClockBuffer+0x70>)
 8000bd4:	fb83 2301 	smull	r2, r3, r3, r1
 8000bd8:	109a      	asrs	r2, r3, #2
 8000bda:	17cb      	asrs	r3, r1, #31
 8000bdc:	1ad2      	subs	r2, r2, r3
 8000bde:	4613      	mov	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	1aca      	subs	r2, r1, r3
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <updateClockBuffer+0x74>)
 8000bea:	605a      	str	r2, [r3, #4]
	led_buffer[2] = time2 / 10;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	4a0d      	ldr	r2, [pc, #52]	@ (8000c24 <updateClockBuffer+0x70>)
 8000bf0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf4:	1092      	asrs	r2, r2, #2
 8000bf6:	17db      	asrs	r3, r3, #31
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000c28 <updateClockBuffer+0x74>)
 8000bfc:	6093      	str	r3, [r2, #8]
	led_buffer[3] = time2 % 10;
 8000bfe:	6839      	ldr	r1, [r7, #0]
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <updateClockBuffer+0x70>)
 8000c02:	fb83 2301 	smull	r2, r3, r3, r1
 8000c06:	109a      	asrs	r2, r3, #2
 8000c08:	17cb      	asrs	r3, r1, #31
 8000c0a:	1ad2      	subs	r2, r2, r3
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	1aca      	subs	r2, r1, r3
 8000c16:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <updateClockBuffer+0x74>)
 8000c18:	60da      	str	r2, [r3, #12]
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	66666667 	.word	0x66666667
 8000c28:	2000011c 	.word	0x2000011c

08000c2c <update7SEG_1>:
void update7SEG_1(int index) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

	switch (index) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <update7SEG_1+0x16>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d012      	beq.n	8000c66 <update7SEG_1+0x3a>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
		display7SEG_1(led_buffer[1]);
		break;
	default:
		break;
 8000c40:	e023      	b.n	8000c8a <update7SEG_1+0x5e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c48:	4812      	ldr	r0, [pc, #72]	@ (8000c94 <update7SEG_1+0x68>)
 8000c4a:	f001 fbe0 	bl	800240e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c54:	480f      	ldr	r0, [pc, #60]	@ (8000c94 <update7SEG_1+0x68>)
 8000c56:	f001 fbda 	bl	800240e <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer[0]);
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <update7SEG_1+0x6c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f854 	bl	8000d0c <display7SEG_1>
		break;
 8000c64:	e011      	b.n	8000c8a <update7SEG_1+0x5e>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <update7SEG_1+0x68>)
 8000c6e:	f001 fbce 	bl	800240e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c78:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <update7SEG_1+0x68>)
 8000c7a:	f001 fbc8 	bl	800240e <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer[1]);
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <update7SEG_1+0x6c>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f842 	bl	8000d0c <display7SEG_1>
		break;
 8000c88:	bf00      	nop
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40010800 	.word	0x40010800
 8000c98:	2000011c 	.word	0x2000011c

08000c9c <update7SEG_2>:
void update7SEG_2(int index) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

	switch (index) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <update7SEG_2+0x16>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d012      	beq.n	8000cd6 <update7SEG_2+0x3a>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
		display7SEG_2(led_buffer[3]);
		break;
	default:
		break;
 8000cb0:	e023      	b.n	8000cfa <update7SEG_2+0x5e>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cb8:	4812      	ldr	r0, [pc, #72]	@ (8000d04 <update7SEG_2+0x68>)
 8000cba:	f001 fba8 	bl	800240e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cc4:	480f      	ldr	r0, [pc, #60]	@ (8000d04 <update7SEG_2+0x68>)
 8000cc6:	f001 fba2 	bl	800240e <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer[2]);
 8000cca:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <update7SEG_2+0x6c>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f9e4 	bl	800109c <display7SEG_2>
		break;
 8000cd4:	e011      	b.n	8000cfa <update7SEG_2+0x5e>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cdc:	4809      	ldr	r0, [pc, #36]	@ (8000d04 <update7SEG_2+0x68>)
 8000cde:	f001 fb96 	bl	800240e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce8:	4806      	ldr	r0, [pc, #24]	@ (8000d04 <update7SEG_2+0x68>)
 8000cea:	f001 fb90 	bl	800240e <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer[3]);
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <update7SEG_2+0x6c>)
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f9d2 	bl	800109c <display7SEG_2>
		break;
 8000cf8:	bf00      	nop
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40010800 	.word	0x40010800
 8000d08:	2000011c 	.word	0x2000011c

08000d0c <display7SEG_1>:
void display7SEG_1(int num) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b09      	cmp	r3, #9
 8000d18:	f200 8194 	bhi.w	8001044 <display7SEG_1+0x338>
 8000d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d24 <display7SEG_1+0x18>)
 8000d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d22:	bf00      	nop
 8000d24:	08000d4d 	.word	0x08000d4d
 8000d28:	08000d99 	.word	0x08000d99
 8000d2c:	08000de5 	.word	0x08000de5
 8000d30:	08000e31 	.word	0x08000e31
 8000d34:	08000e7d 	.word	0x08000e7d
 8000d38:	08000ec9 	.word	0x08000ec9
 8000d3c:	08000f15 	.word	0x08000f15
 8000d40:	08000f61 	.word	0x08000f61
 8000d44:	08000fad 	.word	0x08000fad
 8000d48:	08000ff9 	.word	0x08000ff9
	case 0:
		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2101      	movs	r1, #1
 8000d50:	48d1      	ldr	r0, [pc, #836]	@ (8001098 <display7SEG_1+0x38c>)
 8000d52:	f001 fb5c 	bl	800240e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2102      	movs	r1, #2
 8000d5a:	48cf      	ldr	r0, [pc, #828]	@ (8001098 <display7SEG_1+0x38c>)
 8000d5c:	f001 fb57 	bl	800240e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2104      	movs	r1, #4
 8000d64:	48cc      	ldr	r0, [pc, #816]	@ (8001098 <display7SEG_1+0x38c>)
 8000d66:	f001 fb52 	bl	800240e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2108      	movs	r1, #8
 8000d6e:	48ca      	ldr	r0, [pc, #808]	@ (8001098 <display7SEG_1+0x38c>)
 8000d70:	f001 fb4d 	bl	800240e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2110      	movs	r1, #16
 8000d78:	48c7      	ldr	r0, [pc, #796]	@ (8001098 <display7SEG_1+0x38c>)
 8000d7a:	f001 fb48 	bl	800240e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d84:	48c4      	ldr	r0, [pc, #784]	@ (8001098 <display7SEG_1+0x38c>)
 8000d86:	f001 fb42 	bl	800240e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d90:	48c1      	ldr	r0, [pc, #772]	@ (8001098 <display7SEG_1+0x38c>)
 8000d92:	f001 fb3c 	bl	800240e <HAL_GPIO_WritePin>

		break;
 8000d96:	e17b      	b.n	8001090 <display7SEG_1+0x384>

	case 1:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	48be      	ldr	r0, [pc, #760]	@ (8001098 <display7SEG_1+0x38c>)
 8000d9e:	f001 fb36 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2108      	movs	r1, #8
 8000da6:	48bc      	ldr	r0, [pc, #752]	@ (8001098 <display7SEG_1+0x38c>)
 8000da8:	f001 fb31 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2110      	movs	r1, #16
 8000db0:	48b9      	ldr	r0, [pc, #740]	@ (8001098 <display7SEG_1+0x38c>)
 8000db2:	f001 fb2c 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dbc:	48b6      	ldr	r0, [pc, #728]	@ (8001098 <display7SEG_1+0x38c>)
 8000dbe:	f001 fb26 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dc8:	48b3      	ldr	r0, [pc, #716]	@ (8001098 <display7SEG_1+0x38c>)
 8000dca:	f001 fb20 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	48b1      	ldr	r0, [pc, #708]	@ (8001098 <display7SEG_1+0x38c>)
 8000dd4:	f001 fb1b 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2104      	movs	r1, #4
 8000ddc:	48ae      	ldr	r0, [pc, #696]	@ (8001098 <display7SEG_1+0x38c>)
 8000dde:	f001 fb16 	bl	800240e <HAL_GPIO_WritePin>

		break;
 8000de2:	e155      	b.n	8001090 <display7SEG_1+0x384>

	case 2:

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2104      	movs	r1, #4
 8000de8:	48ab      	ldr	r0, [pc, #684]	@ (8001098 <display7SEG_1+0x38c>)
 8000dea:	f001 fb10 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000df4:	48a8      	ldr	r0, [pc, #672]	@ (8001098 <display7SEG_1+0x38c>)
 8000df6:	f001 fb0a 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	48a6      	ldr	r0, [pc, #664]	@ (8001098 <display7SEG_1+0x38c>)
 8000e00:	f001 fb05 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2102      	movs	r1, #2
 8000e08:	48a3      	ldr	r0, [pc, #652]	@ (8001098 <display7SEG_1+0x38c>)
 8000e0a:	f001 fb00 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2108      	movs	r1, #8
 8000e12:	48a1      	ldr	r0, [pc, #644]	@ (8001098 <display7SEG_1+0x38c>)
 8000e14:	f001 fafb 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	489e      	ldr	r0, [pc, #632]	@ (8001098 <display7SEG_1+0x38c>)
 8000e1e:	f001 faf6 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e28:	489b      	ldr	r0, [pc, #620]	@ (8001098 <display7SEG_1+0x38c>)
 8000e2a:	f001 faf0 	bl	800240e <HAL_GPIO_WritePin>

		break;
 8000e2e:	e12f      	b.n	8001090 <display7SEG_1+0x384>

	case 3:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2110      	movs	r1, #16
 8000e34:	4898      	ldr	r0, [pc, #608]	@ (8001098 <display7SEG_1+0x38c>)
 8000e36:	f001 faea 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e40:	4895      	ldr	r0, [pc, #596]	@ (8001098 <display7SEG_1+0x38c>)
 8000e42:	f001 fae4 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2104      	movs	r1, #4
 8000e4a:	4893      	ldr	r0, [pc, #588]	@ (8001098 <display7SEG_1+0x38c>)
 8000e4c:	f001 fadf 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2101      	movs	r1, #1
 8000e54:	4890      	ldr	r0, [pc, #576]	@ (8001098 <display7SEG_1+0x38c>)
 8000e56:	f001 fada 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	488e      	ldr	r0, [pc, #568]	@ (8001098 <display7SEG_1+0x38c>)
 8000e60:	f001 fad5 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2108      	movs	r1, #8
 8000e68:	488b      	ldr	r0, [pc, #556]	@ (8001098 <display7SEG_1+0x38c>)
 8000e6a:	f001 fad0 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e74:	4888      	ldr	r0, [pc, #544]	@ (8001098 <display7SEG_1+0x38c>)
 8000e76:	f001 faca 	bl	800240e <HAL_GPIO_WritePin>

		break;
 8000e7a:	e109      	b.n	8001090 <display7SEG_1+0x384>

	case 4:

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e82:	4885      	ldr	r0, [pc, #532]	@ (8001098 <display7SEG_1+0x38c>)
 8000e84:	f001 fac3 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e8e:	4882      	ldr	r0, [pc, #520]	@ (8001098 <display7SEG_1+0x38c>)
 8000e90:	f001 fabd 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2102      	movs	r1, #2
 8000e98:	487f      	ldr	r0, [pc, #508]	@ (8001098 <display7SEG_1+0x38c>)
 8000e9a:	f001 fab8 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	487d      	ldr	r0, [pc, #500]	@ (8001098 <display7SEG_1+0x38c>)
 8000ea4:	f001 fab3 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2101      	movs	r1, #1
 8000eac:	487a      	ldr	r0, [pc, #488]	@ (8001098 <display7SEG_1+0x38c>)
 8000eae:	f001 faae 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	4878      	ldr	r0, [pc, #480]	@ (8001098 <display7SEG_1+0x38c>)
 8000eb8:	f001 faa9 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	4875      	ldr	r0, [pc, #468]	@ (8001098 <display7SEG_1+0x38c>)
 8000ec2:	f001 faa4 	bl	800240e <HAL_GPIO_WritePin>

		break;
 8000ec6:	e0e3      	b.n	8001090 <display7SEG_1+0x384>

	case 5:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2101      	movs	r1, #1
 8000ecc:	4872      	ldr	r0, [pc, #456]	@ (8001098 <display7SEG_1+0x38c>)
 8000ece:	f001 fa9e 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	4870      	ldr	r0, [pc, #448]	@ (8001098 <display7SEG_1+0x38c>)
 8000ed8:	f001 fa99 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ee2:	486d      	ldr	r0, [pc, #436]	@ (8001098 <display7SEG_1+0x38c>)
 8000ee4:	f001 fa93 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eee:	486a      	ldr	r0, [pc, #424]	@ (8001098 <display7SEG_1+0x38c>)
 8000ef0:	f001 fa8d 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	4867      	ldr	r0, [pc, #412]	@ (8001098 <display7SEG_1+0x38c>)
 8000efa:	f001 fa88 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2102      	movs	r1, #2
 8000f02:	4865      	ldr	r0, [pc, #404]	@ (8001098 <display7SEG_1+0x38c>)
 8000f04:	f001 fa83 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	4862      	ldr	r0, [pc, #392]	@ (8001098 <display7SEG_1+0x38c>)
 8000f0e:	f001 fa7e 	bl	800240e <HAL_GPIO_WritePin>

		break;
 8000f12:	e0bd      	b.n	8001090 <display7SEG_1+0x384>

	case 6:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2110      	movs	r1, #16
 8000f18:	485f      	ldr	r0, [pc, #380]	@ (8001098 <display7SEG_1+0x38c>)
 8000f1a:	f001 fa78 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2101      	movs	r1, #1
 8000f22:	485d      	ldr	r0, [pc, #372]	@ (8001098 <display7SEG_1+0x38c>)
 8000f24:	f001 fa73 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2108      	movs	r1, #8
 8000f2c:	485a      	ldr	r0, [pc, #360]	@ (8001098 <display7SEG_1+0x38c>)
 8000f2e:	f001 fa6e 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f38:	4857      	ldr	r0, [pc, #348]	@ (8001098 <display7SEG_1+0x38c>)
 8000f3a:	f001 fa68 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f44:	4854      	ldr	r0, [pc, #336]	@ (8001098 <display7SEG_1+0x38c>)
 8000f46:	f001 fa62 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	4852      	ldr	r0, [pc, #328]	@ (8001098 <display7SEG_1+0x38c>)
 8000f50:	f001 fa5d 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2102      	movs	r1, #2
 8000f58:	484f      	ldr	r0, [pc, #316]	@ (8001098 <display7SEG_1+0x38c>)
 8000f5a:	f001 fa58 	bl	800240e <HAL_GPIO_WritePin>

		break;
 8000f5e:	e097      	b.n	8001090 <display7SEG_1+0x384>

	case 7:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2110      	movs	r1, #16
 8000f64:	484c      	ldr	r0, [pc, #304]	@ (8001098 <display7SEG_1+0x38c>)
 8000f66:	f001 fa52 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f70:	4849      	ldr	r0, [pc, #292]	@ (8001098 <display7SEG_1+0x38c>)
 8000f72:	f001 fa4c 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2108      	movs	r1, #8
 8000f7a:	4847      	ldr	r0, [pc, #284]	@ (8001098 <display7SEG_1+0x38c>)
 8000f7c:	f001 fa47 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f86:	4844      	ldr	r0, [pc, #272]	@ (8001098 <display7SEG_1+0x38c>)
 8000f88:	f001 fa41 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2102      	movs	r1, #2
 8000f90:	4841      	ldr	r0, [pc, #260]	@ (8001098 <display7SEG_1+0x38c>)
 8000f92:	f001 fa3c 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2101      	movs	r1, #1
 8000f9a:	483f      	ldr	r0, [pc, #252]	@ (8001098 <display7SEG_1+0x38c>)
 8000f9c:	f001 fa37 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	483c      	ldr	r0, [pc, #240]	@ (8001098 <display7SEG_1+0x38c>)
 8000fa6:	f001 fa32 	bl	800240e <HAL_GPIO_WritePin>

		break;
 8000faa:	e071      	b.n	8001090 <display7SEG_1+0x384>

	case 8:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2110      	movs	r1, #16
 8000fb0:	4839      	ldr	r0, [pc, #228]	@ (8001098 <display7SEG_1+0x38c>)
 8000fb2:	f001 fa2c 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fbc:	4836      	ldr	r0, [pc, #216]	@ (8001098 <display7SEG_1+0x38c>)
 8000fbe:	f001 fa26 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	4834      	ldr	r0, [pc, #208]	@ (8001098 <display7SEG_1+0x38c>)
 8000fc8:	f001 fa21 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fd2:	4831      	ldr	r0, [pc, #196]	@ (8001098 <display7SEG_1+0x38c>)
 8000fd4:	f001 fa1b 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2101      	movs	r1, #1
 8000fdc:	482e      	ldr	r0, [pc, #184]	@ (8001098 <display7SEG_1+0x38c>)
 8000fde:	f001 fa16 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	482c      	ldr	r0, [pc, #176]	@ (8001098 <display7SEG_1+0x38c>)
 8000fe8:	f001 fa11 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2104      	movs	r1, #4
 8000ff0:	4829      	ldr	r0, [pc, #164]	@ (8001098 <display7SEG_1+0x38c>)
 8000ff2:	f001 fa0c 	bl	800240e <HAL_GPIO_WritePin>

		break;
 8000ff6:	e04b      	b.n	8001090 <display7SEG_1+0x384>

	case 9:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	4826      	ldr	r0, [pc, #152]	@ (8001098 <display7SEG_1+0x38c>)
 8000ffe:	f001 fa06 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2101      	movs	r1, #1
 8001006:	4824      	ldr	r0, [pc, #144]	@ (8001098 <display7SEG_1+0x38c>)
 8001008:	f001 fa01 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2102      	movs	r1, #2
 8001010:	4821      	ldr	r0, [pc, #132]	@ (8001098 <display7SEG_1+0x38c>)
 8001012:	f001 f9fc 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2104      	movs	r1, #4
 800101a:	481f      	ldr	r0, [pc, #124]	@ (8001098 <display7SEG_1+0x38c>)
 800101c:	f001 f9f7 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2108      	movs	r1, #8
 8001024:	481c      	ldr	r0, [pc, #112]	@ (8001098 <display7SEG_1+0x38c>)
 8001026:	f001 f9f2 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001030:	4819      	ldr	r0, [pc, #100]	@ (8001098 <display7SEG_1+0x38c>)
 8001032:	f001 f9ec 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800103c:	4816      	ldr	r0, [pc, #88]	@ (8001098 <display7SEG_1+0x38c>)
 800103e:	f001 f9e6 	bl	800240e <HAL_GPIO_WritePin>

		break;
 8001042:	e025      	b.n	8001090 <display7SEG_1+0x384>

	default:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2101      	movs	r1, #1
 8001048:	4813      	ldr	r0, [pc, #76]	@ (8001098 <display7SEG_1+0x38c>)
 800104a:	f001 f9e0 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2102      	movs	r1, #2
 8001052:	4811      	ldr	r0, [pc, #68]	@ (8001098 <display7SEG_1+0x38c>)
 8001054:	f001 f9db 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, SET);
 8001058:	2201      	movs	r2, #1
 800105a:	2104      	movs	r1, #4
 800105c:	480e      	ldr	r0, [pc, #56]	@ (8001098 <display7SEG_1+0x38c>)
 800105e:	f001 f9d6 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2108      	movs	r1, #8
 8001066:	480c      	ldr	r0, [pc, #48]	@ (8001098 <display7SEG_1+0x38c>)
 8001068:	f001 f9d1 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2110      	movs	r1, #16
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <display7SEG_1+0x38c>)
 8001072:	f001 f9cc 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800107c:	4806      	ldr	r0, [pc, #24]	@ (8001098 <display7SEG_1+0x38c>)
 800107e:	f001 f9c6 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001088:	4803      	ldr	r0, [pc, #12]	@ (8001098 <display7SEG_1+0x38c>)
 800108a:	f001 f9c0 	bl	800240e <HAL_GPIO_WritePin>

		break;
 800108e:	bf00      	nop
	}

}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40010c00 	.word	0x40010c00

0800109c <display7SEG_2>:
void display7SEG_2(int num) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	switch (num) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b09      	cmp	r3, #9
 80010a8:	f200 81be 	bhi.w	8001428 <display7SEG_2+0x38c>
 80010ac:	a201      	add	r2, pc, #4	@ (adr r2, 80010b4 <display7SEG_2+0x18>)
 80010ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b2:	bf00      	nop
 80010b4:	080010dd 	.word	0x080010dd
 80010b8:	08001131 	.word	0x08001131
 80010bc:	08001185 	.word	0x08001185
 80010c0:	080011d9 	.word	0x080011d9
 80010c4:	0800122d 	.word	0x0800122d
 80010c8:	08001281 	.word	0x08001281
 80010cc:	080012d5 	.word	0x080012d5
 80010d0:	08001329 	.word	0x08001329
 80010d4:	0800137d 	.word	0x0800137d
 80010d8:	080013d1 	.word	0x080013d1

	case 0:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2120      	movs	r1, #32
 80010e0:	48d0      	ldr	r0, [pc, #832]	@ (8001424 <display7SEG_2+0x388>)
 80010e2:	f001 f994 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ec:	48cd      	ldr	r0, [pc, #820]	@ (8001424 <display7SEG_2+0x388>)
 80010ee:	f001 f98e 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010f8:	48ca      	ldr	r0, [pc, #808]	@ (8001424 <display7SEG_2+0x388>)
 80010fa:	f001 f988 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001104:	48c7      	ldr	r0, [pc, #796]	@ (8001424 <display7SEG_2+0x388>)
 8001106:	f001 f982 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001110:	48c4      	ldr	r0, [pc, #784]	@ (8001424 <display7SEG_2+0x388>)
 8001112:	f001 f97c 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800111c:	48c1      	ldr	r0, [pc, #772]	@ (8001424 <display7SEG_2+0x388>)
 800111e:	f001 f976 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001128:	48be      	ldr	r0, [pc, #760]	@ (8001424 <display7SEG_2+0x388>)
 800112a:	f001 f970 	bl	800240e <HAL_GPIO_WritePin>

		break;
 800112e:	e1a5      	b.n	800147c <display7SEG_2+0x3e0>

	case 1:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2120      	movs	r1, #32
 8001134:	48bb      	ldr	r0, [pc, #748]	@ (8001424 <display7SEG_2+0x388>)
 8001136:	f001 f96a 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001140:	48b8      	ldr	r0, [pc, #736]	@ (8001424 <display7SEG_2+0x388>)
 8001142:	f001 f964 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8001146:	2201      	movs	r2, #1
 8001148:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800114c:	48b5      	ldr	r0, [pc, #724]	@ (8001424 <display7SEG_2+0x388>)
 800114e:	f001 f95e 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001158:	48b2      	ldr	r0, [pc, #712]	@ (8001424 <display7SEG_2+0x388>)
 800115a:	f001 f958 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001164:	48af      	ldr	r0, [pc, #700]	@ (8001424 <display7SEG_2+0x388>)
 8001166:	f001 f952 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001170:	48ac      	ldr	r0, [pc, #688]	@ (8001424 <display7SEG_2+0x388>)
 8001172:	f001 f94c 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800117c:	48a9      	ldr	r0, [pc, #676]	@ (8001424 <display7SEG_2+0x388>)
 800117e:	f001 f946 	bl	800240e <HAL_GPIO_WritePin>

		break;
 8001182:	e17b      	b.n	800147c <display7SEG_2+0x3e0>

	case 2:

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, SET);
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800118a:	48a6      	ldr	r0, [pc, #664]	@ (8001424 <display7SEG_2+0x388>)
 800118c:	f001 f93f 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001196:	48a3      	ldr	r0, [pc, #652]	@ (8001424 <display7SEG_2+0x388>)
 8001198:	f001 f939 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2120      	movs	r1, #32
 80011a0:	48a0      	ldr	r0, [pc, #640]	@ (8001424 <display7SEG_2+0x388>)
 80011a2:	f001 f934 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011ac:	489d      	ldr	r0, [pc, #628]	@ (8001424 <display7SEG_2+0x388>)
 80011ae:	f001 f92e 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011b8:	489a      	ldr	r0, [pc, #616]	@ (8001424 <display7SEG_2+0x388>)
 80011ba:	f001 f928 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011c4:	4897      	ldr	r0, [pc, #604]	@ (8001424 <display7SEG_2+0x388>)
 80011c6:	f001 f922 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011d0:	4894      	ldr	r0, [pc, #592]	@ (8001424 <display7SEG_2+0x388>)
 80011d2:	f001 f91c 	bl	800240e <HAL_GPIO_WritePin>

		break;
 80011d6:	e151      	b.n	800147c <display7SEG_2+0x3e0>

	case 3:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011de:	4891      	ldr	r0, [pc, #580]	@ (8001424 <display7SEG_2+0x388>)
 80011e0:	f001 f915 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ea:	488e      	ldr	r0, [pc, #568]	@ (8001424 <display7SEG_2+0x388>)
 80011ec:	f001 f90f 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f6:	488b      	ldr	r0, [pc, #556]	@ (8001424 <display7SEG_2+0x388>)
 80011f8:	f001 f909 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2120      	movs	r1, #32
 8001200:	4888      	ldr	r0, [pc, #544]	@ (8001424 <display7SEG_2+0x388>)
 8001202:	f001 f904 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800120c:	4885      	ldr	r0, [pc, #532]	@ (8001424 <display7SEG_2+0x388>)
 800120e:	f001 f8fe 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001218:	4882      	ldr	r0, [pc, #520]	@ (8001424 <display7SEG_2+0x388>)
 800121a:	f001 f8f8 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001224:	487f      	ldr	r0, [pc, #508]	@ (8001424 <display7SEG_2+0x388>)
 8001226:	f001 f8f2 	bl	800240e <HAL_GPIO_WritePin>

		break;
 800122a:	e127      	b.n	800147c <display7SEG_2+0x3e0>

	case 4:

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001232:	487c      	ldr	r0, [pc, #496]	@ (8001424 <display7SEG_2+0x388>)
 8001234:	f001 f8eb 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800123e:	4879      	ldr	r0, [pc, #484]	@ (8001424 <display7SEG_2+0x388>)
 8001240:	f001 f8e5 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800124a:	4876      	ldr	r0, [pc, #472]	@ (8001424 <display7SEG_2+0x388>)
 800124c:	f001 f8df 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001256:	4873      	ldr	r0, [pc, #460]	@ (8001424 <display7SEG_2+0x388>)
 8001258:	f001 f8d9 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2120      	movs	r1, #32
 8001260:	4870      	ldr	r0, [pc, #448]	@ (8001424 <display7SEG_2+0x388>)
 8001262:	f001 f8d4 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800126c:	486d      	ldr	r0, [pc, #436]	@ (8001424 <display7SEG_2+0x388>)
 800126e:	f001 f8ce 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001278:	486a      	ldr	r0, [pc, #424]	@ (8001424 <display7SEG_2+0x388>)
 800127a:	f001 f8c8 	bl	800240e <HAL_GPIO_WritePin>

		break;
 800127e:	e0fd      	b.n	800147c <display7SEG_2+0x3e0>

	case 5:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2120      	movs	r1, #32
 8001284:	4867      	ldr	r0, [pc, #412]	@ (8001424 <display7SEG_2+0x388>)
 8001286:	f001 f8c2 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001290:	4864      	ldr	r0, [pc, #400]	@ (8001424 <display7SEG_2+0x388>)
 8001292:	f001 f8bc 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800129c:	4861      	ldr	r0, [pc, #388]	@ (8001424 <display7SEG_2+0x388>)
 800129e:	f001 f8b6 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012a8:	485e      	ldr	r0, [pc, #376]	@ (8001424 <display7SEG_2+0x388>)
 80012aa:	f001 f8b0 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012b4:	485b      	ldr	r0, [pc, #364]	@ (8001424 <display7SEG_2+0x388>)
 80012b6:	f001 f8aa 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012c0:	4858      	ldr	r0, [pc, #352]	@ (8001424 <display7SEG_2+0x388>)
 80012c2:	f001 f8a4 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012cc:	4855      	ldr	r0, [pc, #340]	@ (8001424 <display7SEG_2+0x388>)
 80012ce:	f001 f89e 	bl	800240e <HAL_GPIO_WritePin>

		break;
 80012d2:	e0d3      	b.n	800147c <display7SEG_2+0x3e0>

	case 6:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012da:	4852      	ldr	r0, [pc, #328]	@ (8001424 <display7SEG_2+0x388>)
 80012dc:	f001 f897 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2120      	movs	r1, #32
 80012e4:	484f      	ldr	r0, [pc, #316]	@ (8001424 <display7SEG_2+0x388>)
 80012e6:	f001 f892 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012f0:	484c      	ldr	r0, [pc, #304]	@ (8001424 <display7SEG_2+0x388>)
 80012f2:	f001 f88c 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012fc:	4849      	ldr	r0, [pc, #292]	@ (8001424 <display7SEG_2+0x388>)
 80012fe:	f001 f886 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001308:	4846      	ldr	r0, [pc, #280]	@ (8001424 <display7SEG_2+0x388>)
 800130a:	f001 f880 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001314:	4843      	ldr	r0, [pc, #268]	@ (8001424 <display7SEG_2+0x388>)
 8001316:	f001 f87a 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001320:	4840      	ldr	r0, [pc, #256]	@ (8001424 <display7SEG_2+0x388>)
 8001322:	f001 f874 	bl	800240e <HAL_GPIO_WritePin>

		break;
 8001326:	e0a9      	b.n	800147c <display7SEG_2+0x3e0>

	case 7:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8001328:	2201      	movs	r2, #1
 800132a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800132e:	483d      	ldr	r0, [pc, #244]	@ (8001424 <display7SEG_2+0x388>)
 8001330:	f001 f86d 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800133a:	483a      	ldr	r0, [pc, #232]	@ (8001424 <display7SEG_2+0x388>)
 800133c:	f001 f867 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001346:	4837      	ldr	r0, [pc, #220]	@ (8001424 <display7SEG_2+0x388>)
 8001348:	f001 f861 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001352:	4834      	ldr	r0, [pc, #208]	@ (8001424 <display7SEG_2+0x388>)
 8001354:	f001 f85b 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800135e:	4831      	ldr	r0, [pc, #196]	@ (8001424 <display7SEG_2+0x388>)
 8001360:	f001 f855 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2120      	movs	r1, #32
 8001368:	482e      	ldr	r0, [pc, #184]	@ (8001424 <display7SEG_2+0x388>)
 800136a:	f001 f850 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001374:	482b      	ldr	r0, [pc, #172]	@ (8001424 <display7SEG_2+0x388>)
 8001376:	f001 f84a 	bl	800240e <HAL_GPIO_WritePin>

		break;
 800137a:	e07f      	b.n	800147c <display7SEG_2+0x3e0>

	case 8:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001382:	4828      	ldr	r0, [pc, #160]	@ (8001424 <display7SEG_2+0x388>)
 8001384:	f001 f843 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800138e:	4825      	ldr	r0, [pc, #148]	@ (8001424 <display7SEG_2+0x388>)
 8001390:	f001 f83d 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800139a:	4822      	ldr	r0, [pc, #136]	@ (8001424 <display7SEG_2+0x388>)
 800139c:	f001 f837 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a6:	481f      	ldr	r0, [pc, #124]	@ (8001424 <display7SEG_2+0x388>)
 80013a8:	f001 f831 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2120      	movs	r1, #32
 80013b0:	481c      	ldr	r0, [pc, #112]	@ (8001424 <display7SEG_2+0x388>)
 80013b2:	f001 f82c 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013bc:	4819      	ldr	r0, [pc, #100]	@ (8001424 <display7SEG_2+0x388>)
 80013be:	f001 f826 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c8:	4816      	ldr	r0, [pc, #88]	@ (8001424 <display7SEG_2+0x388>)
 80013ca:	f001 f820 	bl	800240e <HAL_GPIO_WritePin>

		break;
 80013ce:	e055      	b.n	800147c <display7SEG_2+0x3e0>

	case 9:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013d6:	4813      	ldr	r0, [pc, #76]	@ (8001424 <display7SEG_2+0x388>)
 80013d8:	f001 f819 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2120      	movs	r1, #32
 80013e0:	4810      	ldr	r0, [pc, #64]	@ (8001424 <display7SEG_2+0x388>)
 80013e2:	f001 f814 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013ec:	480d      	ldr	r0, [pc, #52]	@ (8001424 <display7SEG_2+0x388>)
 80013ee:	f001 f80e 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013f8:	480a      	ldr	r0, [pc, #40]	@ (8001424 <display7SEG_2+0x388>)
 80013fa:	f001 f808 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001404:	4807      	ldr	r0, [pc, #28]	@ (8001424 <display7SEG_2+0x388>)
 8001406:	f001 f802 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <display7SEG_2+0x388>)
 8001412:	f000 fffc 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800141c:	4801      	ldr	r0, [pc, #4]	@ (8001424 <display7SEG_2+0x388>)
 800141e:	f000 fff6 	bl	800240e <HAL_GPIO_WritePin>

		break;
 8001422:	e02b      	b.n	800147c <display7SEG_2+0x3e0>
 8001424:	40010c00 	.word	0x40010c00

	default:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2120      	movs	r1, #32
 800142c:	4815      	ldr	r0, [pc, #84]	@ (8001484 <display7SEG_2+0x3e8>)
 800142e:	f000 ffee 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001438:	4812      	ldr	r0, [pc, #72]	@ (8001484 <display7SEG_2+0x3e8>)
 800143a:	f000 ffe8 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, SET);
 800143e:	2201      	movs	r2, #1
 8001440:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001444:	480f      	ldr	r0, [pc, #60]	@ (8001484 <display7SEG_2+0x3e8>)
 8001446:	f000 ffe2 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <display7SEG_2+0x3e8>)
 8001452:	f000 ffdc 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800145c:	4809      	ldr	r0, [pc, #36]	@ (8001484 <display7SEG_2+0x3e8>)
 800145e:	f000 ffd6 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001468:	4806      	ldr	r0, [pc, #24]	@ (8001484 <display7SEG_2+0x3e8>)
 800146a:	f000 ffd0 	bl	800240e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001474:	4803      	ldr	r0, [pc, #12]	@ (8001484 <display7SEG_2+0x3e8>)
 8001476:	f000 ffca 	bl	800240e <HAL_GPIO_WritePin>

		break;
 800147a:	bf00      	nop
	}

}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40010c00 	.word	0x40010c00

08001488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148c:	f000 fcbc 	bl	8001e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001490:	f000 f82c 	bl	80014ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001494:	f000 f8e0 	bl	8001658 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001498:	f000 f892 	bl	80015c0 <MX_TIM2_Init>
  MX_I2C1_Init();
 800149c:	f000 f862 	bl	8001564 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80014a0:	480d      	ldr	r0, [pc, #52]	@ (80014d8 <main+0x50>)
 80014a2:	f001 fd75 	bl	8002f90 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	SCH_Init();
 80014a6:	f000 f94b 	bl	8001740 <SCH_Init>
	SCH_Add_Task(fsm_automatic_run, 0, 1);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2100      	movs	r1, #0
 80014ae:	480b      	ldr	r0, [pc, #44]	@ (80014dc <main+0x54>)
 80014b0:	f000 f9d0 	bl	8001854 <SCH_Add_Task>
	SCH_Add_Task(fsm_manual_run, 0, 1);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2100      	movs	r1, #0
 80014b8:	4809      	ldr	r0, [pc, #36]	@ (80014e0 <main+0x58>)
 80014ba:	f000 f9cb 	bl	8001854 <SCH_Add_Task>
	SCH_Add_Task(fsm_setting, 0, 1);
 80014be:	2201      	movs	r2, #1
 80014c0:	2100      	movs	r1, #0
 80014c2:	4808      	ldr	r0, [pc, #32]	@ (80014e4 <main+0x5c>)
 80014c4:	f000 f9c6 	bl	8001854 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput, 0, 1);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2100      	movs	r1, #0
 80014cc:	4806      	ldr	r0, [pc, #24]	@ (80014e8 <main+0x60>)
 80014ce:	f000 f9c1 	bl	8001854 <SCH_Add_Task>
	while (1) {
		SCH_Dispatch_Tasks();
 80014d2:	f000 fa11 	bl	80018f8 <SCH_Dispatch_Tasks>
 80014d6:	e7fc      	b.n	80014d2 <main+0x4a>
 80014d8:	20000180 	.word	0x20000180
 80014dc:	08000301 	.word	0x08000301
 80014e0:	08000715 	.word	0x08000715
 80014e4:	08000935 	.word	0x08000935
 80014e8:	080001ad 	.word	0x080001ad

080014ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b090      	sub	sp, #64	@ 0x40
 80014f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f2:	f107 0318 	add.w	r3, r7, #24
 80014f6:	2228      	movs	r2, #40	@ 0x28
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 f8d4 	bl	80036a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001512:	2301      	movs	r3, #1
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001516:	2310      	movs	r3, #16
 8001518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800151a:	2300      	movs	r3, #0
 800151c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	4618      	mov	r0, r3
 8001524:	f001 f8e8 	bl	80026f8 <HAL_RCC_OscConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800152e:	f000 f901 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001532:	230f      	movs	r3, #15
 8001534:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fb56 	bl	8002bfc <HAL_RCC_ClockConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001556:	f000 f8ed 	bl	8001734 <Error_Handler>
  }
}
 800155a:	bf00      	nop
 800155c:	3740      	adds	r7, #64	@ 0x40
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800156a:	4a13      	ldr	r2, [pc, #76]	@ (80015b8 <MX_I2C1_Init+0x54>)
 800156c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800156e:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001570:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <MX_I2C1_Init+0x58>)
 8001572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001574:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001582:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001586:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001588:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001594:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <MX_I2C1_Init+0x50>)
 80015a2:	f000 ff65 	bl	8002470 <HAL_I2C_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015ac:	f000 f8c2 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000012c 	.word	0x2000012c
 80015b8:	40005400 	.word	0x40005400
 80015bc:	000186a0 	.word	0x000186a0

080015c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	463b      	mov	r3, r7
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <MX_TIM2_Init+0x94>)
 80015de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <MX_TIM2_Init+0x94>)
 80015e6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80015ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <MX_TIM2_Init+0x94>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80015f2:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <MX_TIM2_Init+0x94>)
 80015f4:	2209      	movs	r2, #9
 80015f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <MX_TIM2_Init+0x94>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <MX_TIM2_Init+0x94>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001604:	4813      	ldr	r0, [pc, #76]	@ (8001654 <MX_TIM2_Init+0x94>)
 8001606:	f001 fc73 	bl	8002ef0 <HAL_TIM_Base_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001610:	f000 f890 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	4619      	mov	r1, r3
 8001620:	480c      	ldr	r0, [pc, #48]	@ (8001654 <MX_TIM2_Init+0x94>)
 8001622:	f001 fdf1 	bl	8003208 <HAL_TIM_ConfigClockSource>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800162c:	f000 f882 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001638:	463b      	mov	r3, r7
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	@ (8001654 <MX_TIM2_Init+0x94>)
 800163e:	f001 ffc9 	bl	80035d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001648:	f000 f874 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000180 	.word	0x20000180

08001658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166c:	4b28      	ldr	r3, [pc, #160]	@ (8001710 <MX_GPIO_Init+0xb8>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a27      	ldr	r2, [pc, #156]	@ (8001710 <MX_GPIO_Init+0xb8>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b25      	ldr	r3, [pc, #148]	@ (8001710 <MX_GPIO_Init+0xb8>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <MX_GPIO_Init+0xb8>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a21      	ldr	r2, [pc, #132]	@ (8001710 <MX_GPIO_Init+0xb8>)
 800168a:	f043 0308 	orr.w	r3, r3, #8
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <MX_GPIO_Init+0xb8>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_RED_Pin|LED_1_Pin|LED_2_Pin
 800169c:	2200      	movs	r2, #0
 800169e:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 80016a2:	481c      	ldr	r0, [pc, #112]	@ (8001714 <MX_GPIO_Init+0xbc>)
 80016a4:	f000 feb3 	bl	800240e <HAL_GPIO_WritePin>
                          |LED_3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin|SEG0_2_Pin|SEG0_3_Pin|SEG1_4_Pin
 80016a8:	2200      	movs	r2, #0
 80016aa:	f64f 713f 	movw	r1, #65343	@ 0xff3f
 80016ae:	481a      	ldr	r0, [pc, #104]	@ (8001718 <MX_GPIO_Init+0xc0>)
 80016b0:	f000 fead 	bl	800240e <HAL_GPIO_WritePin>
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|SEG0_6_Pin
                          |SEG0_7_Pin|SEG0_4_Pin|SEG0_5_Pin|SEG1_1_Pin
                          |SEG1_2_Pin|SEG1_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 80016b4:	230e      	movs	r3, #14
 80016b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	4619      	mov	r1, r3
 80016c6:	4813      	ldr	r0, [pc, #76]	@ (8001714 <MX_GPIO_Init+0xbc>)
 80016c8:	f000 fd0e 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_1_Pin LED_2_Pin
                           LED_3_Pin LED_4_Pin LED_5_Pin LED_6_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_1_Pin|LED_2_Pin
 80016cc:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80016d0:	60bb      	str	r3, [r7, #8]
                          |LED_3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2302      	movs	r3, #2
 80016dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	4619      	mov	r1, r3
 80016e4:	480b      	ldr	r0, [pc, #44]	@ (8001714 <MX_GPIO_Init+0xbc>)
 80016e6:	f000 fcff 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_1_Pin SEG0_2_Pin SEG0_3_Pin SEG1_4_Pin
                           SEG1_5_Pin SEG1_6_Pin SEG1_7_Pin SEG0_6_Pin
                           SEG0_7_Pin SEG0_4_Pin SEG0_5_Pin SEG1_1_Pin
                           SEG1_2_Pin SEG1_3_Pin */
  GPIO_InitStruct.Pin = SEG0_1_Pin|SEG0_2_Pin|SEG0_3_Pin|SEG1_4_Pin
 80016ea:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80016ee:	60bb      	str	r3, [r7, #8]
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|SEG0_6_Pin
                          |SEG0_7_Pin|SEG0_4_Pin|SEG0_5_Pin|SEG1_1_Pin
                          |SEG1_2_Pin|SEG1_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2302      	movs	r3, #2
 80016fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4619      	mov	r1, r3
 8001702:	4805      	ldr	r0, [pc, #20]	@ (8001718 <MX_GPIO_Init+0xc0>)
 8001704:	f000 fcf0 	bl	80020e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000
 8001714:	40010800 	.word	0x40010800
 8001718:	40010c00 	.word	0x40010c00

0800171c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	//getKeyInput();
	SCH_Update();
 8001724:	f000 f826 	bl	8001774 <SCH_Update>
	timerRun();
 8001728:	f000 fa66 	bl	8001bf8 <timerRun>
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <Error_Handler+0x8>

08001740 <SCH_Init>:
#include"scheduler.h"
#include"global.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
	status = INIT;
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <SCH_Init+0x30>)
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]
	uint32_t i;
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	e005      	b.n	800175e <SCH_Init+0x1e>
		SCH_Delete_Task(i);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f91a 	bl	800198c <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3301      	adds	r3, #1
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b27      	cmp	r3, #39	@ 0x27
 8001762:	d9f6      	bls.n	8001752 <SCH_Init+0x12>
	}
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200000fc 	.word	0x200000fc

08001774 <SCH_Update>:

void SCH_Update(void) {
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
	uint32_t index;
	for (index = 0; index < SCH_MAX_TASKS; index++) {
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	e05d      	b.n	800183c <SCH_Update+0xc8>
		if (SCH_tasks_G[index].pTask) {
 8001780:	4933      	ldr	r1, [pc, #204]	@ (8001850 <SCH_Update+0xdc>)
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d050      	beq.n	8001836 <SCH_Update+0xc2>
			if (SCH_tasks_G[index].Delay > 0) {
 8001794:	492e      	ldr	r1, [pc, #184]	@ (8001850 <SCH_Update+0xdc>)
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	3304      	adds	r3, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d013      	beq.n	80017d2 <SCH_Update+0x5e>
				SCH_tasks_G[index].Delay--;
 80017aa:	4929      	ldr	r1, [pc, #164]	@ (8001850 <SCH_Update+0xdc>)
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	3304      	adds	r3, #4
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	1e59      	subs	r1, r3, #1
 80017be:	4824      	ldr	r0, [pc, #144]	@ (8001850 <SCH_Update+0xdc>)
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4403      	add	r3, r0
 80017cc:	3304      	adds	r3, #4
 80017ce:	6019      	str	r1, [r3, #0]
 80017d0:	e031      	b.n	8001836 <SCH_Update+0xc2>
			} else {
				SCH_tasks_G[index].RunMe++;
 80017d2:	491f      	ldr	r1, [pc, #124]	@ (8001850 <SCH_Update+0xdc>)
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	330c      	adds	r3, #12
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2d8      	uxtb	r0, r3
 80017e8:	4919      	ldr	r1, [pc, #100]	@ (8001850 <SCH_Update+0xdc>)
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	330c      	adds	r3, #12
 80017f8:	4602      	mov	r2, r0
 80017fa:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[index].Period) {
 80017fc:	4914      	ldr	r1, [pc, #80]	@ (8001850 <SCH_Update+0xdc>)
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	3308      	adds	r3, #8
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d011      	beq.n	8001836 <SCH_Update+0xc2>

					SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period;
 8001812:	490f      	ldr	r1, [pc, #60]	@ (8001850 <SCH_Update+0xdc>)
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	3308      	adds	r3, #8
 8001822:	6819      	ldr	r1, [r3, #0]
 8001824:	480a      	ldr	r0, [pc, #40]	@ (8001850 <SCH_Update+0xdc>)
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4403      	add	r3, r0
 8001832:	3304      	adds	r3, #4
 8001834:	6019      	str	r1, [r3, #0]
	for (index = 0; index < SCH_MAX_TASKS; index++) {
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3301      	adds	r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b27      	cmp	r3, #39	@ 0x27
 8001840:	d99e      	bls.n	8001780 <SCH_Update+0xc>
				}
			}

		}
	}
}
 8001842:	bf00      	nop
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200001c8 	.word	0x200001c8

08001854 <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
	uint32_t index = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
	while ((SCH_tasks_G[index].pTask != 0) && (index < SCH_MAX_TASKS)) {
 8001864:	e002      	b.n	800186c <SCH_Add_Task+0x18>
		index++;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
	while ((SCH_tasks_G[index].pTask != 0) && (index < SCH_MAX_TASKS)) {
 800186c:	4921      	ldr	r1, [pc, #132]	@ (80018f4 <SCH_Add_Task+0xa0>)
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <SCH_Add_Task+0x32>
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	2b27      	cmp	r3, #39	@ 0x27
 8001884:	d9ef      	bls.n	8001866 <SCH_Add_Task+0x12>
	}
	SCH_tasks_G[index].pTask = pFunction;
 8001886:	491b      	ldr	r1, [pc, #108]	@ (80018f4 <SCH_Add_Task+0xa0>)
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Delay = DELAY;
 8001898:	4916      	ldr	r1, [pc, #88]	@ (80018f4 <SCH_Add_Task+0xa0>)
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	3304      	adds	r3, #4
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Period = PERIOD;
 80018ac:	4911      	ldr	r1, [pc, #68]	@ (80018f4 <SCH_Add_Task+0xa0>)
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	3308      	adds	r3, #8
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].RunMe = 0;
 80018c0:	490c      	ldr	r1, [pc, #48]	@ (80018f4 <SCH_Add_Task+0xa0>)
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	330c      	adds	r3, #12
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[index].TaskID = index;
 80018d4:	4907      	ldr	r1, [pc, #28]	@ (80018f4 <SCH_Add_Task+0xa0>)
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	3310      	adds	r3, #16
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	601a      	str	r2, [r3, #0]

}
 80018e8:	bf00      	nop
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200001c8 	.word	0x200001c8

080018f8 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
	uint32_t i;
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	e039      	b.n	8001978 <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[i].RunMe > 0) {
 8001904:	4920      	ldr	r1, [pc, #128]	@ (8001988 <SCH_Dispatch_Tasks+0x90>)
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	330c      	adds	r3, #12
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d02b      	beq.n	8001972 <SCH_Dispatch_Tasks+0x7a>
			(*SCH_tasks_G[i].pTask)();
 800191a:	491b      	ldr	r1, [pc, #108]	@ (8001988 <SCH_Dispatch_Tasks+0x90>)
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4798      	blx	r3
			SCH_tasks_G[i].RunMe--;
 800192c:	4916      	ldr	r1, [pc, #88]	@ (8001988 <SCH_Dispatch_Tasks+0x90>)
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	330c      	adds	r3, #12
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	3b01      	subs	r3, #1
 8001940:	b2d8      	uxtb	r0, r3
 8001942:	4911      	ldr	r1, [pc, #68]	@ (8001988 <SCH_Dispatch_Tasks+0x90>)
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	330c      	adds	r3, #12
 8001952:	4602      	mov	r2, r0
 8001954:	701a      	strb	r2, [r3, #0]


			//one shot task
			if (SCH_tasks_G[i].Period == 0) {
 8001956:	490c      	ldr	r1, [pc, #48]	@ (8001988 <SCH_Dispatch_Tasks+0x90>)
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	3308      	adds	r3, #8
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(i);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f80d 	bl	800198c <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3301      	adds	r3, #1
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b27      	cmp	r3, #39	@ 0x27
 800197c:	d9c2      	bls.n	8001904 <SCH_Dispatch_Tasks+0xc>

			}

		}
	}
}
 800197e:	bf00      	nop
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200001c8 	.word	0x200001c8

0800198c <SCH_Delete_Task>:
void SCH_Delete_Task(uint32_t taskID) {
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	SCH_tasks_G[taskID].pTask = 0;
 8001994:	4915      	ldr	r1, [pc, #84]	@ (80019ec <SCH_Delete_Task+0x60>)
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[taskID].Delay = 0;
 80019a6:	4911      	ldr	r1, [pc, #68]	@ (80019ec <SCH_Delete_Task+0x60>)
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	3304      	adds	r3, #4
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[taskID].Period = 0;
 80019ba:	490c      	ldr	r1, [pc, #48]	@ (80019ec <SCH_Delete_Task+0x60>)
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	3308      	adds	r3, #8
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[taskID].RunMe = 0;
 80019ce:	4907      	ldr	r1, [pc, #28]	@ (80019ec <SCH_Delete_Task+0x60>)
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	330c      	adds	r3, #12
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	200001c8 	.word	0x200001c8

080019f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019f6:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <HAL_MspInit+0x5c>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	4a14      	ldr	r2, [pc, #80]	@ (8001a4c <HAL_MspInit+0x5c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6193      	str	r3, [r2, #24]
 8001a02:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <HAL_MspInit+0x5c>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <HAL_MspInit+0x5c>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a0e      	ldr	r2, [pc, #56]	@ (8001a4c <HAL_MspInit+0x5c>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <HAL_MspInit+0x5c>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_MspInit+0x60>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <HAL_MspInit+0x60>)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010000 	.word	0x40010000

08001a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a16      	ldr	r2, [pc, #88]	@ (8001ac8 <HAL_I2C_MspInit+0x74>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d125      	bne.n	8001ac0 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a74:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_I2C_MspInit+0x78>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <HAL_I2C_MspInit+0x78>)
 8001a7a:	f043 0308 	orr.w	r3, r3, #8
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_I2C_MspInit+0x78>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a8c:	23c0      	movs	r3, #192	@ 0xc0
 8001a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a90:	2312      	movs	r3, #18
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480b      	ldr	r0, [pc, #44]	@ (8001ad0 <HAL_I2C_MspInit+0x7c>)
 8001aa4:	f000 fb20 	bl	80020e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <HAL_I2C_MspInit+0x78>)
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	4a07      	ldr	r2, [pc, #28]	@ (8001acc <HAL_I2C_MspInit+0x78>)
 8001aae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ab2:	61d3      	str	r3, [r2, #28]
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_I2C_MspInit+0x78>)
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ac0:	bf00      	nop
 8001ac2:	3720      	adds	r7, #32
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010c00 	.word	0x40010c00

08001ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ae4:	d113      	bne.n	8001b0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <HAL_TIM_Base_MspInit+0x44>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	4a0b      	ldr	r2, [pc, #44]	@ (8001b18 <HAL_TIM_Base_MspInit+0x44>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	61d3      	str	r3, [r2, #28]
 8001af2:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <HAL_TIM_Base_MspInit+0x44>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	201c      	movs	r0, #28
 8001b04:	f000 fab9 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b08:	201c      	movs	r0, #28
 8001b0a:	f000 fad2 	bl	80020b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <NMI_Handler+0x4>

08001b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <MemManage_Handler+0x4>

08001b34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <BusFault_Handler+0x4>

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <UsageFault_Handler+0x4>

08001b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f000 f992 	bl	8001e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b78:	4802      	ldr	r0, [pc, #8]	@ (8001b84 <TIM2_IRQHandler+0x10>)
 8001b7a:	f001 fa55 	bl	8003028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000180 	.word	0x20000180

08001b88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <setTimer>:

#define MAX_COUNTER 10
int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value) {
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value;
 8001b9e:	4907      	ldr	r1, [pc, #28]	@ (8001bbc <setTimer+0x28>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001ba8:	4a05      	ldr	r2, [pc, #20]	@ (8001bc0 <setTimer+0x2c>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2100      	movs	r1, #0
 8001bae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	200004e8 	.word	0x200004e8
 8001bc0:	20000510 	.word	0x20000510

08001bc4 <isTimerExpired>:
int isTimerExpired(int index) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 8001bcc:	4a09      	ldr	r2, [pc, #36]	@ (8001bf4 <isTimerExpired+0x30>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d106      	bne.n	8001be6 <isTimerExpired+0x22>
		timer_flag[index] = 0;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	@ (8001bf4 <isTimerExpired+0x30>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2100      	movs	r1, #0
 8001bde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <isTimerExpired+0x24>
	}
	return 0;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000510 	.word	0x20000510

08001bf8 <timerRun>:
void timerRun() {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++) {
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	e01c      	b.n	8001c3e <timerRun+0x46>
		if (timer_counter[i] > 0) {
 8001c04:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <timerRun+0x58>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	dd13      	ble.n	8001c38 <timerRun+0x40>
			timer_counter[i]--;
 8001c10:	4a0f      	ldr	r2, [pc, #60]	@ (8001c50 <timerRun+0x58>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c18:	1e5a      	subs	r2, r3, #1
 8001c1a:	490d      	ldr	r1, [pc, #52]	@ (8001c50 <timerRun+0x58>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 8001c22:	4a0b      	ldr	r2, [pc, #44]	@ (8001c50 <timerRun+0x58>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	dc04      	bgt.n	8001c38 <timerRun+0x40>
				timer_flag[i] = 1;
 8001c2e:	4a09      	ldr	r2, [pc, #36]	@ (8001c54 <timerRun+0x5c>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2101      	movs	r1, #1
 8001c34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b09      	cmp	r3, #9
 8001c42:	dddf      	ble.n	8001c04 <timerRun+0xc>
			}
		}
	}

}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	200004e8 	.word	0x200004e8
 8001c54:	20000510 	.word	0x20000510

08001c58 <turnOn_RED1>:
 *  Created on: Oct 27, 2024
 *      Author: admin
 */

#include"traffic_light.h"
void turnOn_RED1() {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2140      	movs	r1, #64	@ 0x40
 8001c60:	4807      	ldr	r0, [pc, #28]	@ (8001c80 <turnOn_RED1+0x28>)
 8001c62:	f000 fbd4 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c6c:	4804      	ldr	r0, [pc, #16]	@ (8001c80 <turnOn_RED1+0x28>)
 8001c6e:	f000 fbce 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2180      	movs	r1, #128	@ 0x80
 8001c76:	4802      	ldr	r0, [pc, #8]	@ (8001c80 <turnOn_RED1+0x28>)
 8001c78:	f000 fbc9 	bl	800240e <HAL_GPIO_WritePin>
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40010800 	.word	0x40010800

08001c84 <turnOn_GREEN1>:
void turnOn_GREEN1() {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2140      	movs	r1, #64	@ 0x40
 8001c8c:	4807      	ldr	r0, [pc, #28]	@ (8001cac <turnOn_GREEN1+0x28>)
 8001c8e:	f000 fbbe 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c98:	4804      	ldr	r0, [pc, #16]	@ (8001cac <turnOn_GREEN1+0x28>)
 8001c9a:	f000 fbb8 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2180      	movs	r1, #128	@ 0x80
 8001ca2:	4802      	ldr	r0, [pc, #8]	@ (8001cac <turnOn_GREEN1+0x28>)
 8001ca4:	f000 fbb3 	bl	800240e <HAL_GPIO_WritePin>
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40010800 	.word	0x40010800

08001cb0 <turnOn_YELLOW1>:
void turnOn_YELLOW1() {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2140      	movs	r1, #64	@ 0x40
 8001cb8:	4807      	ldr	r0, [pc, #28]	@ (8001cd8 <turnOn_YELLOW1+0x28>)
 8001cba:	f000 fba8 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cc4:	4804      	ldr	r0, [pc, #16]	@ (8001cd8 <turnOn_YELLOW1+0x28>)
 8001cc6:	f000 fba2 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2180      	movs	r1, #128	@ 0x80
 8001cce:	4802      	ldr	r0, [pc, #8]	@ (8001cd8 <turnOn_YELLOW1+0x28>)
 8001cd0:	f000 fb9d 	bl	800240e <HAL_GPIO_WritePin>
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40010800 	.word	0x40010800

08001cdc <turnOn_RED2>:
void turnOn_RED2() {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ce6:	4808      	ldr	r0, [pc, #32]	@ (8001d08 <turnOn_RED2+0x2c>)
 8001ce8:	f000 fb91 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cf2:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <turnOn_RED2+0x2c>)
 8001cf4:	f000 fb8b 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cfe:	4802      	ldr	r0, [pc, #8]	@ (8001d08 <turnOn_RED2+0x2c>)
 8001d00:	f000 fb85 	bl	800240e <HAL_GPIO_WritePin>
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40010800 	.word	0x40010800

08001d0c <turnOn_GREEN2>:
void turnOn_GREEN2() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001d10:	2200      	movs	r2, #0
 8001d12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d16:	4808      	ldr	r0, [pc, #32]	@ (8001d38 <turnOn_GREEN2+0x2c>)
 8001d18:	f000 fb79 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d22:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <turnOn_GREEN2+0x2c>)
 8001d24:	f000 fb73 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d2e:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <turnOn_GREEN2+0x2c>)
 8001d30:	f000 fb6d 	bl	800240e <HAL_GPIO_WritePin>
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40010800 	.word	0x40010800

08001d3c <turnOn_YELLOW2>:
void turnOn_YELLOW2() {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d46:	4808      	ldr	r0, [pc, #32]	@ (8001d68 <turnOn_YELLOW2+0x2c>)
 8001d48:	f000 fb61 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d52:	4805      	ldr	r0, [pc, #20]	@ (8001d68 <turnOn_YELLOW2+0x2c>)
 8001d54:	f000 fb5b 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d5e:	4802      	ldr	r0, [pc, #8]	@ (8001d68 <turnOn_YELLOW2+0x2c>)
 8001d60:	f000 fb55 	bl	800240e <HAL_GPIO_WritePin>
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40010800 	.word	0x40010800

08001d6c <turnOff>:
void turnOff(){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2140      	movs	r1, #64	@ 0x40
 8001d74:	4810      	ldr	r0, [pc, #64]	@ (8001db8 <turnOff+0x4c>)
 8001d76:	f000 fb4a 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2180      	movs	r1, #128	@ 0x80
 8001d7e:	480e      	ldr	r0, [pc, #56]	@ (8001db8 <turnOff+0x4c>)
 8001d80:	f000 fb45 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d8a:	480b      	ldr	r0, [pc, #44]	@ (8001db8 <turnOff+0x4c>)
 8001d8c:	f000 fb3f 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d96:	4808      	ldr	r0, [pc, #32]	@ (8001db8 <turnOff+0x4c>)
 8001d98:	f000 fb39 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <turnOff+0x4c>)
 8001da4:	f000 fb33 	bl	800240e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001dae:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <turnOff+0x4c>)
 8001db0:	f000 fb2d 	bl	800240e <HAL_GPIO_WritePin>
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40010800 	.word	0x40010800

08001dbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dbc:	f7ff fee4 	bl	8001b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc0:	480b      	ldr	r0, [pc, #44]	@ (8001df0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dc2:	490c      	ldr	r1, [pc, #48]	@ (8001df4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001df8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc8:	e002      	b.n	8001dd0 <LoopCopyDataInit>

08001dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dce:	3304      	adds	r3, #4

08001dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd4:	d3f9      	bcc.n	8001dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd6:	4a09      	ldr	r2, [pc, #36]	@ (8001dfc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001dd8:	4c09      	ldr	r4, [pc, #36]	@ (8001e00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ddc:	e001      	b.n	8001de2 <LoopFillZerobss>

08001dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de0:	3204      	adds	r2, #4

08001de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de4:	d3fb      	bcc.n	8001dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001de6:	f001 fc67 	bl	80036b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dea:	f7ff fb4d 	bl	8001488 <main>
  bx lr
 8001dee:	4770      	bx	lr
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001df8:	0800374c 	.word	0x0800374c
  ldr r2, =_sbss
 8001dfc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001e00:	2000053c 	.word	0x2000053c

08001e04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC1_2_IRQHandler>
	...

08001e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e0c:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <HAL_Init+0x28>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a07      	ldr	r2, [pc, #28]	@ (8001e30 <HAL_Init+0x28>)
 8001e12:	f043 0310 	orr.w	r3, r3, #16
 8001e16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f000 f923 	bl	8002064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1e:	200f      	movs	r0, #15
 8001e20:	f000 f808 	bl	8001e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e24:	f7ff fde4 	bl	80019f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40022000 	.word	0x40022000

08001e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e3c:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <HAL_InitTick+0x54>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <HAL_InitTick+0x58>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 f93b 	bl	80020ce <HAL_SYSTICK_Config>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00e      	b.n	8001e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b0f      	cmp	r3, #15
 8001e66:	d80a      	bhi.n	8001e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f000 f903 	bl	800207a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e74:	4a06      	ldr	r2, [pc, #24]	@ (8001e90 <HAL_InitTick+0x5c>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e000      	b.n	8001e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2000000c 	.word	0x2000000c
 8001e8c:	20000014 	.word	0x20000014
 8001e90:	20000010 	.word	0x20000010

08001e94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e98:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_IncTick+0x1c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_IncTick+0x20>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a03      	ldr	r2, [pc, #12]	@ (8001eb4 <HAL_IncTick+0x20>)
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	20000014 	.word	0x20000014
 8001eb4:	20000538 	.word	0x20000538

08001eb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b02      	ldr	r3, [pc, #8]	@ (8001ec8 <HAL_GetTick+0x10>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	20000538 	.word	0x20000538

08001ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4906      	ldr	r1, [pc, #24]	@ (8001f64 <__NVIC_EnableIRQ+0x34>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	@ (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	@ (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	@ 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002030:	d301      	bcc.n	8002036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002032:	2301      	movs	r3, #1
 8002034:	e00f      	b.n	8002056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002036:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <SysTick_Config+0x40>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203e:	210f      	movs	r1, #15
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	f7ff ff90 	bl	8001f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <SysTick_Config+0x40>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204e:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <SysTick_Config+0x40>)
 8002050:	2207      	movs	r2, #7
 8002052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	e000e010 	.word	0xe000e010

08002064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff2d 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800208c:	f7ff ff42 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	6978      	ldr	r0, [r7, #20]
 8002098:	f7ff ff90 	bl	8001fbc <NVIC_EncodePriority>
 800209c:	4602      	mov	r2, r0
 800209e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff5f 	bl	8001f68 <__NVIC_SetPriority>
}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff35 	bl	8001f30 <__NVIC_EnableIRQ>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ffa2 	bl	8002020 <SysTick_Config>
 80020dc:	4603      	mov	r3, r0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b08b      	sub	sp, #44	@ 0x2c
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fa:	e161      	b.n	80023c0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020fc:	2201      	movs	r2, #1
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	429a      	cmp	r2, r3
 8002116:	f040 8150 	bne.w	80023ba <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4a97      	ldr	r2, [pc, #604]	@ (800237c <HAL_GPIO_Init+0x294>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d05e      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 8002124:	4a95      	ldr	r2, [pc, #596]	@ (800237c <HAL_GPIO_Init+0x294>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d875      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 800212a:	4a95      	ldr	r2, [pc, #596]	@ (8002380 <HAL_GPIO_Init+0x298>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d058      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 8002130:	4a93      	ldr	r2, [pc, #588]	@ (8002380 <HAL_GPIO_Init+0x298>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d86f      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 8002136:	4a93      	ldr	r2, [pc, #588]	@ (8002384 <HAL_GPIO_Init+0x29c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d052      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 800213c:	4a91      	ldr	r2, [pc, #580]	@ (8002384 <HAL_GPIO_Init+0x29c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d869      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 8002142:	4a91      	ldr	r2, [pc, #580]	@ (8002388 <HAL_GPIO_Init+0x2a0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d04c      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 8002148:	4a8f      	ldr	r2, [pc, #572]	@ (8002388 <HAL_GPIO_Init+0x2a0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d863      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 800214e:	4a8f      	ldr	r2, [pc, #572]	@ (800238c <HAL_GPIO_Init+0x2a4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d046      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 8002154:	4a8d      	ldr	r2, [pc, #564]	@ (800238c <HAL_GPIO_Init+0x2a4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d85d      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 800215a:	2b12      	cmp	r3, #18
 800215c:	d82a      	bhi.n	80021b4 <HAL_GPIO_Init+0xcc>
 800215e:	2b12      	cmp	r3, #18
 8002160:	d859      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 8002162:	a201      	add	r2, pc, #4	@ (adr r2, 8002168 <HAL_GPIO_Init+0x80>)
 8002164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002168:	080021e3 	.word	0x080021e3
 800216c:	080021bd 	.word	0x080021bd
 8002170:	080021cf 	.word	0x080021cf
 8002174:	08002211 	.word	0x08002211
 8002178:	08002217 	.word	0x08002217
 800217c:	08002217 	.word	0x08002217
 8002180:	08002217 	.word	0x08002217
 8002184:	08002217 	.word	0x08002217
 8002188:	08002217 	.word	0x08002217
 800218c:	08002217 	.word	0x08002217
 8002190:	08002217 	.word	0x08002217
 8002194:	08002217 	.word	0x08002217
 8002198:	08002217 	.word	0x08002217
 800219c:	08002217 	.word	0x08002217
 80021a0:	08002217 	.word	0x08002217
 80021a4:	08002217 	.word	0x08002217
 80021a8:	08002217 	.word	0x08002217
 80021ac:	080021c5 	.word	0x080021c5
 80021b0:	080021d9 	.word	0x080021d9
 80021b4:	4a76      	ldr	r2, [pc, #472]	@ (8002390 <HAL_GPIO_Init+0x2a8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021ba:	e02c      	b.n	8002216 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	623b      	str	r3, [r7, #32]
          break;
 80021c2:	e029      	b.n	8002218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	3304      	adds	r3, #4
 80021ca:	623b      	str	r3, [r7, #32]
          break;
 80021cc:	e024      	b.n	8002218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	3308      	adds	r3, #8
 80021d4:	623b      	str	r3, [r7, #32]
          break;
 80021d6:	e01f      	b.n	8002218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	330c      	adds	r3, #12
 80021de:	623b      	str	r3, [r7, #32]
          break;
 80021e0:	e01a      	b.n	8002218 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d102      	bne.n	80021f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ea:	2304      	movs	r3, #4
 80021ec:	623b      	str	r3, [r7, #32]
          break;
 80021ee:	e013      	b.n	8002218 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021f8:	2308      	movs	r3, #8
 80021fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	611a      	str	r2, [r3, #16]
          break;
 8002202:	e009      	b.n	8002218 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002204:	2308      	movs	r3, #8
 8002206:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	615a      	str	r2, [r3, #20]
          break;
 800220e:	e003      	b.n	8002218 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002210:	2300      	movs	r3, #0
 8002212:	623b      	str	r3, [r7, #32]
          break;
 8002214:	e000      	b.n	8002218 <HAL_GPIO_Init+0x130>
          break;
 8002216:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2bff      	cmp	r3, #255	@ 0xff
 800221c:	d801      	bhi.n	8002222 <HAL_GPIO_Init+0x13a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	e001      	b.n	8002226 <HAL_GPIO_Init+0x13e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3304      	adds	r3, #4
 8002226:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2bff      	cmp	r3, #255	@ 0xff
 800222c:	d802      	bhi.n	8002234 <HAL_GPIO_Init+0x14c>
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	e002      	b.n	800223a <HAL_GPIO_Init+0x152>
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	3b08      	subs	r3, #8
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	210f      	movs	r1, #15
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	401a      	ands	r2, r3
 800224c:	6a39      	ldr	r1, [r7, #32]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	fa01 f303 	lsl.w	r3, r1, r3
 8002254:	431a      	orrs	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80a9 	beq.w	80023ba <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002268:	4b4a      	ldr	r3, [pc, #296]	@ (8002394 <HAL_GPIO_Init+0x2ac>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a49      	ldr	r2, [pc, #292]	@ (8002394 <HAL_GPIO_Init+0x2ac>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b47      	ldr	r3, [pc, #284]	@ (8002394 <HAL_GPIO_Init+0x2ac>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002280:	4a45      	ldr	r2, [pc, #276]	@ (8002398 <HAL_GPIO_Init+0x2b0>)
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	3302      	adds	r3, #2
 8002288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	220f      	movs	r2, #15
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4013      	ands	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a3d      	ldr	r2, [pc, #244]	@ (800239c <HAL_GPIO_Init+0x2b4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d00d      	beq.n	80022c8 <HAL_GPIO_Init+0x1e0>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a3c      	ldr	r2, [pc, #240]	@ (80023a0 <HAL_GPIO_Init+0x2b8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d007      	beq.n	80022c4 <HAL_GPIO_Init+0x1dc>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a3b      	ldr	r2, [pc, #236]	@ (80023a4 <HAL_GPIO_Init+0x2bc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d101      	bne.n	80022c0 <HAL_GPIO_Init+0x1d8>
 80022bc:	2302      	movs	r3, #2
 80022be:	e004      	b.n	80022ca <HAL_GPIO_Init+0x1e2>
 80022c0:	2303      	movs	r3, #3
 80022c2:	e002      	b.n	80022ca <HAL_GPIO_Init+0x1e2>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_GPIO_Init+0x1e2>
 80022c8:	2300      	movs	r3, #0
 80022ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022cc:	f002 0203 	and.w	r2, r2, #3
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	4093      	lsls	r3, r2
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022da:	492f      	ldr	r1, [pc, #188]	@ (8002398 <HAL_GPIO_Init+0x2b0>)
 80022dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d006      	beq.n	8002302 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022f4:	4b2c      	ldr	r3, [pc, #176]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	492b      	ldr	r1, [pc, #172]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]
 8002300:	e006      	b.n	8002310 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002302:	4b29      	ldr	r3, [pc, #164]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	43db      	mvns	r3, r3
 800230a:	4927      	ldr	r1, [pc, #156]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 800230c:	4013      	ands	r3, r2
 800230e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d006      	beq.n	800232a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800231c:	4b22      	ldr	r3, [pc, #136]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	4921      	ldr	r1, [pc, #132]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	60cb      	str	r3, [r1, #12]
 8002328:	e006      	b.n	8002338 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800232a:	4b1f      	ldr	r3, [pc, #124]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	43db      	mvns	r3, r3
 8002332:	491d      	ldr	r1, [pc, #116]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 8002334:	4013      	ands	r3, r2
 8002336:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002344:	4b18      	ldr	r3, [pc, #96]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	4917      	ldr	r1, [pc, #92]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	e006      	b.n	8002360 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002352:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	43db      	mvns	r3, r3
 800235a:	4913      	ldr	r1, [pc, #76]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 800235c:	4013      	ands	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01f      	beq.n	80023ac <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800236c:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	490d      	ldr	r1, [pc, #52]	@ (80023a8 <HAL_GPIO_Init+0x2c0>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]
 8002378:	e01f      	b.n	80023ba <HAL_GPIO_Init+0x2d2>
 800237a:	bf00      	nop
 800237c:	10320000 	.word	0x10320000
 8002380:	10310000 	.word	0x10310000
 8002384:	10220000 	.word	0x10220000
 8002388:	10210000 	.word	0x10210000
 800238c:	10120000 	.word	0x10120000
 8002390:	10110000 	.word	0x10110000
 8002394:	40021000 	.word	0x40021000
 8002398:	40010000 	.word	0x40010000
 800239c:	40010800 	.word	0x40010800
 80023a0:	40010c00 	.word	0x40010c00
 80023a4:	40011000 	.word	0x40011000
 80023a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023ac:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_GPIO_Init+0x2f4>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	4909      	ldr	r1, [pc, #36]	@ (80023dc <HAL_GPIO_Init+0x2f4>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	3301      	adds	r3, #1
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f47f ae96 	bne.w	80020fc <HAL_GPIO_Init+0x14>
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	372c      	adds	r7, #44	@ 0x2c
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	40010400 	.word	0x40010400

080023e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
 80023fc:	e001      	b.n	8002402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	807b      	strh	r3, [r7, #2]
 800241a:	4613      	mov	r3, r2
 800241c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800241e:	787b      	ldrb	r3, [r7, #1]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002424:	887a      	ldrh	r2, [r7, #2]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800242a:	e003      	b.n	8002434 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800242c:	887b      	ldrh	r3, [r7, #2]
 800242e:	041a      	lsls	r2, r3, #16
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	611a      	str	r2, [r3, #16]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800243e:	b480      	push	{r7}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002450:	887a      	ldrh	r2, [r7, #2]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4013      	ands	r3, r2
 8002456:	041a      	lsls	r2, r3, #16
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	43d9      	mvns	r1, r3
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	400b      	ands	r3, r1
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	611a      	str	r2, [r3, #16]
}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e12b      	b.n	80026da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fadc 	bl	8001a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2224      	movs	r2, #36	@ 0x24
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024d4:	f000 fcda 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 80024d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4a81      	ldr	r2, [pc, #516]	@ (80026e4 <HAL_I2C_Init+0x274>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d807      	bhi.n	80024f4 <HAL_I2C_Init+0x84>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4a80      	ldr	r2, [pc, #512]	@ (80026e8 <HAL_I2C_Init+0x278>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	bf94      	ite	ls
 80024ec:	2301      	movls	r3, #1
 80024ee:	2300      	movhi	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e006      	b.n	8002502 <HAL_I2C_Init+0x92>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4a7d      	ldr	r2, [pc, #500]	@ (80026ec <HAL_I2C_Init+0x27c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	bf94      	ite	ls
 80024fc:	2301      	movls	r3, #1
 80024fe:	2300      	movhi	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0e7      	b.n	80026da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4a78      	ldr	r2, [pc, #480]	@ (80026f0 <HAL_I2C_Init+0x280>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0c9b      	lsrs	r3, r3, #18
 8002514:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	430a      	orrs	r2, r1
 8002528:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4a6a      	ldr	r2, [pc, #424]	@ (80026e4 <HAL_I2C_Init+0x274>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d802      	bhi.n	8002544 <HAL_I2C_Init+0xd4>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	3301      	adds	r3, #1
 8002542:	e009      	b.n	8002558 <HAL_I2C_Init+0xe8>
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	4a69      	ldr	r2, [pc, #420]	@ (80026f4 <HAL_I2C_Init+0x284>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	099b      	lsrs	r3, r3, #6
 8002556:	3301      	adds	r3, #1
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	430b      	orrs	r3, r1
 800255e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800256a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	495c      	ldr	r1, [pc, #368]	@ (80026e4 <HAL_I2C_Init+0x274>)
 8002574:	428b      	cmp	r3, r1
 8002576:	d819      	bhi.n	80025ac <HAL_I2C_Init+0x13c>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1e59      	subs	r1, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fbb1 f3f3 	udiv	r3, r1, r3
 8002586:	1c59      	adds	r1, r3, #1
 8002588:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800258c:	400b      	ands	r3, r1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_I2C_Init+0x138>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1e59      	subs	r1, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a6:	e051      	b.n	800264c <HAL_I2C_Init+0x1dc>
 80025a8:	2304      	movs	r3, #4
 80025aa:	e04f      	b.n	800264c <HAL_I2C_Init+0x1dc>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d111      	bne.n	80025d8 <HAL_I2C_Init+0x168>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	440b      	add	r3, r1
 80025c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	e012      	b.n	80025fe <HAL_I2C_Init+0x18e>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1e58      	subs	r0, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	0099      	lsls	r1, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Init+0x196>
 8002602:	2301      	movs	r3, #1
 8002604:	e022      	b.n	800264c <HAL_I2C_Init+0x1dc>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10e      	bne.n	800262c <HAL_I2C_Init+0x1bc>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1e58      	subs	r0, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6859      	ldr	r1, [r3, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	440b      	add	r3, r1
 800261c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800262a:	e00f      	b.n	800264c <HAL_I2C_Init+0x1dc>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e58      	subs	r0, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	0099      	lsls	r1, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002648:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	6809      	ldr	r1, [r1, #0]
 8002650:	4313      	orrs	r3, r2
 8002652:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800267a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6911      	ldr	r1, [r2, #16]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68d2      	ldr	r2, [r2, #12]
 8002686:	4311      	orrs	r1, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	430b      	orrs	r3, r1
 800268e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	000186a0 	.word	0x000186a0
 80026e8:	001e847f 	.word	0x001e847f
 80026ec:	003d08ff 	.word	0x003d08ff
 80026f0:	431bde83 	.word	0x431bde83
 80026f4:	10624dd3 	.word	0x10624dd3

080026f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e272      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8087 	beq.w	8002826 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002718:	4b92      	ldr	r3, [pc, #584]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b04      	cmp	r3, #4
 8002722:	d00c      	beq.n	800273e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002724:	4b8f      	ldr	r3, [pc, #572]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d112      	bne.n	8002756 <HAL_RCC_OscConfig+0x5e>
 8002730:	4b8c      	ldr	r3, [pc, #560]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800273c:	d10b      	bne.n	8002756 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273e:	4b89      	ldr	r3, [pc, #548]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d06c      	beq.n	8002824 <HAL_RCC_OscConfig+0x12c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d168      	bne.n	8002824 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e24c      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x76>
 8002760:	4b80      	ldr	r3, [pc, #512]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a7f      	ldr	r2, [pc, #508]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e02e      	b.n	80027cc <HAL_RCC_OscConfig+0xd4>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x98>
 8002776:	4b7b      	ldr	r3, [pc, #492]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a7a      	ldr	r2, [pc, #488]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 800277c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b78      	ldr	r3, [pc, #480]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a77      	ldr	r2, [pc, #476]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002788:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e01d      	b.n	80027cc <HAL_RCC_OscConfig+0xd4>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0xbc>
 800279a:	4b72      	ldr	r3, [pc, #456]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a71      	ldr	r2, [pc, #452]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0xd4>
 80027b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	4b68      	ldr	r3, [pc, #416]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a67      	ldr	r2, [pc, #412]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d013      	beq.n	80027fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7ff fb70 	bl	8001eb8 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027dc:	f7ff fb6c 	bl	8001eb8 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	@ 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e200      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0xe4>
 80027fa:	e014      	b.n	8002826 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7ff fb5c 	bl	8001eb8 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002804:	f7ff fb58 	bl	8001eb8 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	@ 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e1ec      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	4b53      	ldr	r3, [pc, #332]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x10c>
 8002822:	e000      	b.n	8002826 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d063      	beq.n	80028fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002832:	4b4c      	ldr	r3, [pc, #304]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800283e:	4b49      	ldr	r3, [pc, #292]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b08      	cmp	r3, #8
 8002848:	d11c      	bne.n	8002884 <HAL_RCC_OscConfig+0x18c>
 800284a:	4b46      	ldr	r3, [pc, #280]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d116      	bne.n	8002884 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002856:	4b43      	ldr	r3, [pc, #268]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_RCC_OscConfig+0x176>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d001      	beq.n	800286e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e1c0      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286e:	4b3d      	ldr	r3, [pc, #244]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4939      	ldr	r1, [pc, #228]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002882:	e03a      	b.n	80028fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d020      	beq.n	80028ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288c:	4b36      	ldr	r3, [pc, #216]	@ (8002968 <HAL_RCC_OscConfig+0x270>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7ff fb11 	bl	8001eb8 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289a:	f7ff fb0d 	bl	8001eb8 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e1a1      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4927      	ldr	r1, [pc, #156]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	600b      	str	r3, [r1, #0]
 80028cc:	e015      	b.n	80028fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ce:	4b26      	ldr	r3, [pc, #152]	@ (8002968 <HAL_RCC_OscConfig+0x270>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7ff faf0 	bl	8001eb8 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028dc:	f7ff faec 	bl	8001eb8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e180      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d03a      	beq.n	800297c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d019      	beq.n	8002942 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290e:	4b17      	ldr	r3, [pc, #92]	@ (800296c <HAL_RCC_OscConfig+0x274>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002914:	f7ff fad0 	bl	8001eb8 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291c:	f7ff facc 	bl	8001eb8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e160      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800293a:	2001      	movs	r0, #1
 800293c:	f000 faba 	bl	8002eb4 <RCC_Delay>
 8002940:	e01c      	b.n	800297c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002942:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <HAL_RCC_OscConfig+0x274>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002948:	f7ff fab6 	bl	8001eb8 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294e:	e00f      	b.n	8002970 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002950:	f7ff fab2 	bl	8001eb8 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d908      	bls.n	8002970 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e146      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	42420000 	.word	0x42420000
 800296c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	4b92      	ldr	r3, [pc, #584]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e9      	bne.n	8002950 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80a6 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298a:	2300      	movs	r3, #0
 800298c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298e:	4b8b      	ldr	r3, [pc, #556]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10d      	bne.n	80029b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299a:	4b88      	ldr	r3, [pc, #544]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	4a87      	ldr	r2, [pc, #540]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a4:	61d3      	str	r3, [r2, #28]
 80029a6:	4b85      	ldr	r3, [pc, #532]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b2:	2301      	movs	r3, #1
 80029b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	4b82      	ldr	r3, [pc, #520]	@ (8002bc0 <HAL_RCC_OscConfig+0x4c8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d118      	bne.n	80029f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c2:	4b7f      	ldr	r3, [pc, #508]	@ (8002bc0 <HAL_RCC_OscConfig+0x4c8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7e      	ldr	r2, [pc, #504]	@ (8002bc0 <HAL_RCC_OscConfig+0x4c8>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ce:	f7ff fa73 	bl	8001eb8 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d6:	f7ff fa6f 	bl	8001eb8 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b64      	cmp	r3, #100	@ 0x64
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e103      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	4b75      	ldr	r3, [pc, #468]	@ (8002bc0 <HAL_RCC_OscConfig+0x4c8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x312>
 80029fc:	4b6f      	ldr	r3, [pc, #444]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4a6e      	ldr	r2, [pc, #440]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6213      	str	r3, [r2, #32]
 8002a08:	e02d      	b.n	8002a66 <HAL_RCC_OscConfig+0x36e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x334>
 8002a12:	4b6a      	ldr	r3, [pc, #424]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4a69      	ldr	r2, [pc, #420]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	6213      	str	r3, [r2, #32]
 8002a1e:	4b67      	ldr	r3, [pc, #412]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4a66      	ldr	r2, [pc, #408]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	f023 0304 	bic.w	r3, r3, #4
 8002a28:	6213      	str	r3, [r2, #32]
 8002a2a:	e01c      	b.n	8002a66 <HAL_RCC_OscConfig+0x36e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d10c      	bne.n	8002a4e <HAL_RCC_OscConfig+0x356>
 8002a34:	4b61      	ldr	r3, [pc, #388]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4a60      	ldr	r2, [pc, #384]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	f043 0304 	orr.w	r3, r3, #4
 8002a3e:	6213      	str	r3, [r2, #32]
 8002a40:	4b5e      	ldr	r3, [pc, #376]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4a5d      	ldr	r2, [pc, #372]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6213      	str	r3, [r2, #32]
 8002a4c:	e00b      	b.n	8002a66 <HAL_RCC_OscConfig+0x36e>
 8002a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4a5a      	ldr	r2, [pc, #360]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	6213      	str	r3, [r2, #32]
 8002a5a:	4b58      	ldr	r3, [pc, #352]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	4a57      	ldr	r2, [pc, #348]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	f023 0304 	bic.w	r3, r3, #4
 8002a64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d015      	beq.n	8002a9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7ff fa23 	bl	8001eb8 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a74:	e00a      	b.n	8002a8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a76:	f7ff fa1f 	bl	8001eb8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e0b1      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8c:	4b4b      	ldr	r3, [pc, #300]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0ee      	beq.n	8002a76 <HAL_RCC_OscConfig+0x37e>
 8002a98:	e014      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7ff fa0d 	bl	8001eb8 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa2:	f7ff fa09 	bl	8001eb8 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e09b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab8:	4b40      	ldr	r3, [pc, #256]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1ee      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d105      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aca:	4b3c      	ldr	r3, [pc, #240]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	4a3b      	ldr	r2, [pc, #236]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ad4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8087 	beq.w	8002bee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae0:	4b36      	ldr	r3, [pc, #216]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 030c 	and.w	r3, r3, #12
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d061      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d146      	bne.n	8002b82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af4:	4b33      	ldr	r3, [pc, #204]	@ (8002bc4 <HAL_RCC_OscConfig+0x4cc>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afa:	f7ff f9dd 	bl	8001eb8 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b02:	f7ff f9d9 	bl	8001eb8 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e06d      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b14:	4b29      	ldr	r3, [pc, #164]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f0      	bne.n	8002b02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b28:	d108      	bne.n	8002b3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b2a:	4b24      	ldr	r3, [pc, #144]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	4921      	ldr	r1, [pc, #132]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a19      	ldr	r1, [r3, #32]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	491b      	ldr	r1, [pc, #108]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b54:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7ff f9ad 	bl	8001eb8 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b62:	f7ff f9a9 	bl	8001eb8 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e03d      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b74:	4b11      	ldr	r3, [pc, #68]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x46a>
 8002b80:	e035      	b.n	8002bee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b10      	ldr	r3, [pc, #64]	@ (8002bc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7ff f996 	bl	8001eb8 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b90:	f7ff f992 	bl	8001eb8 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e026      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba2:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x498>
 8002bae:	e01e      	b.n	8002bee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e019      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_RCC_OscConfig+0x500>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000

08002bfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0d0      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c10:	4b6a      	ldr	r3, [pc, #424]	@ (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d910      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b67      	ldr	r3, [pc, #412]	@ (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 0207 	bic.w	r2, r3, #7
 8002c26:	4965      	ldr	r1, [pc, #404]	@ (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b63      	ldr	r3, [pc, #396]	@ (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0b8      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c58:	4b59      	ldr	r3, [pc, #356]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a58      	ldr	r2, [pc, #352]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c70:	4b53      	ldr	r3, [pc, #332]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a52      	ldr	r2, [pc, #328]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7c:	4b50      	ldr	r3, [pc, #320]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	494d      	ldr	r1, [pc, #308]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d040      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b47      	ldr	r3, [pc, #284]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d115      	bne.n	8002cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e07f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cba:	4b41      	ldr	r3, [pc, #260]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e073      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cca:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e06b      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cda:	4b39      	ldr	r3, [pc, #228]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f023 0203 	bic.w	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4936      	ldr	r1, [pc, #216]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cec:	f7ff f8e4 	bl	8001eb8 <HAL_GetTick>
 8002cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	e00a      	b.n	8002d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf4:	f7ff f8e0 	bl	8001eb8 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e053      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 020c 	and.w	r2, r3, #12
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d1eb      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b27      	ldr	r3, [pc, #156]	@ (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d210      	bcs.n	8002d4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b24      	ldr	r3, [pc, #144]	@ (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 0207 	bic.w	r2, r3, #7
 8002d32:	4922      	ldr	r1, [pc, #136]	@ (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b20      	ldr	r3, [pc, #128]	@ (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e032      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d58:	4b19      	ldr	r3, [pc, #100]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4916      	ldr	r1, [pc, #88]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d76:	4b12      	ldr	r3, [pc, #72]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	490e      	ldr	r1, [pc, #56]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d8a:	f000 f821 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	490a      	ldr	r1, [pc, #40]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9c:	5ccb      	ldrb	r3, [r1, r3]
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	4a09      	ldr	r2, [pc, #36]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8002da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002da6:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <HAL_RCC_ClockConfig+0x1d0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff f842 	bl	8001e34 <HAL_InitTick>

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40022000 	.word	0x40022000
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	08003718 	.word	0x08003718
 8002dc8:	2000000c 	.word	0x2000000c
 8002dcc:	20000010 	.word	0x20000010

08002dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	2300      	movs	r3, #0
 8002de4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dea:	4b1e      	ldr	r3, [pc, #120]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d002      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x30>
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d003      	beq.n	8002e06 <HAL_RCC_GetSysClockFreq+0x36>
 8002dfe:	e027      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e00:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e02:	613b      	str	r3, [r7, #16]
      break;
 8002e04:	e027      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	0c9b      	lsrs	r3, r3, #18
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	4a17      	ldr	r2, [pc, #92]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e10:	5cd3      	ldrb	r3, [r2, r3]
 8002e12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d010      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e1e:	4b11      	ldr	r3, [pc, #68]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	0c5b      	lsrs	r3, r3, #17
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	4a11      	ldr	r2, [pc, #68]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e2a:	5cd3      	ldrb	r3, [r2, r3]
 8002e2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a0d      	ldr	r2, [pc, #52]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e32:	fb03 f202 	mul.w	r2, r3, r2
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e004      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a0c      	ldr	r2, [pc, #48]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	613b      	str	r3, [r7, #16]
      break;
 8002e4e:	e002      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e52:	613b      	str	r3, [r7, #16]
      break;
 8002e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e56:	693b      	ldr	r3, [r7, #16]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	007a1200 	.word	0x007a1200
 8002e6c:	08003730 	.word	0x08003730
 8002e70:	08003740 	.word	0x08003740
 8002e74:	003d0900 	.word	0x003d0900

08002e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e7c:	4b02      	ldr	r3, [pc, #8]	@ (8002e88 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	2000000c 	.word	0x2000000c

08002e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e90:	f7ff fff2 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002e94:	4602      	mov	r2, r0
 8002e96:	4b05      	ldr	r3, [pc, #20]	@ (8002eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	0a1b      	lsrs	r3, r3, #8
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	4903      	ldr	r1, [pc, #12]	@ (8002eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea2:	5ccb      	ldrb	r3, [r1, r3]
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	08003728 	.word	0x08003728

08002eb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <RCC_Delay+0x34>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <RCC_Delay+0x38>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	0a5b      	lsrs	r3, r3, #9
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ed0:	bf00      	nop
  }
  while (Delay --);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1e5a      	subs	r2, r3, #1
 8002ed6:	60fa      	str	r2, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f9      	bne.n	8002ed0 <RCC_Delay+0x1c>
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	2000000c 	.word	0x2000000c
 8002eec:	10624dd3 	.word	0x10624dd3

08002ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e041      	b.n	8002f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fe fddc 	bl	8001ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	f000 fa56 	bl	80033e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d001      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e035      	b.n	8003014 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a16      	ldr	r2, [pc, #88]	@ (8003020 <HAL_TIM_Base_Start_IT+0x90>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_TIM_Base_Start_IT+0x4e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd2:	d004      	beq.n	8002fde <HAL_TIM_Base_Start_IT+0x4e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a12      	ldr	r2, [pc, #72]	@ (8003024 <HAL_TIM_Base_Start_IT+0x94>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d111      	bne.n	8003002 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	d010      	beq.n	8003012 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003000:	e007      	b.n	8003012 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0201 	orr.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40012c00 	.word	0x40012c00
 8003024:	40000400 	.word	0x40000400

08003028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d020      	beq.n	800308c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d01b      	beq.n	800308c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0202 	mvn.w	r2, #2
 800305c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f998 	bl	80033a8 <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f98b 	bl	8003396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f99a 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d020      	beq.n	80030d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01b      	beq.n	80030d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0204 	mvn.w	r2, #4
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f972 	bl	80033a8 <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f965 	bl	8003396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f974 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d020      	beq.n	8003124 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01b      	beq.n	8003124 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0208 	mvn.w	r2, #8
 80030f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2204      	movs	r2, #4
 80030fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f94c 	bl	80033a8 <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f93f 	bl	8003396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f94e 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d020      	beq.n	8003170 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01b      	beq.n	8003170 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0210 	mvn.w	r2, #16
 8003140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2208      	movs	r2, #8
 8003146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f926 	bl	80033a8 <HAL_TIM_IC_CaptureCallback>
 800315c:	e005      	b.n	800316a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f919 	bl	8003396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f928 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0201 	mvn.w	r2, #1
 800318c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe fac4 	bl	800171c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00c      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fa6f 	bl	8003696 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00c      	beq.n	80031dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f8f8 	bl	80033cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00c      	beq.n	8003200 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0220 	mvn.w	r2, #32
 80031f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fa42 	bl	8003684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_TIM_ConfigClockSource+0x1c>
 8003220:	2302      	movs	r3, #2
 8003222:	e0b4      	b.n	800338e <HAL_TIM_ConfigClockSource+0x186>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800324a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800325c:	d03e      	beq.n	80032dc <HAL_TIM_ConfigClockSource+0xd4>
 800325e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003262:	f200 8087 	bhi.w	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800326a:	f000 8086 	beq.w	800337a <HAL_TIM_ConfigClockSource+0x172>
 800326e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003272:	d87f      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b70      	cmp	r3, #112	@ 0x70
 8003276:	d01a      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0xa6>
 8003278:	2b70      	cmp	r3, #112	@ 0x70
 800327a:	d87b      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b60      	cmp	r3, #96	@ 0x60
 800327e:	d050      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x11a>
 8003280:	2b60      	cmp	r3, #96	@ 0x60
 8003282:	d877      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b50      	cmp	r3, #80	@ 0x50
 8003286:	d03c      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0xfa>
 8003288:	2b50      	cmp	r3, #80	@ 0x50
 800328a:	d873      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b40      	cmp	r3, #64	@ 0x40
 800328e:	d058      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x13a>
 8003290:	2b40      	cmp	r3, #64	@ 0x40
 8003292:	d86f      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b30      	cmp	r3, #48	@ 0x30
 8003296:	d064      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 8003298:	2b30      	cmp	r3, #48	@ 0x30
 800329a:	d86b      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 800329c:	2b20      	cmp	r3, #32
 800329e:	d060      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d867      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d05c      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	d05a      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 80032ac:	e062      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032be:	f000 f96a 	bl	8003596 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	609a      	str	r2, [r3, #8]
      break;
 80032da:	e04f      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ec:	f000 f953 	bl	8003596 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032fe:	609a      	str	r2, [r3, #8]
      break;
 8003300:	e03c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800330e:	461a      	mov	r2, r3
 8003310:	f000 f8ca 	bl	80034a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2150      	movs	r1, #80	@ 0x50
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f921 	bl	8003562 <TIM_ITRx_SetConfig>
      break;
 8003320:	e02c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800332e:	461a      	mov	r2, r3
 8003330:	f000 f8e8 	bl	8003504 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2160      	movs	r1, #96	@ 0x60
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f911 	bl	8003562 <TIM_ITRx_SetConfig>
      break;
 8003340:	e01c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800334e:	461a      	mov	r2, r3
 8003350:	f000 f8aa 	bl	80034a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2140      	movs	r1, #64	@ 0x40
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f901 	bl	8003562 <TIM_ITRx_SetConfig>
      break;
 8003360:	e00c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4619      	mov	r1, r3
 800336c:	4610      	mov	r0, r2
 800336e:	f000 f8f8 	bl	8003562 <TIM_ITRx_SetConfig>
      break;
 8003372:	e003      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e000      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800337a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr

080033a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr
	...

080033e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a2b      	ldr	r2, [pc, #172]	@ (80034a0 <TIM_Base_SetConfig+0xc0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d007      	beq.n	8003408 <TIM_Base_SetConfig+0x28>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033fe:	d003      	beq.n	8003408 <TIM_Base_SetConfig+0x28>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a28      	ldr	r2, [pc, #160]	@ (80034a4 <TIM_Base_SetConfig+0xc4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d108      	bne.n	800341a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800340e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a20      	ldr	r2, [pc, #128]	@ (80034a0 <TIM_Base_SetConfig+0xc0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d007      	beq.n	8003432 <TIM_Base_SetConfig+0x52>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003428:	d003      	beq.n	8003432 <TIM_Base_SetConfig+0x52>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <TIM_Base_SetConfig+0xc4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d108      	bne.n	8003444 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a0d      	ldr	r2, [pc, #52]	@ (80034a0 <TIM_Base_SetConfig+0xc0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d103      	bne.n	8003478 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f023 0201 	bic.w	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	611a      	str	r2, [r3, #16]
  }
}
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40000400 	.word	0x40000400

080034a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f023 0201 	bic.w	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f023 030a 	bic.w	r3, r3, #10
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f023 0210 	bic.w	r2, r3, #16
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800352e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	031b      	lsls	r3, r3, #12
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003540:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	621a      	str	r2, [r3, #32]
}
 8003558:	bf00      	nop
 800355a:	371c      	adds	r7, #28
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	f043 0307 	orr.w	r3, r3, #7
 8003584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	609a      	str	r2, [r3, #8]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr

08003596 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003596:	b480      	push	{r7}
 8003598:	b087      	sub	sp, #28
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	021a      	lsls	r2, r3, #8
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4313      	orrs	r3, r2
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	609a      	str	r2, [r3, #8]
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e041      	b.n	8003670 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a14      	ldr	r2, [pc, #80]	@ (800367c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d009      	beq.n	8003644 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003638:	d004      	beq.n	8003644 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a10      	ldr	r2, [pc, #64]	@ (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10c      	bne.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800364a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	4313      	orrs	r3, r2
 8003654:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40012c00 	.word	0x40012c00
 8003680:	40000400 	.word	0x40000400

08003684 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr

08003696 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <memset>:
 80036a8:	4603      	mov	r3, r0
 80036aa:	4402      	add	r2, r0
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d100      	bne.n	80036b2 <memset+0xa>
 80036b0:	4770      	bx	lr
 80036b2:	f803 1b01 	strb.w	r1, [r3], #1
 80036b6:	e7f9      	b.n	80036ac <memset+0x4>

080036b8 <__libc_init_array>:
 80036b8:	b570      	push	{r4, r5, r6, lr}
 80036ba:	2600      	movs	r6, #0
 80036bc:	4d0c      	ldr	r5, [pc, #48]	@ (80036f0 <__libc_init_array+0x38>)
 80036be:	4c0d      	ldr	r4, [pc, #52]	@ (80036f4 <__libc_init_array+0x3c>)
 80036c0:	1b64      	subs	r4, r4, r5
 80036c2:	10a4      	asrs	r4, r4, #2
 80036c4:	42a6      	cmp	r6, r4
 80036c6:	d109      	bne.n	80036dc <__libc_init_array+0x24>
 80036c8:	f000 f81a 	bl	8003700 <_init>
 80036cc:	2600      	movs	r6, #0
 80036ce:	4d0a      	ldr	r5, [pc, #40]	@ (80036f8 <__libc_init_array+0x40>)
 80036d0:	4c0a      	ldr	r4, [pc, #40]	@ (80036fc <__libc_init_array+0x44>)
 80036d2:	1b64      	subs	r4, r4, r5
 80036d4:	10a4      	asrs	r4, r4, #2
 80036d6:	42a6      	cmp	r6, r4
 80036d8:	d105      	bne.n	80036e6 <__libc_init_array+0x2e>
 80036da:	bd70      	pop	{r4, r5, r6, pc}
 80036dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e0:	4798      	blx	r3
 80036e2:	3601      	adds	r6, #1
 80036e4:	e7ee      	b.n	80036c4 <__libc_init_array+0xc>
 80036e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ea:	4798      	blx	r3
 80036ec:	3601      	adds	r6, #1
 80036ee:	e7f2      	b.n	80036d6 <__libc_init_array+0x1e>
 80036f0:	08003744 	.word	0x08003744
 80036f4:	08003744 	.word	0x08003744
 80036f8:	08003744 	.word	0x08003744
 80036fc:	08003748 	.word	0x08003748

08003700 <_init>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	bf00      	nop
 8003704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003706:	bc08      	pop	{r3}
 8003708:	469e      	mov	lr, r3
 800370a:	4770      	bx	lr

0800370c <_fini>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	bf00      	nop
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr
