
LAB3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c04  08002c04  00003c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c28  08002c28  00004020  2**0
                  CONTENTS
  4 .ARM          00000000  08002c28  08002c28  00004020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c28  08002c28  00004020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c28  08002c28  00003c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c2c  08002c2c  00003c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08002c30  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000020  08002c50  00004020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08002c50  000041bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088f2  00000000  00000000  00004049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8e  00000000  00000000  0000c93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0000e6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000801  00000000  00000000  0000f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173bf  00000000  00000000  0000f979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7e8  00000000  00000000  00026d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082685  00000000  00000000  00034520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6ba5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002928  00000000  00000000  000b6be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000b9510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bec 	.word	0x08002bec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08002bec 	.word	0x08002bec

0800014c <isButtonPressed>:
int KeyReg1[MAX_BUTTON] = { NORMAL_STATE };
int KeyReg2[MAX_BUTTON] = { NORMAL_STATE };
int KeyReg3[MAX_BUTTON] = { NORMAL_STATE }; // trạng thái ổn định trước đó
int button_flag[MAX_BUTTON];

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000dc 	.word	0x200000dc

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a06      	ldr	r2, [pc, #24]	@ (80001a4 <subKeyProcess+0x24>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000192:	2110      	movs	r1, #16
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <subKeyProcess+0x28>)
 8000196:	f001 fd2a 	bl	8001bee <HAL_GPIO_TogglePin>
}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	200000dc 	.word	0x200000dc
 80001a8:	40010800 	.word	0x40010800

080001ac <getKeyInput>:

void getKeyInput() {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
	KeyReg0[0] = KeyReg1[0];
 80001b2:	4b36      	ldr	r3, [pc, #216]	@ (800028c <getKeyInput+0xe0>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a36      	ldr	r2, [pc, #216]	@ (8000290 <getKeyInput+0xe4>)
 80001b8:	6013      	str	r3, [r2, #0]
	KeyReg1[0] = KeyReg2[0];
 80001ba:	4b36      	ldr	r3, [pc, #216]	@ (8000294 <getKeyInput+0xe8>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a33      	ldr	r2, [pc, #204]	@ (800028c <getKeyInput+0xe0>)
 80001c0:	6013      	str	r3, [r2, #0]
	KeyReg2[0] = HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin);
 80001c2:	2102      	movs	r1, #2
 80001c4:	4834      	ldr	r0, [pc, #208]	@ (8000298 <getKeyInput+0xec>)
 80001c6:	f001 fce3 	bl	8001b90 <HAL_GPIO_ReadPin>
 80001ca:	4603      	mov	r3, r0
 80001cc:	461a      	mov	r2, r3
 80001ce:	4b31      	ldr	r3, [pc, #196]	@ (8000294 <getKeyInput+0xe8>)
 80001d0:	601a      	str	r2, [r3, #0]

	KeyReg0[1] = KeyReg1[1];
 80001d2:	4b2e      	ldr	r3, [pc, #184]	@ (800028c <getKeyInput+0xe0>)
 80001d4:	685b      	ldr	r3, [r3, #4]
 80001d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000290 <getKeyInput+0xe4>)
 80001d8:	6053      	str	r3, [r2, #4]
	KeyReg1[1] = KeyReg2[1];
 80001da:	4b2e      	ldr	r3, [pc, #184]	@ (8000294 <getKeyInput+0xe8>)
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	4a2b      	ldr	r2, [pc, #172]	@ (800028c <getKeyInput+0xe0>)
 80001e0:	6053      	str	r3, [r2, #4]
	KeyReg2[1] = HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin);
 80001e2:	2104      	movs	r1, #4
 80001e4:	482c      	ldr	r0, [pc, #176]	@ (8000298 <getKeyInput+0xec>)
 80001e6:	f001 fcd3 	bl	8001b90 <HAL_GPIO_ReadPin>
 80001ea:	4603      	mov	r3, r0
 80001ec:	461a      	mov	r2, r3
 80001ee:	4b29      	ldr	r3, [pc, #164]	@ (8000294 <getKeyInput+0xe8>)
 80001f0:	605a      	str	r2, [r3, #4]

	KeyReg0[2] = KeyReg1[2];
 80001f2:	4b26      	ldr	r3, [pc, #152]	@ (800028c <getKeyInput+0xe0>)
 80001f4:	689b      	ldr	r3, [r3, #8]
 80001f6:	4a26      	ldr	r2, [pc, #152]	@ (8000290 <getKeyInput+0xe4>)
 80001f8:	6093      	str	r3, [r2, #8]
	KeyReg1[2] = KeyReg2[2];
 80001fa:	4b26      	ldr	r3, [pc, #152]	@ (8000294 <getKeyInput+0xe8>)
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	4a23      	ldr	r2, [pc, #140]	@ (800028c <getKeyInput+0xe0>)
 8000200:	6093      	str	r3, [r2, #8]
	KeyReg2[2] = HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin);
 8000202:	2108      	movs	r1, #8
 8000204:	4824      	ldr	r0, [pc, #144]	@ (8000298 <getKeyInput+0xec>)
 8000206:	f001 fcc3 	bl	8001b90 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	461a      	mov	r2, r3
 800020e:	4b21      	ldr	r3, [pc, #132]	@ (8000294 <getKeyInput+0xe8>)
 8000210:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < MAX_BUTTON; i++) {
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	e031      	b.n	800027c <getKeyInput+0xd0>
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) { // xử lý ổn định button
 8000218:	4a1d      	ldr	r2, [pc, #116]	@ (8000290 <getKeyInput+0xe4>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	491a      	ldr	r1, [pc, #104]	@ (800028c <getKeyInput+0xe0>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d124      	bne.n	8000276 <getKeyInput+0xca>
 800022c:	4a17      	ldr	r2, [pc, #92]	@ (800028c <getKeyInput+0xe0>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	4917      	ldr	r1, [pc, #92]	@ (8000294 <getKeyInput+0xe8>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d11a      	bne.n	8000276 <getKeyInput+0xca>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000240:	4a16      	ldr	r2, [pc, #88]	@ (800029c <getKeyInput+0xf0>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	4912      	ldr	r1, [pc, #72]	@ (8000294 <getKeyInput+0xe8>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000250:	429a      	cmp	r2, r3
 8000252:	d010      	beq.n	8000276 <getKeyInput+0xca>
				KeyReg3[i] = KeyReg2[i];
 8000254:	4a0f      	ldr	r2, [pc, #60]	@ (8000294 <getKeyInput+0xe8>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <getKeyInput+0xf0>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg2[i] == PRESSED_STATE) { // nhấn thả
 8000264:	4a0b      	ldr	r2, [pc, #44]	@ (8000294 <getKeyInput+0xe8>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d102      	bne.n	8000276 <getKeyInput+0xca>
					//TODO
					subKeyProcess(i);
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f7ff ff85 	bl	8000180 <subKeyProcess>
	for (int i = 0; i < MAX_BUTTON; i++) {
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	3301      	adds	r3, #1
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b09      	cmp	r3, #9
 8000280:	ddca      	ble.n	8000218 <getKeyInput+0x6c>
			 KeyReg3[i] = NORMAL_STATE;	// Luôn để Key3 != Key2
			 }
			 }*/
		}
	}
}
 8000282:	bf00      	nop
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000064 	.word	0x20000064
 8000290:	2000003c 	.word	0x2000003c
 8000294:	2000008c 	.word	0x2000008c
 8000298:	40010800 	.word	0x40010800
 800029c:	200000b4 	.word	0x200000b4

080002a0 <scanLEDs>:
 *      Author: admin
 */

#include"fsm_automatic.h"
#include"led7_segment.h"
void scanLEDs() {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	updateClockBuffer();
 80002a4:	f000 fa4c 	bl	8000740 <updateClockBuffer>
	update7SEG_2(index_led_2++ % 2);
 80002a8:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <scanLEDs+0x48>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	1c5a      	adds	r2, r3, #1
 80002ae:	490e      	ldr	r1, [pc, #56]	@ (80002e8 <scanLEDs+0x48>)
 80002b0:	600a      	str	r2, [r1, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	f003 0301 	and.w	r3, r3, #1
 80002b8:	bfb8      	it	lt
 80002ba:	425b      	neglt	r3, r3
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fab7 	bl	8000830 <update7SEG_2>
	update7SEG_1(index_led_1++ % 2);
 80002c2:	4b0a      	ldr	r3, [pc, #40]	@ (80002ec <scanLEDs+0x4c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	1c5a      	adds	r2, r3, #1
 80002c8:	4908      	ldr	r1, [pc, #32]	@ (80002ec <scanLEDs+0x4c>)
 80002ca:	600a      	str	r2, [r1, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	f003 0301 	and.w	r3, r3, #1
 80002d2:	bfb8      	it	lt
 80002d4:	425b      	neglt	r3, r3
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fa72 	bl	80007c0 <update7SEG_1>
	setTimer(3, 25);
 80002dc:	2119      	movs	r1, #25
 80002de:	2003      	movs	r0, #3
 80002e0:	f001 f830 	bl	8001344 <setTimer>
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	2000010c 	.word	0x2000010c
 80002ec:	20000108 	.word	0x20000108

080002f0 <fsm_automatic_run>:
void fsm_automatic_run() {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	if (isTimerExpired(0) == 1) {
 80002f4:	2000      	movs	r0, #0
 80002f6:	f001 f83d 	bl	8001374 <isTimerExpired>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d107      	bne.n	8000310 <fsm_automatic_run+0x20>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000300:	2120      	movs	r1, #32
 8000302:	48b0      	ldr	r0, [pc, #704]	@ (80005c4 <fsm_automatic_run+0x2d4>)
 8000304:	f001 fc73 	bl	8001bee <HAL_GPIO_TogglePin>
		setTimer(0, 100);
 8000308:	2164      	movs	r1, #100	@ 0x64
 800030a:	2000      	movs	r0, #0
 800030c:	f001 f81a 	bl	8001344 <setTimer>
	}

	switch (status) {
 8000310:	4bad      	ldr	r3, [pc, #692]	@ (80005c8 <fsm_automatic_run+0x2d8>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	3b01      	subs	r3, #1
 8000316:	2b04      	cmp	r3, #4
 8000318:	f200 8149 	bhi.w	80005ae <fsm_automatic_run+0x2be>
 800031c:	a201      	add	r2, pc, #4	@ (adr r2, 8000324 <fsm_automatic_run+0x34>)
 800031e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000322:	bf00      	nop
 8000324:	08000339 	.word	0x08000339
 8000328:	0800036f 	.word	0x0800036f
 800032c:	080003fd 	.word	0x080003fd
 8000330:	08000491 	.word	0x08000491
 8000334:	0800051d 	.word	0x0800051d
	case INIT:
		turnOff_LED();
 8000338:	f001 f866 	bl	8001408 <turnOff_LED>

		status = RED_GREEN;
 800033c:	4ba2      	ldr	r3, [pc, #648]	@ (80005c8 <fsm_automatic_run+0x2d8>)
 800033e:	2202      	movs	r2, #2
 8000340:	601a      	str	r2, [r3, #0]

		setTimer(0, 100); //timer DOT
 8000342:	2164      	movs	r1, #100	@ 0x64
 8000344:	2000      	movs	r0, #0
 8000346:	f000 fffd 	bl	8001344 <setTimer>
		setTimer(1, TIME_GREEN * 100);
 800034a:	4ba0      	ldr	r3, [pc, #640]	@ (80005cc <fsm_automatic_run+0x2dc>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2264      	movs	r2, #100	@ 0x64
 8000350:	fb02 f303 	mul.w	r3, r2, r3
 8000354:	4619      	mov	r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	f000 fff4 	bl	8001344 <setTimer>
		setTimer(2, 100); // timer second
 800035c:	2164      	movs	r1, #100	@ 0x64
 800035e:	2002      	movs	r0, #2
 8000360:	f000 fff0 	bl	8001344 <setTimer>
		setTimer(3, 25); // timer scan
 8000364:	2119      	movs	r1, #25
 8000366:	2003      	movs	r0, #3
 8000368:	f000 ffec 	bl	8001344 <setTimer>
		break;
 800036c:	e128      	b.n	80005c0 <fsm_automatic_run+0x2d0>
	case RED_GREEN:
		turnOn_RED1();
 800036e:	f001 f873 	bl	8001458 <turnOn_RED1>
		turnOn_GREEN2();
 8000372:	f001 f8cb 	bl	800150c <turnOn_GREEN2>
		if (isTimerExpired(2) == 1) {
 8000376:	2002      	movs	r0, #2
 8000378:	f000 fffc 	bl	8001374 <isTimerExpired>
 800037c:	4603      	mov	r3, r0
 800037e:	2b01      	cmp	r3, #1
 8000380:	d10d      	bne.n	800039e <fsm_automatic_run+0xae>
			time_1--;
 8000382:	4b93      	ldr	r3, [pc, #588]	@ (80005d0 <fsm_automatic_run+0x2e0>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	3b01      	subs	r3, #1
 8000388:	4a91      	ldr	r2, [pc, #580]	@ (80005d0 <fsm_automatic_run+0x2e0>)
 800038a:	6013      	str	r3, [r2, #0]
			time_2--;
 800038c:	4b91      	ldr	r3, [pc, #580]	@ (80005d4 <fsm_automatic_run+0x2e4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	3b01      	subs	r3, #1
 8000392:	4a90      	ldr	r2, [pc, #576]	@ (80005d4 <fsm_automatic_run+0x2e4>)
 8000394:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 8000396:	2164      	movs	r1, #100	@ 0x64
 8000398:	2002      	movs	r0, #2
 800039a:	f000 ffd3 	bl	8001344 <setTimer>
		}
		if (isTimerExpired(3) == 1) {
 800039e:	2003      	movs	r0, #3
 80003a0:	f000 ffe8 	bl	8001374 <isTimerExpired>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d101      	bne.n	80003ae <fsm_automatic_run+0xbe>
			scanLEDs();
 80003aa:	f7ff ff79 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(1) == 1) {
 80003ae:	2001      	movs	r0, #1
 80003b0:	f000 ffe0 	bl	8001374 <isTimerExpired>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d110      	bne.n	80003dc <fsm_automatic_run+0xec>
			status = RED_YELLOW;
 80003ba:	4b83      	ldr	r3, [pc, #524]	@ (80005c8 <fsm_automatic_run+0x2d8>)
 80003bc:	2203      	movs	r2, #3
 80003be:	601a      	str	r2, [r3, #0]
			time_1 = TIME_YELLOW - 1;
 80003c0:	4b85      	ldr	r3, [pc, #532]	@ (80005d8 <fsm_automatic_run+0x2e8>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	3b01      	subs	r3, #1
 80003c6:	4a82      	ldr	r2, [pc, #520]	@ (80005d0 <fsm_automatic_run+0x2e0>)
 80003c8:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_YELLOW * 100);
 80003ca:	4b83      	ldr	r3, [pc, #524]	@ (80005d8 <fsm_automatic_run+0x2e8>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2264      	movs	r2, #100	@ 0x64
 80003d0:	fb02 f303 	mul.w	r3, r2, r3
 80003d4:	4619      	mov	r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	f000 ffb4 	bl	8001344 <setTimer>

		}

		if (isButtonPressed(0) == 1) {
 80003dc:	2000      	movs	r0, #0
 80003de:	f7ff feb5 	bl	800014c <isButtonPressed>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	f040 80e4 	bne.w	80005b2 <fsm_automatic_run+0x2c2>
			status = MAN_RED;
 80003ea:	4b77      	ldr	r3, [pc, #476]	@ (80005c8 <fsm_automatic_run+0x2d8>)
 80003ec:	220c      	movs	r2, #12
 80003ee:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 80003f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 ffa5 	bl	8001344 <setTimer>
		}

		break;
 80003fa:	e0da      	b.n	80005b2 <fsm_automatic_run+0x2c2>
	case RED_YELLOW:
		turnOn_YELLOW2();
 80003fc:	f001 f89e 	bl	800153c <turnOn_YELLOW2>
		if (isTimerExpired(2) == 1) {
 8000400:	2002      	movs	r0, #2
 8000402:	f000 ffb7 	bl	8001374 <isTimerExpired>
 8000406:	4603      	mov	r3, r0
 8000408:	2b01      	cmp	r3, #1
 800040a:	d10d      	bne.n	8000428 <fsm_automatic_run+0x138>
			time_1--;
 800040c:	4b70      	ldr	r3, [pc, #448]	@ (80005d0 <fsm_automatic_run+0x2e0>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	3b01      	subs	r3, #1
 8000412:	4a6f      	ldr	r2, [pc, #444]	@ (80005d0 <fsm_automatic_run+0x2e0>)
 8000414:	6013      	str	r3, [r2, #0]
			time_2--;
 8000416:	4b6f      	ldr	r3, [pc, #444]	@ (80005d4 <fsm_automatic_run+0x2e4>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	3b01      	subs	r3, #1
 800041c:	4a6d      	ldr	r2, [pc, #436]	@ (80005d4 <fsm_automatic_run+0x2e4>)
 800041e:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 8000420:	2164      	movs	r1, #100	@ 0x64
 8000422:	2002      	movs	r0, #2
 8000424:	f000 ff8e 	bl	8001344 <setTimer>
		}
		if (isTimerExpired(3) == 1) {
 8000428:	2003      	movs	r0, #3
 800042a:	f000 ffa3 	bl	8001374 <isTimerExpired>
 800042e:	4603      	mov	r3, r0
 8000430:	2b01      	cmp	r3, #1
 8000432:	d101      	bne.n	8000438 <fsm_automatic_run+0x148>
			scanLEDs();
 8000434:	f7ff ff34 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(1) == 1) {
 8000438:	2001      	movs	r0, #1
 800043a:	f000 ff9b 	bl	8001374 <isTimerExpired>
 800043e:	4603      	mov	r3, r0
 8000440:	2b01      	cmp	r3, #1
 8000442:	d115      	bne.n	8000470 <fsm_automatic_run+0x180>
			status = GREEN_RED;
 8000444:	4b60      	ldr	r3, [pc, #384]	@ (80005c8 <fsm_automatic_run+0x2d8>)
 8000446:	2204      	movs	r2, #4
 8000448:	601a      	str	r2, [r3, #0]
			time_1 = TIME_RED - 1;
 800044a:	4b64      	ldr	r3, [pc, #400]	@ (80005dc <fsm_automatic_run+0x2ec>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	3b01      	subs	r3, #1
 8000450:	4a5f      	ldr	r2, [pc, #380]	@ (80005d0 <fsm_automatic_run+0x2e0>)
 8000452:	6013      	str	r3, [r2, #0]
			time_2 = TIME_GREEN - 1;
 8000454:	4b5d      	ldr	r3, [pc, #372]	@ (80005cc <fsm_automatic_run+0x2dc>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	3b01      	subs	r3, #1
 800045a:	4a5e      	ldr	r2, [pc, #376]	@ (80005d4 <fsm_automatic_run+0x2e4>)
 800045c:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_GREEN * 100);
 800045e:	4b5b      	ldr	r3, [pc, #364]	@ (80005cc <fsm_automatic_run+0x2dc>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2264      	movs	r2, #100	@ 0x64
 8000464:	fb02 f303 	mul.w	r3, r2, r3
 8000468:	4619      	mov	r1, r3
 800046a:	2001      	movs	r0, #1
 800046c:	f000 ff6a 	bl	8001344 <setTimer>

		}
		if (isButtonPressed(0) == 1) {
 8000470:	2000      	movs	r0, #0
 8000472:	f7ff fe6b 	bl	800014c <isButtonPressed>
 8000476:	4603      	mov	r3, r0
 8000478:	2b01      	cmp	r3, #1
 800047a:	f040 809c 	bne.w	80005b6 <fsm_automatic_run+0x2c6>
			status = MAN_RED;
 800047e:	4b52      	ldr	r3, [pc, #328]	@ (80005c8 <fsm_automatic_run+0x2d8>)
 8000480:	220c      	movs	r2, #12
 8000482:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 8000484:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000488:	2001      	movs	r0, #1
 800048a:	f000 ff5b 	bl	8001344 <setTimer>
		}

		break;
 800048e:	e092      	b.n	80005b6 <fsm_automatic_run+0x2c6>
	case GREEN_RED:
		turnOn_GREEN1();
 8000490:	f000 fff8 	bl	8001484 <turnOn_GREEN1>
		turnOn_RED2();
 8000494:	f001 f822 	bl	80014dc <turnOn_RED2>
		if (isTimerExpired(2) == 1) {
 8000498:	2002      	movs	r0, #2
 800049a:	f000 ff6b 	bl	8001374 <isTimerExpired>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d10d      	bne.n	80004c0 <fsm_automatic_run+0x1d0>
			time_1--;
 80004a4:	4b4a      	ldr	r3, [pc, #296]	@ (80005d0 <fsm_automatic_run+0x2e0>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	4a49      	ldr	r2, [pc, #292]	@ (80005d0 <fsm_automatic_run+0x2e0>)
 80004ac:	6013      	str	r3, [r2, #0]
			time_2--;
 80004ae:	4b49      	ldr	r3, [pc, #292]	@ (80005d4 <fsm_automatic_run+0x2e4>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	3b01      	subs	r3, #1
 80004b4:	4a47      	ldr	r2, [pc, #284]	@ (80005d4 <fsm_automatic_run+0x2e4>)
 80004b6:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 80004b8:	2164      	movs	r1, #100	@ 0x64
 80004ba:	2002      	movs	r0, #2
 80004bc:	f000 ff42 	bl	8001344 <setTimer>
		}
		if (isTimerExpired(3) == 1) {
 80004c0:	2003      	movs	r0, #3
 80004c2:	f000 ff57 	bl	8001374 <isTimerExpired>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d101      	bne.n	80004d0 <fsm_automatic_run+0x1e0>
			scanLEDs();
 80004cc:	f7ff fee8 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(1) == 1) {
 80004d0:	2001      	movs	r0, #1
 80004d2:	f000 ff4f 	bl	8001374 <isTimerExpired>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d110      	bne.n	80004fe <fsm_automatic_run+0x20e>
			status = YELLOW_RED;
 80004dc:	4b3a      	ldr	r3, [pc, #232]	@ (80005c8 <fsm_automatic_run+0x2d8>)
 80004de:	2205      	movs	r2, #5
 80004e0:	601a      	str	r2, [r3, #0]
			time_2 = TIME_YELLOW - 1;
 80004e2:	4b3d      	ldr	r3, [pc, #244]	@ (80005d8 <fsm_automatic_run+0x2e8>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	4a3a      	ldr	r2, [pc, #232]	@ (80005d4 <fsm_automatic_run+0x2e4>)
 80004ea:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_YELLOW * 100);
 80004ec:	4b3a      	ldr	r3, [pc, #232]	@ (80005d8 <fsm_automatic_run+0x2e8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2264      	movs	r2, #100	@ 0x64
 80004f2:	fb02 f303 	mul.w	r3, r2, r3
 80004f6:	4619      	mov	r1, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	f000 ff23 	bl	8001344 <setTimer>

		}

		if (isButtonPressed(0) == 1) {
 80004fe:	2000      	movs	r0, #0
 8000500:	f7ff fe24 	bl	800014c <isButtonPressed>
 8000504:	4603      	mov	r3, r0
 8000506:	2b01      	cmp	r3, #1
 8000508:	d157      	bne.n	80005ba <fsm_automatic_run+0x2ca>
			status = MAN_RED;
 800050a:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <fsm_automatic_run+0x2d8>)
 800050c:	220c      	movs	r2, #12
 800050e:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 8000510:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000514:	2001      	movs	r0, #1
 8000516:	f000 ff15 	bl	8001344 <setTimer>
		}

		break;
 800051a:	e04e      	b.n	80005ba <fsm_automatic_run+0x2ca>
	case YELLOW_RED:
		turnOn_YELLOW1();
 800051c:	f000 ffc8 	bl	80014b0 <turnOn_YELLOW1>
		if (isTimerExpired(2) == 1) {
 8000520:	2002      	movs	r0, #2
 8000522:	f000 ff27 	bl	8001374 <isTimerExpired>
 8000526:	4603      	mov	r3, r0
 8000528:	2b01      	cmp	r3, #1
 800052a:	d10d      	bne.n	8000548 <fsm_automatic_run+0x258>
			time_1--;
 800052c:	4b28      	ldr	r3, [pc, #160]	@ (80005d0 <fsm_automatic_run+0x2e0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3b01      	subs	r3, #1
 8000532:	4a27      	ldr	r2, [pc, #156]	@ (80005d0 <fsm_automatic_run+0x2e0>)
 8000534:	6013      	str	r3, [r2, #0]
			time_2--;
 8000536:	4b27      	ldr	r3, [pc, #156]	@ (80005d4 <fsm_automatic_run+0x2e4>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	3b01      	subs	r3, #1
 800053c:	4a25      	ldr	r2, [pc, #148]	@ (80005d4 <fsm_automatic_run+0x2e4>)
 800053e:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 8000540:	2164      	movs	r1, #100	@ 0x64
 8000542:	2002      	movs	r0, #2
 8000544:	f000 fefe 	bl	8001344 <setTimer>
		}
		if (isTimerExpired(3) == 1) {
 8000548:	2003      	movs	r0, #3
 800054a:	f000 ff13 	bl	8001374 <isTimerExpired>
 800054e:	4603      	mov	r3, r0
 8000550:	2b01      	cmp	r3, #1
 8000552:	d101      	bne.n	8000558 <fsm_automatic_run+0x268>
			scanLEDs();
 8000554:	f7ff fea4 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(1) == 1) {
 8000558:	2001      	movs	r0, #1
 800055a:	f000 ff0b 	bl	8001374 <isTimerExpired>
 800055e:	4603      	mov	r3, r0
 8000560:	2b01      	cmp	r3, #1
 8000562:	d115      	bne.n	8000590 <fsm_automatic_run+0x2a0>
			status = RED_GREEN;
 8000564:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <fsm_automatic_run+0x2d8>)
 8000566:	2202      	movs	r2, #2
 8000568:	601a      	str	r2, [r3, #0]
			time_1 = TIME_GREEN - 1;
 800056a:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <fsm_automatic_run+0x2dc>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	3b01      	subs	r3, #1
 8000570:	4a17      	ldr	r2, [pc, #92]	@ (80005d0 <fsm_automatic_run+0x2e0>)
 8000572:	6013      	str	r3, [r2, #0]
			time_2 = TIME_RED - 1;
 8000574:	4b19      	ldr	r3, [pc, #100]	@ (80005dc <fsm_automatic_run+0x2ec>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3b01      	subs	r3, #1
 800057a:	4a16      	ldr	r2, [pc, #88]	@ (80005d4 <fsm_automatic_run+0x2e4>)
 800057c:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_GREEN * 100);
 800057e:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <fsm_automatic_run+0x2dc>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2264      	movs	r2, #100	@ 0x64
 8000584:	fb02 f303 	mul.w	r3, r2, r3
 8000588:	4619      	mov	r1, r3
 800058a:	2001      	movs	r0, #1
 800058c:	f000 feda 	bl	8001344 <setTimer>

		}
		if (isButtonPressed(0) == 1) {
 8000590:	2000      	movs	r0, #0
 8000592:	f7ff fddb 	bl	800014c <isButtonPressed>
 8000596:	4603      	mov	r3, r0
 8000598:	2b01      	cmp	r3, #1
 800059a:	d110      	bne.n	80005be <fsm_automatic_run+0x2ce>
			status = MAN_RED;
 800059c:	4b0a      	ldr	r3, [pc, #40]	@ (80005c8 <fsm_automatic_run+0x2d8>)
 800059e:	220c      	movs	r2, #12
 80005a0:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 80005a2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005a6:	2001      	movs	r0, #1
 80005a8:	f000 fecc 	bl	8001344 <setTimer>
		}
		break;
 80005ac:	e007      	b.n	80005be <fsm_automatic_run+0x2ce>
	default:
		break;
 80005ae:	bf00      	nop
 80005b0:	e006      	b.n	80005c0 <fsm_automatic_run+0x2d0>
		break;
 80005b2:	bf00      	nop
 80005b4:	e004      	b.n	80005c0 <fsm_automatic_run+0x2d0>
		break;
 80005b6:	bf00      	nop
 80005b8:	e002      	b.n	80005c0 <fsm_automatic_run+0x2d0>
		break;
 80005ba:	bf00      	nop
 80005bc:	e000      	b.n	80005c0 <fsm_automatic_run+0x2d0>
		break;
 80005be:	bf00      	nop
	}
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40010800 	.word	0x40010800
 80005c8:	20000104 	.word	0x20000104
 80005cc:	20000008 	.word	0x20000008
 80005d0:	2000000c 	.word	0x2000000c
 80005d4:	20000010 	.word	0x20000010
 80005d8:	20000004 	.word	0x20000004
 80005dc:	20000000 	.word	0x20000000

080005e0 <fsm_manual_run>:
 *  Created on: Oct 27, 2024
 *      Author: admin
 */

#include"fsm_manual.h"
void fsm_manual_run() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	switch (status) {
 80005e4:	4b50      	ldr	r3, [pc, #320]	@ (8000728 <fsm_manual_run+0x148>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b0e      	cmp	r3, #14
 80005ea:	d069      	beq.n	80006c0 <fsm_manual_run+0xe0>
 80005ec:	2b0e      	cmp	r3, #14
 80005ee:	f300 8098 	bgt.w	8000722 <fsm_manual_run+0x142>
 80005f2:	2b0c      	cmp	r3, #12
 80005f4:	d002      	beq.n	80005fc <fsm_manual_run+0x1c>
 80005f6:	2b0d      	cmp	r3, #13
 80005f8:	d031      	beq.n	800065e <fsm_manual_run+0x7e>
		if (isButtonPressed(1) == 1) {

		}
		break;
	default:
		break;
 80005fa:	e092      	b.n	8000722 <fsm_manual_run+0x142>
		turnOn_RED1();
 80005fc:	f000 ff2c 	bl	8001458 <turnOn_RED1>
		turnOn_RED2();
 8000600:	f000 ff6c 	bl	80014dc <turnOn_RED2>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800060a:	4848      	ldr	r0, [pc, #288]	@ (800072c <fsm_manual_run+0x14c>)
 800060c:	f001 fad7 	bl	8001bbe <HAL_GPIO_WritePin>
		display7SEG_2(2);
 8000610:	2002      	movs	r0, #2
 8000612:	f000 faf7 	bl	8000c04 <display7SEG_2>
		if (isTimerExpired(1) == 1) {
 8000616:	2001      	movs	r0, #1
 8000618:	f000 feac 	bl	8001374 <isTimerExpired>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d10b      	bne.n	800063a <fsm_manual_run+0x5a>
			status = RED_GREEN;
 8000622:	4b41      	ldr	r3, [pc, #260]	@ (8000728 <fsm_manual_run+0x148>)
 8000624:	2202      	movs	r2, #2
 8000626:	601a      	str	r2, [r3, #0]
			setTimer(1, TIME_GREEN * 100);
 8000628:	4b41      	ldr	r3, [pc, #260]	@ (8000730 <fsm_manual_run+0x150>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2264      	movs	r2, #100	@ 0x64
 800062e:	fb02 f303 	mul.w	r3, r2, r3
 8000632:	4619      	mov	r1, r3
 8000634:	2001      	movs	r0, #1
 8000636:	f000 fe85 	bl	8001344 <setTimer>
		if (isButtonPressed(0) == 1) {
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff fd86 	bl	800014c <isButtonPressed>
 8000640:	4603      	mov	r3, r0
 8000642:	2b01      	cmp	r3, #1
 8000644:	d107      	bne.n	8000656 <fsm_manual_run+0x76>
			status = MAN_YELLOW;
 8000646:	4b38      	ldr	r3, [pc, #224]	@ (8000728 <fsm_manual_run+0x148>)
 8000648:	220e      	movs	r2, #14
 800064a:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 800064c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000650:	2001      	movs	r0, #1
 8000652:	f000 fe77 	bl	8001344 <setTimer>
		if (isButtonPressed(1) == 1) {
 8000656:	2001      	movs	r0, #1
 8000658:	f7ff fd78 	bl	800014c <isButtonPressed>
		break;
 800065c:	e062      	b.n	8000724 <fsm_manual_run+0x144>
		turnOn_GREEN1();
 800065e:	f000 ff11 	bl	8001484 <turnOn_GREEN1>
		turnOn_GREEN2();
 8000662:	f000 ff53 	bl	800150c <turnOn_GREEN2>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066c:	482f      	ldr	r0, [pc, #188]	@ (800072c <fsm_manual_run+0x14c>)
 800066e:	f001 faa6 	bl	8001bbe <HAL_GPIO_WritePin>
		display7SEG_2(4);
 8000672:	2004      	movs	r0, #4
 8000674:	f000 fac6 	bl	8000c04 <display7SEG_2>
		if (isTimerExpired(1) == 1) {
 8000678:	2001      	movs	r0, #1
 800067a:	f000 fe7b 	bl	8001374 <isTimerExpired>
 800067e:	4603      	mov	r3, r0
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10b      	bne.n	800069c <fsm_manual_run+0xbc>
			status = RED_GREEN;
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <fsm_manual_run+0x148>)
 8000686:	2202      	movs	r2, #2
 8000688:	601a      	str	r2, [r3, #0]
			setTimer(1, TIME_GREEN * 100);
 800068a:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <fsm_manual_run+0x150>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2264      	movs	r2, #100	@ 0x64
 8000690:	fb02 f303 	mul.w	r3, r2, r3
 8000694:	4619      	mov	r1, r3
 8000696:	2001      	movs	r0, #1
 8000698:	f000 fe54 	bl	8001344 <setTimer>
		if (isButtonPressed(0) == 1) {
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff fd55 	bl	800014c <isButtonPressed>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d107      	bne.n	80006b8 <fsm_manual_run+0xd8>
			status = INIT;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <fsm_manual_run+0x148>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 80006ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006b2:	2001      	movs	r0, #1
 80006b4:	f000 fe46 	bl	8001344 <setTimer>
		if (isButtonPressed(1) == 1) {
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff fd47 	bl	800014c <isButtonPressed>
		break;
 80006be:	e031      	b.n	8000724 <fsm_manual_run+0x144>
		turnOn_YELLOW1();
 80006c0:	f000 fef6 	bl	80014b0 <turnOn_YELLOW1>
		turnOn_YELLOW2();
 80006c4:	f000 ff3a 	bl	800153c <turnOn_YELLOW2>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ce:	4817      	ldr	r0, [pc, #92]	@ (800072c <fsm_manual_run+0x14c>)
 80006d0:	f001 fa75 	bl	8001bbe <HAL_GPIO_WritePin>
		display7SEG_2(3);
 80006d4:	2003      	movs	r0, #3
 80006d6:	f000 fa95 	bl	8000c04 <display7SEG_2>
		if (isTimerExpired(1) == 1) {
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 fe4a 	bl	8001374 <isTimerExpired>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d10b      	bne.n	80006fe <fsm_manual_run+0x11e>
			status = RED_GREEN;
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <fsm_manual_run+0x148>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	601a      	str	r2, [r3, #0]
			setTimer(1, TIME_GREEN * 100);
 80006ec:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <fsm_manual_run+0x150>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2264      	movs	r2, #100	@ 0x64
 80006f2:	fb02 f303 	mul.w	r3, r2, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2001      	movs	r0, #1
 80006fa:	f000 fe23 	bl	8001344 <setTimer>
		if (isButtonPressed(0) == 1) {
 80006fe:	2000      	movs	r0, #0
 8000700:	f7ff fd24 	bl	800014c <isButtonPressed>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	d107      	bne.n	800071a <fsm_manual_run+0x13a>
			status = MAN_GREEN;
 800070a:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <fsm_manual_run+0x148>)
 800070c:	220d      	movs	r2, #13
 800070e:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 8000710:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000714:	2001      	movs	r0, #1
 8000716:	f000 fe15 	bl	8001344 <setTimer>
		if (isButtonPressed(1) == 1) {
 800071a:	2001      	movs	r0, #1
 800071c:	f7ff fd16 	bl	800014c <isButtonPressed>
		break;
 8000720:	e000      	b.n	8000724 <fsm_manual_run+0x144>
		break;
 8000722:	bf00      	nop
	}
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000104 	.word	0x20000104
 800072c:	40010800 	.word	0x40010800
 8000730:	20000008 	.word	0x20000008

08000734 <fsm_setting>:
 *  Created on: Oct 27, 2024
 *      Author: admin
 */
#include"fsm_setting.h"
int counter=0;
void fsm_setting(){
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <updateClockBuffer>:
 *      Author: admin
 */
#include"led7_segment.h"
int led_buffer[4] = { 0, 0, 0, 0 };

void updateClockBuffer() {
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	led_buffer[0] = time_1 / 10;
 8000744:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <updateClockBuffer+0x70>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1a      	ldr	r2, [pc, #104]	@ (80007b4 <updateClockBuffer+0x74>)
 800074a:	fb82 1203 	smull	r1, r2, r2, r3
 800074e:	1092      	asrs	r2, r2, #2
 8000750:	17db      	asrs	r3, r3, #31
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	4a18      	ldr	r2, [pc, #96]	@ (80007b8 <updateClockBuffer+0x78>)
 8000756:	6013      	str	r3, [r2, #0]
	led_buffer[1] = time_1 % 10;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <updateClockBuffer+0x70>)
 800075a:	6819      	ldr	r1, [r3, #0]
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <updateClockBuffer+0x74>)
 800075e:	fb83 2301 	smull	r2, r3, r3, r1
 8000762:	109a      	asrs	r2, r3, #2
 8000764:	17cb      	asrs	r3, r1, #31
 8000766:	1ad2      	subs	r2, r2, r3
 8000768:	4613      	mov	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	1aca      	subs	r2, r1, r3
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <updateClockBuffer+0x78>)
 8000774:	605a      	str	r2, [r3, #4]
	led_buffer[2] = time_2 / 10;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <updateClockBuffer+0x7c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <updateClockBuffer+0x74>)
 800077c:	fb82 1203 	smull	r1, r2, r2, r3
 8000780:	1092      	asrs	r2, r2, #2
 8000782:	17db      	asrs	r3, r3, #31
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	4a0c      	ldr	r2, [pc, #48]	@ (80007b8 <updateClockBuffer+0x78>)
 8000788:	6093      	str	r3, [r2, #8]
	led_buffer[3] = time_2 % 10;
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <updateClockBuffer+0x7c>)
 800078c:	6819      	ldr	r1, [r3, #0]
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <updateClockBuffer+0x74>)
 8000790:	fb83 2301 	smull	r2, r3, r3, r1
 8000794:	109a      	asrs	r2, r3, #2
 8000796:	17cb      	asrs	r3, r1, #31
 8000798:	1ad2      	subs	r2, r2, r3
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	1aca      	subs	r2, r1, r3
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <updateClockBuffer+0x78>)
 80007a6:	60da      	str	r2, [r3, #12]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	2000000c 	.word	0x2000000c
 80007b4:	66666667 	.word	0x66666667
 80007b8:	20000110 	.word	0x20000110
 80007bc:	20000010 	.word	0x20000010

080007c0 <update7SEG_1>:
void update7SEG_1(int index) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

	switch (index) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d003      	beq.n	80007d6 <update7SEG_1+0x16>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d012      	beq.n	80007fa <update7SEG_1+0x3a>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
		display7SEG_1(led_buffer[1]);
		break;
	default:
		break;
 80007d4:	e023      	b.n	800081e <update7SEG_1+0x5e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007dc:	4812      	ldr	r0, [pc, #72]	@ (8000828 <update7SEG_1+0x68>)
 80007de:	f001 f9ee 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e8:	480f      	ldr	r0, [pc, #60]	@ (8000828 <update7SEG_1+0x68>)
 80007ea:	f001 f9e8 	bl	8001bbe <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer[0]);
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <update7SEG_1+0x6c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f854 	bl	80008a0 <display7SEG_1>
		break;
 80007f8:	e011      	b.n	800081e <update7SEG_1+0x5e>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000800:	4809      	ldr	r0, [pc, #36]	@ (8000828 <update7SEG_1+0x68>)
 8000802:	f001 f9dc 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800080c:	4806      	ldr	r0, [pc, #24]	@ (8000828 <update7SEG_1+0x68>)
 800080e:	f001 f9d6 	bl	8001bbe <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer[1]);
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <update7SEG_1+0x6c>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f842 	bl	80008a0 <display7SEG_1>
		break;
 800081c:	bf00      	nop
	}
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40010800 	.word	0x40010800
 800082c:	20000110 	.word	0x20000110

08000830 <update7SEG_2>:
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
}
void update7SEG_2(int index) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

	switch (index) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <update7SEG_2+0x16>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d012      	beq.n	800086a <update7SEG_2+0x3a>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
		display7SEG_2(led_buffer[3]);
		break;
	default:
		break;
 8000844:	e023      	b.n	800088e <update7SEG_2+0x5e>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800084c:	4812      	ldr	r0, [pc, #72]	@ (8000898 <update7SEG_2+0x68>)
 800084e:	f001 f9b6 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000858:	480f      	ldr	r0, [pc, #60]	@ (8000898 <update7SEG_2+0x68>)
 800085a:	f001 f9b0 	bl	8001bbe <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer[2]);
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <update7SEG_2+0x6c>)
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f9ce 	bl	8000c04 <display7SEG_2>
		break;
 8000868:	e011      	b.n	800088e <update7SEG_2+0x5e>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000870:	4809      	ldr	r0, [pc, #36]	@ (8000898 <update7SEG_2+0x68>)
 8000872:	f001 f9a4 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000876:	2201      	movs	r2, #1
 8000878:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800087c:	4806      	ldr	r0, [pc, #24]	@ (8000898 <update7SEG_2+0x68>)
 800087e:	f001 f99e 	bl	8001bbe <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer[3]);
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <update7SEG_2+0x6c>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f9bc 	bl	8000c04 <display7SEG_2>
		break;
 800088c:	bf00      	nop
	}
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40010800 	.word	0x40010800
 800089c:	20000110 	.word	0x20000110

080008a0 <display7SEG_1>:
void display7SEG_1(int num) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	switch (num) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b09      	cmp	r3, #9
 80008ac:	f200 8180 	bhi.w	8000bb0 <display7SEG_1+0x310>
 80008b0:	a201      	add	r2, pc, #4	@ (adr r2, 80008b8 <display7SEG_1+0x18>)
 80008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b6:	bf00      	nop
 80008b8:	080008e1 	.word	0x080008e1
 80008bc:	08000929 	.word	0x08000929
 80008c0:	08000971 	.word	0x08000971
 80008c4:	080009b9 	.word	0x080009b9
 80008c8:	08000a01 	.word	0x08000a01
 80008cc:	08000a49 	.word	0x08000a49
 80008d0:	08000a91 	.word	0x08000a91
 80008d4:	08000ad9 	.word	0x08000ad9
 80008d8:	08000b21 	.word	0x08000b21
 80008dc:	08000b69 	.word	0x08000b69
	case 0:
		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2101      	movs	r1, #1
 80008e4:	48c6      	ldr	r0, [pc, #792]	@ (8000c00 <display7SEG_1+0x360>)
 80008e6:	f001 f96a 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2102      	movs	r1, #2
 80008ee:	48c4      	ldr	r0, [pc, #784]	@ (8000c00 <display7SEG_1+0x360>)
 80008f0:	f001 f965 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2104      	movs	r1, #4
 80008f8:	48c1      	ldr	r0, [pc, #772]	@ (8000c00 <display7SEG_1+0x360>)
 80008fa:	f001 f960 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2108      	movs	r1, #8
 8000902:	48bf      	ldr	r0, [pc, #764]	@ (8000c00 <display7SEG_1+0x360>)
 8000904:	f001 f95b 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2110      	movs	r1, #16
 800090c:	48bc      	ldr	r0, [pc, #752]	@ (8000c00 <display7SEG_1+0x360>)
 800090e:	f001 f956 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	48ba      	ldr	r0, [pc, #744]	@ (8000c00 <display7SEG_1+0x360>)
 8000918:	f001 f951 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2140      	movs	r1, #64	@ 0x40
 8000920:	48b7      	ldr	r0, [pc, #732]	@ (8000c00 <display7SEG_1+0x360>)
 8000922:	f001 f94c 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000926:	e167      	b.n	8000bf8 <display7SEG_1+0x358>

	case 1:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2101      	movs	r1, #1
 800092c:	48b4      	ldr	r0, [pc, #720]	@ (8000c00 <display7SEG_1+0x360>)
 800092e:	f001 f946 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000932:	2201      	movs	r2, #1
 8000934:	2108      	movs	r1, #8
 8000936:	48b2      	ldr	r0, [pc, #712]	@ (8000c00 <display7SEG_1+0x360>)
 8000938:	f001 f941 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2110      	movs	r1, #16
 8000940:	48af      	ldr	r0, [pc, #700]	@ (8000c00 <display7SEG_1+0x360>)
 8000942:	f001 f93c 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2120      	movs	r1, #32
 800094a:	48ad      	ldr	r0, [pc, #692]	@ (8000c00 <display7SEG_1+0x360>)
 800094c:	f001 f937 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2140      	movs	r1, #64	@ 0x40
 8000954:	48aa      	ldr	r0, [pc, #680]	@ (8000c00 <display7SEG_1+0x360>)
 8000956:	f001 f932 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2102      	movs	r1, #2
 800095e:	48a8      	ldr	r0, [pc, #672]	@ (8000c00 <display7SEG_1+0x360>)
 8000960:	f001 f92d 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2104      	movs	r1, #4
 8000968:	48a5      	ldr	r0, [pc, #660]	@ (8000c00 <display7SEG_1+0x360>)
 800096a:	f001 f928 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 800096e:	e143      	b.n	8000bf8 <display7SEG_1+0x358>

	case 2:

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2104      	movs	r1, #4
 8000974:	48a2      	ldr	r0, [pc, #648]	@ (8000c00 <display7SEG_1+0x360>)
 8000976:	f001 f922 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2120      	movs	r1, #32
 800097e:	48a0      	ldr	r0, [pc, #640]	@ (8000c00 <display7SEG_1+0x360>)
 8000980:	f001 f91d 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2101      	movs	r1, #1
 8000988:	489d      	ldr	r0, [pc, #628]	@ (8000c00 <display7SEG_1+0x360>)
 800098a:	f001 f918 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2102      	movs	r1, #2
 8000992:	489b      	ldr	r0, [pc, #620]	@ (8000c00 <display7SEG_1+0x360>)
 8000994:	f001 f913 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2108      	movs	r1, #8
 800099c:	4898      	ldr	r0, [pc, #608]	@ (8000c00 <display7SEG_1+0x360>)
 800099e:	f001 f90e 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2110      	movs	r1, #16
 80009a6:	4896      	ldr	r0, [pc, #600]	@ (8000c00 <display7SEG_1+0x360>)
 80009a8:	f001 f909 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2140      	movs	r1, #64	@ 0x40
 80009b0:	4893      	ldr	r0, [pc, #588]	@ (8000c00 <display7SEG_1+0x360>)
 80009b2:	f001 f904 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 80009b6:	e11f      	b.n	8000bf8 <display7SEG_1+0x358>

	case 3:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2110      	movs	r1, #16
 80009bc:	4890      	ldr	r0, [pc, #576]	@ (8000c00 <display7SEG_1+0x360>)
 80009be:	f001 f8fe 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2120      	movs	r1, #32
 80009c6:	488e      	ldr	r0, [pc, #568]	@ (8000c00 <display7SEG_1+0x360>)
 80009c8:	f001 f8f9 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2104      	movs	r1, #4
 80009d0:	488b      	ldr	r0, [pc, #556]	@ (8000c00 <display7SEG_1+0x360>)
 80009d2:	f001 f8f4 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2101      	movs	r1, #1
 80009da:	4889      	ldr	r0, [pc, #548]	@ (8000c00 <display7SEG_1+0x360>)
 80009dc:	f001 f8ef 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2102      	movs	r1, #2
 80009e4:	4886      	ldr	r0, [pc, #536]	@ (8000c00 <display7SEG_1+0x360>)
 80009e6:	f001 f8ea 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2108      	movs	r1, #8
 80009ee:	4884      	ldr	r0, [pc, #528]	@ (8000c00 <display7SEG_1+0x360>)
 80009f0:	f001 f8e5 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2140      	movs	r1, #64	@ 0x40
 80009f8:	4881      	ldr	r0, [pc, #516]	@ (8000c00 <display7SEG_1+0x360>)
 80009fa:	f001 f8e0 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 80009fe:	e0fb      	b.n	8000bf8 <display7SEG_1+0x358>

	case 4:

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2120      	movs	r1, #32
 8000a04:	487e      	ldr	r0, [pc, #504]	@ (8000c00 <display7SEG_1+0x360>)
 8000a06:	f001 f8da 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2140      	movs	r1, #64	@ 0x40
 8000a0e:	487c      	ldr	r0, [pc, #496]	@ (8000c00 <display7SEG_1+0x360>)
 8000a10:	f001 f8d5 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2102      	movs	r1, #2
 8000a18:	4879      	ldr	r0, [pc, #484]	@ (8000c00 <display7SEG_1+0x360>)
 8000a1a:	f001 f8d0 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2104      	movs	r1, #4
 8000a22:	4877      	ldr	r0, [pc, #476]	@ (8000c00 <display7SEG_1+0x360>)
 8000a24:	f001 f8cb 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4874      	ldr	r0, [pc, #464]	@ (8000c00 <display7SEG_1+0x360>)
 8000a2e:	f001 f8c6 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2108      	movs	r1, #8
 8000a36:	4872      	ldr	r0, [pc, #456]	@ (8000c00 <display7SEG_1+0x360>)
 8000a38:	f001 f8c1 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2110      	movs	r1, #16
 8000a40:	486f      	ldr	r0, [pc, #444]	@ (8000c00 <display7SEG_1+0x360>)
 8000a42:	f001 f8bc 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000a46:	e0d7      	b.n	8000bf8 <display7SEG_1+0x358>

	case 5:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	486c      	ldr	r0, [pc, #432]	@ (8000c00 <display7SEG_1+0x360>)
 8000a4e:	f001 f8b6 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2108      	movs	r1, #8
 8000a56:	486a      	ldr	r0, [pc, #424]	@ (8000c00 <display7SEG_1+0x360>)
 8000a58:	f001 f8b1 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2120      	movs	r1, #32
 8000a60:	4867      	ldr	r0, [pc, #412]	@ (8000c00 <display7SEG_1+0x360>)
 8000a62:	f001 f8ac 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2140      	movs	r1, #64	@ 0x40
 8000a6a:	4865      	ldr	r0, [pc, #404]	@ (8000c00 <display7SEG_1+0x360>)
 8000a6c:	f001 f8a7 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2104      	movs	r1, #4
 8000a74:	4862      	ldr	r0, [pc, #392]	@ (8000c00 <display7SEG_1+0x360>)
 8000a76:	f001 f8a2 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	4860      	ldr	r0, [pc, #384]	@ (8000c00 <display7SEG_1+0x360>)
 8000a80:	f001 f89d 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2110      	movs	r1, #16
 8000a88:	485d      	ldr	r0, [pc, #372]	@ (8000c00 <display7SEG_1+0x360>)
 8000a8a:	f001 f898 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000a8e:	e0b3      	b.n	8000bf8 <display7SEG_1+0x358>

	case 6:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2110      	movs	r1, #16
 8000a94:	485a      	ldr	r0, [pc, #360]	@ (8000c00 <display7SEG_1+0x360>)
 8000a96:	f001 f892 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4858      	ldr	r0, [pc, #352]	@ (8000c00 <display7SEG_1+0x360>)
 8000aa0:	f001 f88d 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	4855      	ldr	r0, [pc, #340]	@ (8000c00 <display7SEG_1+0x360>)
 8000aaa:	f001 f888 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	4853      	ldr	r0, [pc, #332]	@ (8000c00 <display7SEG_1+0x360>)
 8000ab4:	f001 f883 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2140      	movs	r1, #64	@ 0x40
 8000abc:	4850      	ldr	r0, [pc, #320]	@ (8000c00 <display7SEG_1+0x360>)
 8000abe:	f001 f87e 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	484e      	ldr	r0, [pc, #312]	@ (8000c00 <display7SEG_1+0x360>)
 8000ac8:	f001 f879 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2102      	movs	r1, #2
 8000ad0:	484b      	ldr	r0, [pc, #300]	@ (8000c00 <display7SEG_1+0x360>)
 8000ad2:	f001 f874 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000ad6:	e08f      	b.n	8000bf8 <display7SEG_1+0x358>

	case 7:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2110      	movs	r1, #16
 8000adc:	4848      	ldr	r0, [pc, #288]	@ (8000c00 <display7SEG_1+0x360>)
 8000ade:	f001 f86e 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4846      	ldr	r0, [pc, #280]	@ (8000c00 <display7SEG_1+0x360>)
 8000ae8:	f001 f869 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2108      	movs	r1, #8
 8000af0:	4843      	ldr	r0, [pc, #268]	@ (8000c00 <display7SEG_1+0x360>)
 8000af2:	f001 f864 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2140      	movs	r1, #64	@ 0x40
 8000afa:	4841      	ldr	r0, [pc, #260]	@ (8000c00 <display7SEG_1+0x360>)
 8000afc:	f001 f85f 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2102      	movs	r1, #2
 8000b04:	483e      	ldr	r0, [pc, #248]	@ (8000c00 <display7SEG_1+0x360>)
 8000b06:	f001 f85a 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	483c      	ldr	r0, [pc, #240]	@ (8000c00 <display7SEG_1+0x360>)
 8000b10:	f001 f855 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2104      	movs	r1, #4
 8000b18:	4839      	ldr	r0, [pc, #228]	@ (8000c00 <display7SEG_1+0x360>)
 8000b1a:	f001 f850 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000b1e:	e06b      	b.n	8000bf8 <display7SEG_1+0x358>

	case 8:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2110      	movs	r1, #16
 8000b24:	4836      	ldr	r0, [pc, #216]	@ (8000c00 <display7SEG_1+0x360>)
 8000b26:	f001 f84a 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	4834      	ldr	r0, [pc, #208]	@ (8000c00 <display7SEG_1+0x360>)
 8000b30:	f001 f845 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2108      	movs	r1, #8
 8000b38:	4831      	ldr	r0, [pc, #196]	@ (8000c00 <display7SEG_1+0x360>)
 8000b3a:	f001 f840 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2140      	movs	r1, #64	@ 0x40
 8000b42:	482f      	ldr	r0, [pc, #188]	@ (8000c00 <display7SEG_1+0x360>)
 8000b44:	f001 f83b 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	482c      	ldr	r0, [pc, #176]	@ (8000c00 <display7SEG_1+0x360>)
 8000b4e:	f001 f836 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2102      	movs	r1, #2
 8000b56:	482a      	ldr	r0, [pc, #168]	@ (8000c00 <display7SEG_1+0x360>)
 8000b58:	f001 f831 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2104      	movs	r1, #4
 8000b60:	4827      	ldr	r0, [pc, #156]	@ (8000c00 <display7SEG_1+0x360>)
 8000b62:	f001 f82c 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000b66:	e047      	b.n	8000bf8 <display7SEG_1+0x358>

	case 9:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	4824      	ldr	r0, [pc, #144]	@ (8000c00 <display7SEG_1+0x360>)
 8000b6e:	f001 f826 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2101      	movs	r1, #1
 8000b76:	4822      	ldr	r0, [pc, #136]	@ (8000c00 <display7SEG_1+0x360>)
 8000b78:	f001 f821 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2102      	movs	r1, #2
 8000b80:	481f      	ldr	r0, [pc, #124]	@ (8000c00 <display7SEG_1+0x360>)
 8000b82:	f001 f81c 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2104      	movs	r1, #4
 8000b8a:	481d      	ldr	r0, [pc, #116]	@ (8000c00 <display7SEG_1+0x360>)
 8000b8c:	f001 f817 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2108      	movs	r1, #8
 8000b94:	481a      	ldr	r0, [pc, #104]	@ (8000c00 <display7SEG_1+0x360>)
 8000b96:	f001 f812 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2140      	movs	r1, #64	@ 0x40
 8000b9e:	4818      	ldr	r0, [pc, #96]	@ (8000c00 <display7SEG_1+0x360>)
 8000ba0:	f001 f80d 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	4815      	ldr	r0, [pc, #84]	@ (8000c00 <display7SEG_1+0x360>)
 8000baa:	f001 f808 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000bae:	e023      	b.n	8000bf8 <display7SEG_1+0x358>

	default:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4812      	ldr	r0, [pc, #72]	@ (8000c00 <display7SEG_1+0x360>)
 8000bb6:	f001 f802 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4810      	ldr	r0, [pc, #64]	@ (8000c00 <display7SEG_1+0x360>)
 8000bc0:	f000 fffd 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	480d      	ldr	r0, [pc, #52]	@ (8000c00 <display7SEG_1+0x360>)
 8000bca:	f000 fff8 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2108      	movs	r1, #8
 8000bd2:	480b      	ldr	r0, [pc, #44]	@ (8000c00 <display7SEG_1+0x360>)
 8000bd4:	f000 fff3 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	4808      	ldr	r0, [pc, #32]	@ (8000c00 <display7SEG_1+0x360>)
 8000bde:	f000 ffee 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2120      	movs	r1, #32
 8000be6:	4806      	ldr	r0, [pc, #24]	@ (8000c00 <display7SEG_1+0x360>)
 8000be8:	f000 ffe9 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2140      	movs	r1, #64	@ 0x40
 8000bf0:	4803      	ldr	r0, [pc, #12]	@ (8000c00 <display7SEG_1+0x360>)
 8000bf2:	f000 ffe4 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000bf6:	bf00      	nop
	}

}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40010c00 	.word	0x40010c00

08000c04 <display7SEG_2>:
void display7SEG_2(int num) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b09      	cmp	r3, #9
 8000c10:	f200 81be 	bhi.w	8000f90 <display7SEG_2+0x38c>
 8000c14:	a201      	add	r2, pc, #4	@ (adr r2, 8000c1c <display7SEG_2+0x18>)
 8000c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1a:	bf00      	nop
 8000c1c:	08000c45 	.word	0x08000c45
 8000c20:	08000c99 	.word	0x08000c99
 8000c24:	08000ced 	.word	0x08000ced
 8000c28:	08000d41 	.word	0x08000d41
 8000c2c:	08000d95 	.word	0x08000d95
 8000c30:	08000de9 	.word	0x08000de9
 8000c34:	08000e3d 	.word	0x08000e3d
 8000c38:	08000e91 	.word	0x08000e91
 8000c3c:	08000ee5 	.word	0x08000ee5
 8000c40:	08000f39 	.word	0x08000f39

	case 0:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2180      	movs	r1, #128	@ 0x80
 8000c48:	48d0      	ldr	r0, [pc, #832]	@ (8000f8c <display7SEG_2+0x388>)
 8000c4a:	f000 ffb8 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c54:	48cd      	ldr	r0, [pc, #820]	@ (8000f8c <display7SEG_2+0x388>)
 8000c56:	f000 ffb2 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c60:	48ca      	ldr	r0, [pc, #808]	@ (8000f8c <display7SEG_2+0x388>)
 8000c62:	f000 ffac 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c6c:	48c7      	ldr	r0, [pc, #796]	@ (8000f8c <display7SEG_2+0x388>)
 8000c6e:	f000 ffa6 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c78:	48c4      	ldr	r0, [pc, #784]	@ (8000f8c <display7SEG_2+0x388>)
 8000c7a:	f000 ffa0 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c84:	48c1      	ldr	r0, [pc, #772]	@ (8000f8c <display7SEG_2+0x388>)
 8000c86:	f000 ff9a 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c90:	48be      	ldr	r0, [pc, #760]	@ (8000f8c <display7SEG_2+0x388>)
 8000c92:	f000 ff94 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000c96:	e1a5      	b.n	8000fe4 <display7SEG_2+0x3e0>

	case 1:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2180      	movs	r1, #128	@ 0x80
 8000c9c:	48bb      	ldr	r0, [pc, #748]	@ (8000f8c <display7SEG_2+0x388>)
 8000c9e:	f000 ff8e 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ca8:	48b8      	ldr	r0, [pc, #736]	@ (8000f8c <display7SEG_2+0x388>)
 8000caa:	f000 ff88 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cb4:	48b5      	ldr	r0, [pc, #724]	@ (8000f8c <display7SEG_2+0x388>)
 8000cb6:	f000 ff82 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cc0:	48b2      	ldr	r0, [pc, #712]	@ (8000f8c <display7SEG_2+0x388>)
 8000cc2:	f000 ff7c 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ccc:	48af      	ldr	r0, [pc, #700]	@ (8000f8c <display7SEG_2+0x388>)
 8000cce:	f000 ff76 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cd8:	48ac      	ldr	r0, [pc, #688]	@ (8000f8c <display7SEG_2+0x388>)
 8000cda:	f000 ff70 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ce4:	48a9      	ldr	r0, [pc, #676]	@ (8000f8c <display7SEG_2+0x388>)
 8000ce6:	f000 ff6a 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000cea:	e17b      	b.n	8000fe4 <display7SEG_2+0x3e0>

	case 2:

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cf2:	48a6      	ldr	r0, [pc, #664]	@ (8000f8c <display7SEG_2+0x388>)
 8000cf4:	f000 ff63 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cfe:	48a3      	ldr	r0, [pc, #652]	@ (8000f8c <display7SEG_2+0x388>)
 8000d00:	f000 ff5d 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2180      	movs	r1, #128	@ 0x80
 8000d08:	48a0      	ldr	r0, [pc, #640]	@ (8000f8c <display7SEG_2+0x388>)
 8000d0a:	f000 ff58 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d14:	489d      	ldr	r0, [pc, #628]	@ (8000f8c <display7SEG_2+0x388>)
 8000d16:	f000 ff52 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d20:	489a      	ldr	r0, [pc, #616]	@ (8000f8c <display7SEG_2+0x388>)
 8000d22:	f000 ff4c 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d2c:	4897      	ldr	r0, [pc, #604]	@ (8000f8c <display7SEG_2+0x388>)
 8000d2e:	f000 ff46 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d38:	4894      	ldr	r0, [pc, #592]	@ (8000f8c <display7SEG_2+0x388>)
 8000d3a:	f000 ff40 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000d3e:	e151      	b.n	8000fe4 <display7SEG_2+0x3e0>

	case 3:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d46:	4891      	ldr	r0, [pc, #580]	@ (8000f8c <display7SEG_2+0x388>)
 8000d48:	f000 ff39 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d52:	488e      	ldr	r0, [pc, #568]	@ (8000f8c <display7SEG_2+0x388>)
 8000d54:	f000 ff33 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d5e:	488b      	ldr	r0, [pc, #556]	@ (8000f8c <display7SEG_2+0x388>)
 8000d60:	f000 ff2d 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2180      	movs	r1, #128	@ 0x80
 8000d68:	4888      	ldr	r0, [pc, #544]	@ (8000f8c <display7SEG_2+0x388>)
 8000d6a:	f000 ff28 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d74:	4885      	ldr	r0, [pc, #532]	@ (8000f8c <display7SEG_2+0x388>)
 8000d76:	f000 ff22 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d80:	4882      	ldr	r0, [pc, #520]	@ (8000f8c <display7SEG_2+0x388>)
 8000d82:	f000 ff1c 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d8c:	487f      	ldr	r0, [pc, #508]	@ (8000f8c <display7SEG_2+0x388>)
 8000d8e:	f000 ff16 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000d92:	e127      	b.n	8000fe4 <display7SEG_2+0x3e0>

	case 4:

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d9a:	487c      	ldr	r0, [pc, #496]	@ (8000f8c <display7SEG_2+0x388>)
 8000d9c:	f000 ff0f 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000da6:	4879      	ldr	r0, [pc, #484]	@ (8000f8c <display7SEG_2+0x388>)
 8000da8:	f000 ff09 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000db2:	4876      	ldr	r0, [pc, #472]	@ (8000f8c <display7SEG_2+0x388>)
 8000db4:	f000 ff03 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dbe:	4873      	ldr	r0, [pc, #460]	@ (8000f8c <display7SEG_2+0x388>)
 8000dc0:	f000 fefd 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2180      	movs	r1, #128	@ 0x80
 8000dc8:	4870      	ldr	r0, [pc, #448]	@ (8000f8c <display7SEG_2+0x388>)
 8000dca:	f000 fef8 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dd4:	486d      	ldr	r0, [pc, #436]	@ (8000f8c <display7SEG_2+0x388>)
 8000dd6:	f000 fef2 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000de0:	486a      	ldr	r0, [pc, #424]	@ (8000f8c <display7SEG_2+0x388>)
 8000de2:	f000 feec 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000de6:	e0fd      	b.n	8000fe4 <display7SEG_2+0x3e0>

	case 5:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2180      	movs	r1, #128	@ 0x80
 8000dec:	4867      	ldr	r0, [pc, #412]	@ (8000f8c <display7SEG_2+0x388>)
 8000dee:	f000 fee6 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000df8:	4864      	ldr	r0, [pc, #400]	@ (8000f8c <display7SEG_2+0x388>)
 8000dfa:	f000 fee0 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e04:	4861      	ldr	r0, [pc, #388]	@ (8000f8c <display7SEG_2+0x388>)
 8000e06:	f000 feda 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e10:	485e      	ldr	r0, [pc, #376]	@ (8000f8c <display7SEG_2+0x388>)
 8000e12:	f000 fed4 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e1c:	485b      	ldr	r0, [pc, #364]	@ (8000f8c <display7SEG_2+0x388>)
 8000e1e:	f000 fece 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e28:	4858      	ldr	r0, [pc, #352]	@ (8000f8c <display7SEG_2+0x388>)
 8000e2a:	f000 fec8 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e34:	4855      	ldr	r0, [pc, #340]	@ (8000f8c <display7SEG_2+0x388>)
 8000e36:	f000 fec2 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000e3a:	e0d3      	b.n	8000fe4 <display7SEG_2+0x3e0>

	case 6:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e42:	4852      	ldr	r0, [pc, #328]	@ (8000f8c <display7SEG_2+0x388>)
 8000e44:	f000 febb 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2180      	movs	r1, #128	@ 0x80
 8000e4c:	484f      	ldr	r0, [pc, #316]	@ (8000f8c <display7SEG_2+0x388>)
 8000e4e:	f000 feb6 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e58:	484c      	ldr	r0, [pc, #304]	@ (8000f8c <display7SEG_2+0x388>)
 8000e5a:	f000 feb0 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e64:	4849      	ldr	r0, [pc, #292]	@ (8000f8c <display7SEG_2+0x388>)
 8000e66:	f000 feaa 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e70:	4846      	ldr	r0, [pc, #280]	@ (8000f8c <display7SEG_2+0x388>)
 8000e72:	f000 fea4 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e7c:	4843      	ldr	r0, [pc, #268]	@ (8000f8c <display7SEG_2+0x388>)
 8000e7e:	f000 fe9e 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e88:	4840      	ldr	r0, [pc, #256]	@ (8000f8c <display7SEG_2+0x388>)
 8000e8a:	f000 fe98 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000e8e:	e0a9      	b.n	8000fe4 <display7SEG_2+0x3e0>

	case 7:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e96:	483d      	ldr	r0, [pc, #244]	@ (8000f8c <display7SEG_2+0x388>)
 8000e98:	f000 fe91 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ea2:	483a      	ldr	r0, [pc, #232]	@ (8000f8c <display7SEG_2+0x388>)
 8000ea4:	f000 fe8b 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000eae:	4837      	ldr	r0, [pc, #220]	@ (8000f8c <display7SEG_2+0x388>)
 8000eb0:	f000 fe85 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eba:	4834      	ldr	r0, [pc, #208]	@ (8000f8c <display7SEG_2+0x388>)
 8000ebc:	f000 fe7f 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ec6:	4831      	ldr	r0, [pc, #196]	@ (8000f8c <display7SEG_2+0x388>)
 8000ec8:	f000 fe79 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2180      	movs	r1, #128	@ 0x80
 8000ed0:	482e      	ldr	r0, [pc, #184]	@ (8000f8c <display7SEG_2+0x388>)
 8000ed2:	f000 fe74 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000edc:	482b      	ldr	r0, [pc, #172]	@ (8000f8c <display7SEG_2+0x388>)
 8000ede:	f000 fe6e 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000ee2:	e07f      	b.n	8000fe4 <display7SEG_2+0x3e0>

	case 8:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eea:	4828      	ldr	r0, [pc, #160]	@ (8000f8c <display7SEG_2+0x388>)
 8000eec:	f000 fe67 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ef6:	4825      	ldr	r0, [pc, #148]	@ (8000f8c <display7SEG_2+0x388>)
 8000ef8:	f000 fe61 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f02:	4822      	ldr	r0, [pc, #136]	@ (8000f8c <display7SEG_2+0x388>)
 8000f04:	f000 fe5b 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f0e:	481f      	ldr	r0, [pc, #124]	@ (8000f8c <display7SEG_2+0x388>)
 8000f10:	f000 fe55 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2180      	movs	r1, #128	@ 0x80
 8000f18:	481c      	ldr	r0, [pc, #112]	@ (8000f8c <display7SEG_2+0x388>)
 8000f1a:	f000 fe50 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f24:	4819      	ldr	r0, [pc, #100]	@ (8000f8c <display7SEG_2+0x388>)
 8000f26:	f000 fe4a 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f30:	4816      	ldr	r0, [pc, #88]	@ (8000f8c <display7SEG_2+0x388>)
 8000f32:	f000 fe44 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000f36:	e055      	b.n	8000fe4 <display7SEG_2+0x3e0>

	case 9:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f3e:	4813      	ldr	r0, [pc, #76]	@ (8000f8c <display7SEG_2+0x388>)
 8000f40:	f000 fe3d 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2180      	movs	r1, #128	@ 0x80
 8000f48:	4810      	ldr	r0, [pc, #64]	@ (8000f8c <display7SEG_2+0x388>)
 8000f4a:	f000 fe38 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f54:	480d      	ldr	r0, [pc, #52]	@ (8000f8c <display7SEG_2+0x388>)
 8000f56:	f000 fe32 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f60:	480a      	ldr	r0, [pc, #40]	@ (8000f8c <display7SEG_2+0x388>)
 8000f62:	f000 fe2c 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f6c:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <display7SEG_2+0x388>)
 8000f6e:	f000 fe26 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f78:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <display7SEG_2+0x388>)
 8000f7a:	f000 fe20 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f84:	4801      	ldr	r0, [pc, #4]	@ (8000f8c <display7SEG_2+0x388>)
 8000f86:	f000 fe1a 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000f8a:	e02b      	b.n	8000fe4 <display7SEG_2+0x3e0>
 8000f8c:	40010c00 	.word	0x40010c00

	default:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2180      	movs	r1, #128	@ 0x80
 8000f94:	4815      	ldr	r0, [pc, #84]	@ (8000fec <display7SEG_2+0x3e8>)
 8000f96:	f000 fe12 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fa0:	4812      	ldr	r0, [pc, #72]	@ (8000fec <display7SEG_2+0x3e8>)
 8000fa2:	f000 fe0c 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fac:	480f      	ldr	r0, [pc, #60]	@ (8000fec <display7SEG_2+0x3e8>)
 8000fae:	f000 fe06 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <display7SEG_2+0x3e8>)
 8000fba:	f000 fe00 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fc4:	4809      	ldr	r0, [pc, #36]	@ (8000fec <display7SEG_2+0x3e8>)
 8000fc6:	f000 fdfa 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fd0:	4806      	ldr	r0, [pc, #24]	@ (8000fec <display7SEG_2+0x3e8>)
 8000fd2:	f000 fdf4 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fdc:	4803      	ldr	r0, [pc, #12]	@ (8000fec <display7SEG_2+0x3e8>)
 8000fde:	f000 fdee 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000fe2:	bf00      	nop
	}

}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40010c00 	.word	0x40010c00

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff4:	f000 fae0 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff8:	f000 f816 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffc:	f000 f89c 	bl	8001138 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001000:	f000 f84e 	bl	80010a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001004:	4806      	ldr	r0, [pc, #24]	@ (8001020 <main+0x30>)
 8001006:	f001 fa39 	bl	800247c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	status = INIT;
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <main+0x34>)
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]

	while (1) {

		fsm_manual_run();
 8001010:	f7ff fae6 	bl	80005e0 <fsm_manual_run>
		fsm_automatic_run();
 8001014:	f7ff f96c 	bl	80002f0 <fsm_automatic_run>
		fsm_setting();
 8001018:	f7ff fb8c 	bl	8000734 <fsm_setting>
		fsm_manual_run();
 800101c:	bf00      	nop
 800101e:	e7f7      	b.n	8001010 <main+0x20>
 8001020:	20000120 	.word	0x20000120
 8001024:	20000104 	.word	0x20000104

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b090      	sub	sp, #64	@ 0x40
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0318 	add.w	r3, r7, #24
 8001032:	2228      	movs	r2, #40	@ 0x28
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fdac 	bl	8002b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104e:	2301      	movs	r3, #1
 8001050:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001052:	2310      	movs	r3, #16
 8001054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fdde 	bl	8001c20 <HAL_RCC_OscConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800106a:	f000 f8d3 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106e:	230f      	movs	r3, #15
 8001070:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f001 f84c 	bl	8002124 <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001092:	f000 f8bf 	bl	8001214 <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3740      	adds	r7, #64	@ 0x40
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <MX_TIM2_Init+0x94>)
 80010be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_TIM2_Init+0x94>)
 80010c6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80010ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <MX_TIM2_Init+0x94>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010d2:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <MX_TIM2_Init+0x94>)
 80010d4:	2209      	movs	r2, #9
 80010d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <MX_TIM2_Init+0x94>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <MX_TIM2_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e4:	4813      	ldr	r0, [pc, #76]	@ (8001134 <MX_TIM2_Init+0x94>)
 80010e6:	f001 f979 	bl	80023dc <HAL_TIM_Base_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010f0:	f000 f890 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	4619      	mov	r1, r3
 8001100:	480c      	ldr	r0, [pc, #48]	@ (8001134 <MX_TIM2_Init+0x94>)
 8001102:	f001 faf7 	bl	80026f4 <HAL_TIM_ConfigClockSource>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800110c:	f000 f882 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_TIM2_Init+0x94>)
 800111e:	f001 fccf 	bl	8002ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001128:	f000 f874 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000120 	.word	0x20000120

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <MX_GPIO_Init+0xb8>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a27      	ldr	r2, [pc, #156]	@ (80011f0 <MX_GPIO_Init+0xb8>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <MX_GPIO_Init+0xb8>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001164:	4b22      	ldr	r3, [pc, #136]	@ (80011f0 <MX_GPIO_Init+0xb8>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a21      	ldr	r2, [pc, #132]	@ (80011f0 <MX_GPIO_Init+0xb8>)
 800116a:	f043 0308 	orr.w	r3, r3, #8
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <MX_GPIO_Init+0xb8>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_RED_Pin|LED_1_Pin|LED_2_Pin
 800117c:	2200      	movs	r2, #0
 800117e:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 8001182:	481c      	ldr	r0, [pc, #112]	@ (80011f4 <MX_GPIO_Init+0xbc>)
 8001184:	f000 fd1b 	bl	8001bbe <HAL_GPIO_WritePin>
                          |LED_3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin|SEG0_2_Pin|SEG0_3_Pin|SEG1_4_Pin
 8001188:	2200      	movs	r2, #0
 800118a:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 800118e:	481a      	ldr	r0, [pc, #104]	@ (80011f8 <MX_GPIO_Init+0xc0>)
 8001190:	f000 fd15 	bl	8001bbe <HAL_GPIO_WritePin>
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|SEG0_4_Pin
                          |SEG0_5_Pin|SEG0_6_Pin|SEG0_7_Pin|SEG1_1_Pin
                          |SEG1_2_Pin|SEG1_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 8001194:	230e      	movs	r3, #14
 8001196:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	4619      	mov	r1, r3
 80011a6:	4813      	ldr	r0, [pc, #76]	@ (80011f4 <MX_GPIO_Init+0xbc>)
 80011a8:	f000 fb76 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_1_Pin LED_2_Pin
                           LED_3_Pin LED_4_Pin LED_5_Pin LED_6_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_1_Pin|LED_2_Pin
 80011ac:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80011b0:	60bb      	str	r3, [r7, #8]
                          |LED_3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2302      	movs	r3, #2
 80011bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	4619      	mov	r1, r3
 80011c4:	480b      	ldr	r0, [pc, #44]	@ (80011f4 <MX_GPIO_Init+0xbc>)
 80011c6:	f000 fb67 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_1_Pin SEG0_2_Pin SEG0_3_Pin SEG1_4_Pin
                           SEG1_5_Pin SEG1_6_Pin SEG1_7_Pin SEG0_4_Pin
                           SEG0_5_Pin SEG0_6_Pin SEG0_7_Pin SEG1_1_Pin
                           SEG1_2_Pin SEG1_3_Pin */
  GPIO_InitStruct.Pin = SEG0_1_Pin|SEG0_2_Pin|SEG0_3_Pin|SEG1_4_Pin
 80011ca:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80011ce:	60bb      	str	r3, [r7, #8]
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|SEG0_4_Pin
                          |SEG0_5_Pin|SEG0_6_Pin|SEG0_7_Pin|SEG1_1_Pin
                          |SEG1_2_Pin|SEG1_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2302      	movs	r3, #2
 80011da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	4619      	mov	r1, r3
 80011e2:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <MX_GPIO_Init+0xc0>)
 80011e4:	f000 fb58 	bl	8001898 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010800 	.word	0x40010800
 80011f8:	40010c00 	.word	0x40010c00

080011fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8001204:	f7fe ffd2 	bl	80001ac <getKeyInput>
	timerRun();
 8001208:	f000 f8ce 	bl	80013a8 <timerRun>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_MspInit+0x5c>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a14      	ldr	r2, [pc, #80]	@ (800127c <HAL_MspInit+0x5c>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6193      	str	r3, [r2, #24]
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_MspInit+0x5c>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <HAL_MspInit+0x5c>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a0e      	ldr	r2, [pc, #56]	@ (800127c <HAL_MspInit+0x5c>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001248:	61d3      	str	r3, [r2, #28]
 800124a:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <HAL_MspInit+0x5c>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_MspInit+0x60>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <HAL_MspInit+0x60>)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	40021000 	.word	0x40021000
 8001280:	40010000 	.word	0x40010000

08001284 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001294:	d113      	bne.n	80012be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001296:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <HAL_TIM_Base_MspInit+0x44>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a0b      	ldr	r2, [pc, #44]	@ (80012c8 <HAL_TIM_Base_MspInit+0x44>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	61d3      	str	r3, [r2, #28]
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <HAL_TIM_Base_MspInit+0x44>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	201c      	movs	r0, #28
 80012b4:	f000 fab9 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012b8:	201c      	movs	r0, #28
 80012ba:	f000 fad2 	bl	8001862 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <NMI_Handler+0x4>

080012d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <MemManage_Handler+0x4>

080012e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131c:	f000 f992 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <TIM2_IRQHandler+0x10>)
 800132a:	f001 f8f3 	bl	8002514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000120 	.word	0x20000120

08001338 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <setTimer>:

#define MAX_COUNTER 10
int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value;
 800134e:	4907      	ldr	r1, [pc, #28]	@ (800136c <setTimer+0x28>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001358:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <setTimer+0x2c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2100      	movs	r1, #0
 800135e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	20000168 	.word	0x20000168
 8001370:	20000190 	.word	0x20000190

08001374 <isTimerExpired>:
int isTimerExpired(int index) {
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 800137c:	4a09      	ldr	r2, [pc, #36]	@ (80013a4 <isTimerExpired+0x30>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d106      	bne.n	8001396 <isTimerExpired+0x22>
		timer_flag[index] = 0;
 8001388:	4a06      	ldr	r2, [pc, #24]	@ (80013a4 <isTimerExpired+0x30>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2100      	movs	r1, #0
 800138e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <isTimerExpired+0x24>
	}
	return 0;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000190 	.word	0x20000190

080013a8 <timerRun>:
void timerRun() {
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e01c      	b.n	80013ee <timerRun+0x46>
		if (timer_counter[i] > 0) {
 80013b4:	4a12      	ldr	r2, [pc, #72]	@ (8001400 <timerRun+0x58>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dd13      	ble.n	80013e8 <timerRun+0x40>
			timer_counter[i]--;
 80013c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001400 <timerRun+0x58>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c8:	1e5a      	subs	r2, r3, #1
 80013ca:	490d      	ldr	r1, [pc, #52]	@ (8001400 <timerRun+0x58>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 80013d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001400 <timerRun+0x58>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dc04      	bgt.n	80013e8 <timerRun+0x40>
				timer_flag[i] = 1;
 80013de:	4a09      	ldr	r2, [pc, #36]	@ (8001404 <timerRun+0x5c>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2101      	movs	r1, #1
 80013e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b09      	cmp	r3, #9
 80013f2:	dddf      	ble.n	80013b4 <timerRun+0xc>
			}
		}
	}


}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	20000168 	.word	0x20000168
 8001404:	20000190 	.word	0x20000190

08001408 <turnOff_LED>:
 *  Created on: Oct 27, 2024
 *      Author: admin
 */

#include"traffic_light.h"
void turnOff_LED() {
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2140      	movs	r1, #64	@ 0x40
 8001410:	4810      	ldr	r0, [pc, #64]	@ (8001454 <turnOff_LED+0x4c>)
 8001412:	f000 fbd4 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800141c:	480d      	ldr	r0, [pc, #52]	@ (8001454 <turnOff_LED+0x4c>)
 800141e:	f000 fbce 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	2180      	movs	r1, #128	@ 0x80
 8001426:	480b      	ldr	r0, [pc, #44]	@ (8001454 <turnOff_LED+0x4c>)
 8001428:	f000 fbc9 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001432:	4808      	ldr	r0, [pc, #32]	@ (8001454 <turnOff_LED+0x4c>)
 8001434:	f000 fbc3 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800143e:	4805      	ldr	r0, [pc, #20]	@ (8001454 <turnOff_LED+0x4c>)
 8001440:	f000 fbbd 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800144a:	4802      	ldr	r0, [pc, #8]	@ (8001454 <turnOff_LED+0x4c>)
 800144c:	f000 fbb7 	bl	8001bbe <HAL_GPIO_WritePin>
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40010800 	.word	0x40010800

08001458 <turnOn_RED1>:
void turnOn_RED1() {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	2140      	movs	r1, #64	@ 0x40
 8001460:	4807      	ldr	r0, [pc, #28]	@ (8001480 <turnOn_RED1+0x28>)
 8001462:	f000 fbac 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800146c:	4804      	ldr	r0, [pc, #16]	@ (8001480 <turnOn_RED1+0x28>)
 800146e:	f000 fba6 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2180      	movs	r1, #128	@ 0x80
 8001476:	4802      	ldr	r0, [pc, #8]	@ (8001480 <turnOn_RED1+0x28>)
 8001478:	f000 fba1 	bl	8001bbe <HAL_GPIO_WritePin>
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40010800 	.word	0x40010800

08001484 <turnOn_GREEN1>:
void turnOn_GREEN1() {
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	2140      	movs	r1, #64	@ 0x40
 800148c:	4807      	ldr	r0, [pc, #28]	@ (80014ac <turnOn_GREEN1+0x28>)
 800148e:	f000 fb96 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001492:	2201      	movs	r2, #1
 8001494:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001498:	4804      	ldr	r0, [pc, #16]	@ (80014ac <turnOn_GREEN1+0x28>)
 800149a:	f000 fb90 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2180      	movs	r1, #128	@ 0x80
 80014a2:	4802      	ldr	r0, [pc, #8]	@ (80014ac <turnOn_GREEN1+0x28>)
 80014a4:	f000 fb8b 	bl	8001bbe <HAL_GPIO_WritePin>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40010800 	.word	0x40010800

080014b0 <turnOn_YELLOW1>:
void turnOn_YELLOW1() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2140      	movs	r1, #64	@ 0x40
 80014b8:	4807      	ldr	r0, [pc, #28]	@ (80014d8 <turnOn_YELLOW1+0x28>)
 80014ba:	f000 fb80 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014c4:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <turnOn_YELLOW1+0x28>)
 80014c6:	f000 fb7a 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2180      	movs	r1, #128	@ 0x80
 80014ce:	4802      	ldr	r0, [pc, #8]	@ (80014d8 <turnOn_YELLOW1+0x28>)
 80014d0:	f000 fb75 	bl	8001bbe <HAL_GPIO_WritePin>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40010800 	.word	0x40010800

080014dc <turnOn_RED2>:
void turnOn_RED2() {
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e6:	4808      	ldr	r0, [pc, #32]	@ (8001508 <turnOn_RED2+0x2c>)
 80014e8:	f000 fb69 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <turnOn_RED2+0x2c>)
 80014f4:	f000 fb63 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014fe:	4802      	ldr	r0, [pc, #8]	@ (8001508 <turnOn_RED2+0x2c>)
 8001500:	f000 fb5d 	bl	8001bbe <HAL_GPIO_WritePin>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40010800 	.word	0x40010800

0800150c <turnOn_GREEN2>:
void turnOn_GREEN2() {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001516:	4808      	ldr	r0, [pc, #32]	@ (8001538 <turnOn_GREEN2+0x2c>)
 8001518:	f000 fb51 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001522:	4805      	ldr	r0, [pc, #20]	@ (8001538 <turnOn_GREEN2+0x2c>)
 8001524:	f000 fb4b 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800152e:	4802      	ldr	r0, [pc, #8]	@ (8001538 <turnOn_GREEN2+0x2c>)
 8001530:	f000 fb45 	bl	8001bbe <HAL_GPIO_WritePin>
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40010800 	.word	0x40010800

0800153c <turnOn_YELLOW2>:
void turnOn_YELLOW2() {
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001546:	4808      	ldr	r0, [pc, #32]	@ (8001568 <turnOn_YELLOW2+0x2c>)
 8001548:	f000 fb39 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <turnOn_YELLOW2+0x2c>)
 8001554:	f000 fb33 	bl	8001bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800155e:	4802      	ldr	r0, [pc, #8]	@ (8001568 <turnOn_YELLOW2+0x2c>)
 8001560:	f000 fb2d 	bl	8001bbe <HAL_GPIO_WritePin>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40010800 	.word	0x40010800

0800156c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800156c:	f7ff fee4 	bl	8001338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001570:	480b      	ldr	r0, [pc, #44]	@ (80015a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001572:	490c      	ldr	r1, [pc, #48]	@ (80015a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001574:	4a0c      	ldr	r2, [pc, #48]	@ (80015a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a09      	ldr	r2, [pc, #36]	@ (80015ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001588:	4c09      	ldr	r4, [pc, #36]	@ (80015b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001596:	f001 fb05 	bl	8002ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800159a:	f7ff fd29 	bl	8000ff0 <main>
  bx lr
 800159e:	4770      	bx	lr
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80015a8:	08002c30 	.word	0x08002c30
  ldr r2, =_sbss
 80015ac:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80015b0:	200001bc 	.word	0x200001bc

080015b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC1_2_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_Init+0x28>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	@ (80015e0 <HAL_Init+0x28>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 f923 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	200f      	movs	r0, #15
 80015d0:	f000 f808 	bl	80015e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d4:	f7ff fe24 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40022000 	.word	0x40022000

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f93b 	bl	800187e <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f903 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	@ (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000014 	.word	0x20000014
 800163c:	2000001c 	.word	0x2000001c
 8001640:	20000018 	.word	0x20000018

08001644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_IncTick+0x1c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <HAL_IncTick+0x20>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a03      	ldr	r2, [pc, #12]	@ (8001664 <HAL_IncTick+0x20>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	2000001c 	.word	0x2000001c
 8001664:	200001b8 	.word	0x200001b8

08001668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b02      	ldr	r3, [pc, #8]	@ (8001678 <HAL_GetTick+0x10>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	200001b8 	.word	0x200001b8

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	@ (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db0b      	blt.n	800170a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	4906      	ldr	r1, [pc, #24]	@ (8001714 <__NVIC_EnableIRQ+0x34>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	2001      	movs	r0, #1
 8001702:	fa00 f202 	lsl.w	r2, r0, r2
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	@ (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	@ (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	@ 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	@ 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff90 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff2d 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff42 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff90 	bl	800176c <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5f 	bl	8001718 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff35 	bl	80016e0 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b08b      	sub	sp, #44	@ 0x2c
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018aa:	e161      	b.n	8001b70 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018ac:	2201      	movs	r2, #1
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	f040 8150 	bne.w	8001b6a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a97      	ldr	r2, [pc, #604]	@ (8001b2c <HAL_GPIO_Init+0x294>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d05e      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018d4:	4a95      	ldr	r2, [pc, #596]	@ (8001b2c <HAL_GPIO_Init+0x294>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d875      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018da:	4a95      	ldr	r2, [pc, #596]	@ (8001b30 <HAL_GPIO_Init+0x298>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d058      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018e0:	4a93      	ldr	r2, [pc, #588]	@ (8001b30 <HAL_GPIO_Init+0x298>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d86f      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018e6:	4a93      	ldr	r2, [pc, #588]	@ (8001b34 <HAL_GPIO_Init+0x29c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d052      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018ec:	4a91      	ldr	r2, [pc, #580]	@ (8001b34 <HAL_GPIO_Init+0x29c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d869      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018f2:	4a91      	ldr	r2, [pc, #580]	@ (8001b38 <HAL_GPIO_Init+0x2a0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d04c      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018f8:	4a8f      	ldr	r2, [pc, #572]	@ (8001b38 <HAL_GPIO_Init+0x2a0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d863      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018fe:	4a8f      	ldr	r2, [pc, #572]	@ (8001b3c <HAL_GPIO_Init+0x2a4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d046      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 8001904:	4a8d      	ldr	r2, [pc, #564]	@ (8001b3c <HAL_GPIO_Init+0x2a4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d85d      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 800190a:	2b12      	cmp	r3, #18
 800190c:	d82a      	bhi.n	8001964 <HAL_GPIO_Init+0xcc>
 800190e:	2b12      	cmp	r3, #18
 8001910:	d859      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 8001912:	a201      	add	r2, pc, #4	@ (adr r2, 8001918 <HAL_GPIO_Init+0x80>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	08001993 	.word	0x08001993
 800191c:	0800196d 	.word	0x0800196d
 8001920:	0800197f 	.word	0x0800197f
 8001924:	080019c1 	.word	0x080019c1
 8001928:	080019c7 	.word	0x080019c7
 800192c:	080019c7 	.word	0x080019c7
 8001930:	080019c7 	.word	0x080019c7
 8001934:	080019c7 	.word	0x080019c7
 8001938:	080019c7 	.word	0x080019c7
 800193c:	080019c7 	.word	0x080019c7
 8001940:	080019c7 	.word	0x080019c7
 8001944:	080019c7 	.word	0x080019c7
 8001948:	080019c7 	.word	0x080019c7
 800194c:	080019c7 	.word	0x080019c7
 8001950:	080019c7 	.word	0x080019c7
 8001954:	080019c7 	.word	0x080019c7
 8001958:	080019c7 	.word	0x080019c7
 800195c:	08001975 	.word	0x08001975
 8001960:	08001989 	.word	0x08001989
 8001964:	4a76      	ldr	r2, [pc, #472]	@ (8001b40 <HAL_GPIO_Init+0x2a8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800196a:	e02c      	b.n	80019c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	623b      	str	r3, [r7, #32]
          break;
 8001972:	e029      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	3304      	adds	r3, #4
 800197a:	623b      	str	r3, [r7, #32]
          break;
 800197c:	e024      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	3308      	adds	r3, #8
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e01f      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	330c      	adds	r3, #12
 800198e:	623b      	str	r3, [r7, #32]
          break;
 8001990:	e01a      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800199a:	2304      	movs	r3, #4
 800199c:	623b      	str	r3, [r7, #32]
          break;
 800199e:	e013      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a8:	2308      	movs	r3, #8
 80019aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	611a      	str	r2, [r3, #16]
          break;
 80019b2:	e009      	b.n	80019c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b4:	2308      	movs	r3, #8
 80019b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	615a      	str	r2, [r3, #20]
          break;
 80019be:	e003      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e000      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          break;
 80019c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2bff      	cmp	r3, #255	@ 0xff
 80019cc:	d801      	bhi.n	80019d2 <HAL_GPIO_Init+0x13a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	e001      	b.n	80019d6 <HAL_GPIO_Init+0x13e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3304      	adds	r3, #4
 80019d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2bff      	cmp	r3, #255	@ 0xff
 80019dc:	d802      	bhi.n	80019e4 <HAL_GPIO_Init+0x14c>
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	e002      	b.n	80019ea <HAL_GPIO_Init+0x152>
 80019e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e6:	3b08      	subs	r3, #8
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	210f      	movs	r1, #15
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	401a      	ands	r2, r3
 80019fc:	6a39      	ldr	r1, [r7, #32]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	431a      	orrs	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80a9 	beq.w	8001b6a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a18:	4b4a      	ldr	r3, [pc, #296]	@ (8001b44 <HAL_GPIO_Init+0x2ac>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a49      	ldr	r2, [pc, #292]	@ (8001b44 <HAL_GPIO_Init+0x2ac>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b47      	ldr	r3, [pc, #284]	@ (8001b44 <HAL_GPIO_Init+0x2ac>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a30:	4a45      	ldr	r2, [pc, #276]	@ (8001b48 <HAL_GPIO_Init+0x2b0>)
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	3302      	adds	r3, #2
 8001a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3d      	ldr	r2, [pc, #244]	@ (8001b4c <HAL_GPIO_Init+0x2b4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d00d      	beq.n	8001a78 <HAL_GPIO_Init+0x1e0>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a3c      	ldr	r2, [pc, #240]	@ (8001b50 <HAL_GPIO_Init+0x2b8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d007      	beq.n	8001a74 <HAL_GPIO_Init+0x1dc>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a3b      	ldr	r2, [pc, #236]	@ (8001b54 <HAL_GPIO_Init+0x2bc>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d101      	bne.n	8001a70 <HAL_GPIO_Init+0x1d8>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e004      	b.n	8001a7a <HAL_GPIO_Init+0x1e2>
 8001a70:	2303      	movs	r3, #3
 8001a72:	e002      	b.n	8001a7a <HAL_GPIO_Init+0x1e2>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_GPIO_Init+0x1e2>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a7c:	f002 0203 	and.w	r2, r2, #3
 8001a80:	0092      	lsls	r2, r2, #2
 8001a82:	4093      	lsls	r3, r2
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a8a:	492f      	ldr	r1, [pc, #188]	@ (8001b48 <HAL_GPIO_Init+0x2b0>)
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	492b      	ldr	r1, [pc, #172]	@ (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ab2:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4927      	ldr	r1, [pc, #156]	@ (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001acc:	4b22      	ldr	r3, [pc, #136]	@ (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4921      	ldr	r1, [pc, #132]	@ (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60cb      	str	r3, [r1, #12]
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ada:	4b1f      	ldr	r3, [pc, #124]	@ (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	491d      	ldr	r1, [pc, #116]	@ (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001af4:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4917      	ldr	r1, [pc, #92]	@ (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	4913      	ldr	r1, [pc, #76]	@ (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01f      	beq.n	8001b5c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	490d      	ldr	r1, [pc, #52]	@ (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]
 8001b28:	e01f      	b.n	8001b6a <HAL_GPIO_Init+0x2d2>
 8001b2a:	bf00      	nop
 8001b2c:	10320000 	.word	0x10320000
 8001b30:	10310000 	.word	0x10310000
 8001b34:	10220000 	.word	0x10220000
 8001b38:	10210000 	.word	0x10210000
 8001b3c:	10120000 	.word	0x10120000
 8001b40:	10110000 	.word	0x10110000
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010000 	.word	0x40010000
 8001b4c:	40010800 	.word	0x40010800
 8001b50:	40010c00 	.word	0x40010c00
 8001b54:	40011000 	.word	0x40011000
 8001b58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <HAL_GPIO_Init+0x2f4>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	4909      	ldr	r1, [pc, #36]	@ (8001b8c <HAL_GPIO_Init+0x2f4>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f47f ae96 	bne.w	80018ac <HAL_GPIO_Init+0x14>
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	372c      	adds	r7, #44	@ 0x2c
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	40010400 	.word	0x40010400

08001b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e001      	b.n	8001bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	807b      	strh	r3, [r7, #2]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bce:	787b      	ldrb	r3, [r7, #1]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd4:	887a      	ldrh	r2, [r7, #2]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bda:	e003      	b.n	8001be4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	041a      	lsls	r2, r3, #16
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	611a      	str	r2, [r3, #16]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c00:	887a      	ldrh	r2, [r7, #2]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	041a      	lsls	r2, r3, #16
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	400b      	ands	r3, r1
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	611a      	str	r2, [r3, #16]
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e272      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8087 	beq.w	8001d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c40:	4b92      	ldr	r3, [pc, #584]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d00c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c4c:	4b8f      	ldr	r3, [pc, #572]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d112      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5e>
 8001c58:	4b8c      	ldr	r3, [pc, #560]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c64:	d10b      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c66:	4b89      	ldr	r3, [pc, #548]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d06c      	beq.n	8001d4c <HAL_RCC_OscConfig+0x12c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d168      	bne.n	8001d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e24c      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x76>
 8001c88:	4b80      	ldr	r3, [pc, #512]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	e02e      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x98>
 8001c9e:	4b7b      	ldr	r3, [pc, #492]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a7a      	ldr	r2, [pc, #488]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b78      	ldr	r3, [pc, #480]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a77      	ldr	r2, [pc, #476]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e01d      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0xbc>
 8001cc2:	4b72      	ldr	r3, [pc, #456]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a71      	ldr	r2, [pc, #452]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b6f      	ldr	r3, [pc, #444]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001cdc:	4b6b      	ldr	r3, [pc, #428]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a6a      	ldr	r2, [pc, #424]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b68      	ldr	r3, [pc, #416]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a67      	ldr	r2, [pc, #412]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fcb4 	bl	8001668 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fcb0 	bl	8001668 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	@ 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e200      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b5d      	ldr	r3, [pc, #372]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0xe4>
 8001d22:	e014      	b.n	8001d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fca0 	bl	8001668 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fc9c 	bl	8001668 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	@ 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1ec      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	4b53      	ldr	r3, [pc, #332]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x10c>
 8001d4a:	e000      	b.n	8001d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d063      	beq.n	8001e22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d66:	4b49      	ldr	r3, [pc, #292]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d11c      	bne.n	8001dac <HAL_RCC_OscConfig+0x18c>
 8001d72:	4b46      	ldr	r3, [pc, #280]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d116      	bne.n	8001dac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	4b43      	ldr	r3, [pc, #268]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x176>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e1c0      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d96:	4b3d      	ldr	r3, [pc, #244]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4939      	ldr	r1, [pc, #228]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001daa:	e03a      	b.n	8001e22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db4:	4b36      	ldr	r3, [pc, #216]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7ff fc55 	bl	8001668 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fc51 	bl	8001668 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e1a1      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4927      	ldr	r1, [pc, #156]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
 8001df4:	e015      	b.n	8001e22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df6:	4b26      	ldr	r3, [pc, #152]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fc34 	bl	8001668 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e04:	f7ff fc30 	bl	8001668 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e180      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d03a      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d019      	beq.n	8001e6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e36:	4b17      	ldr	r3, [pc, #92]	@ (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fc14 	bl	8001668 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e44:	f7ff fc10 	bl	8001668 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e160      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e62:	2001      	movs	r0, #1
 8001e64:	f000 fa9c 	bl	80023a0 <RCC_Delay>
 8001e68:	e01c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7ff fbfa 	bl	8001668 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e76:	e00f      	b.n	8001e98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e78:	f7ff fbf6 	bl	8001668 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d908      	bls.n	8001e98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e146      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	42420000 	.word	0x42420000
 8001e94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e98:	4b92      	ldr	r3, [pc, #584]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1e9      	bne.n	8001e78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80a6 	beq.w	8001ffe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb6:	4b8b      	ldr	r3, [pc, #556]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10d      	bne.n	8001ede <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	4b88      	ldr	r3, [pc, #544]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a87      	ldr	r2, [pc, #540]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	61d3      	str	r3, [r2, #28]
 8001ece:	4b85      	ldr	r3, [pc, #532]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b82      	ldr	r3, [pc, #520]	@ (80020e8 <HAL_RCC_OscConfig+0x4c8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d118      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b7f      	ldr	r3, [pc, #508]	@ (80020e8 <HAL_RCC_OscConfig+0x4c8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a7e      	ldr	r2, [pc, #504]	@ (80020e8 <HAL_RCC_OscConfig+0x4c8>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fbb7 	bl	8001668 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efe:	f7ff fbb3 	bl	8001668 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b64      	cmp	r3, #100	@ 0x64
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e103      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	4b75      	ldr	r3, [pc, #468]	@ (80020e8 <HAL_RCC_OscConfig+0x4c8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x312>
 8001f24:	4b6f      	ldr	r3, [pc, #444]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a6e      	ldr	r2, [pc, #440]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	e02d      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x334>
 8001f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a69      	ldr	r2, [pc, #420]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	4b67      	ldr	r3, [pc, #412]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a66      	ldr	r2, [pc, #408]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	e01c      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d10c      	bne.n	8001f76 <HAL_RCC_OscConfig+0x356>
 8001f5c:	4b61      	ldr	r3, [pc, #388]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a60      	ldr	r2, [pc, #384]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	4b5e      	ldr	r3, [pc, #376]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	e00b      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f76:	4b5b      	ldr	r3, [pc, #364]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a5a      	ldr	r2, [pc, #360]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6213      	str	r3, [r2, #32]
 8001f82:	4b58      	ldr	r3, [pc, #352]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a57      	ldr	r2, [pc, #348]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d015      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7ff fb67 	bl	8001668 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7ff fb63 	bl	8001668 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e0b1      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ee      	beq.n	8001f9e <HAL_RCC_OscConfig+0x37e>
 8001fc0:	e014      	b.n	8001fec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fb51 	bl	8001668 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff fb4d 	bl	8001668 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e09b      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	4b40      	ldr	r3, [pc, #256]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ee      	bne.n	8001fca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d105      	bne.n	8001ffe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a3b      	ldr	r2, [pc, #236]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8087 	beq.w	8002116 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002008:	4b36      	ldr	r3, [pc, #216]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d061      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d146      	bne.n	80020aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b33      	ldr	r3, [pc, #204]	@ (80020ec <HAL_RCC_OscConfig+0x4cc>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7ff fb21 	bl	8001668 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202a:	f7ff fb1d 	bl	8001668 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e06d      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203c:	4b29      	ldr	r3, [pc, #164]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002050:	d108      	bne.n	8002064 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002052:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	4921      	ldr	r1, [pc, #132]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002064:	4b1f      	ldr	r3, [pc, #124]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a19      	ldr	r1, [r3, #32]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002074:	430b      	orrs	r3, r1
 8002076:	491b      	ldr	r1, [pc, #108]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800207c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <HAL_RCC_OscConfig+0x4cc>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7ff faf1 	bl	8001668 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208a:	f7ff faed 	bl	8001668 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e03d      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x46a>
 80020a8:	e035      	b.n	8002116 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <HAL_RCC_OscConfig+0x4cc>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7ff fada 	bl	8001668 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7ff fad6 	bl	8001668 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e026      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x498>
 80020d6:	e01e      	b.n	8002116 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e019      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40007000 	.word	0x40007000
 80020ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_RCC_OscConfig+0x500>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	429a      	cmp	r2, r3
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d001      	beq.n	8002116 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000

08002124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0d0      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002138:	4b6a      	ldr	r3, [pc, #424]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d910      	bls.n	8002168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b67      	ldr	r3, [pc, #412]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 0207 	bic.w	r2, r3, #7
 800214e:	4965      	ldr	r1, [pc, #404]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b63      	ldr	r3, [pc, #396]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0b8      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d020      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002180:	4b59      	ldr	r3, [pc, #356]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a58      	ldr	r2, [pc, #352]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800218a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002198:	4b53      	ldr	r3, [pc, #332]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4a52      	ldr	r2, [pc, #328]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a4:	4b50      	ldr	r3, [pc, #320]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	494d      	ldr	r1, [pc, #308]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d040      	beq.n	8002244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	4b47      	ldr	r3, [pc, #284]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d115      	bne.n	8002202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e07f      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e2:	4b41      	ldr	r3, [pc, #260]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e073      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f2:	4b3d      	ldr	r3, [pc, #244]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e06b      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002202:	4b39      	ldr	r3, [pc, #228]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f023 0203 	bic.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4936      	ldr	r1, [pc, #216]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002214:	f7ff fa28 	bl	8001668 <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	e00a      	b.n	8002232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221c:	f7ff fa24 	bl	8001668 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e053      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	4b2d      	ldr	r3, [pc, #180]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 020c 	and.w	r2, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	429a      	cmp	r2, r3
 8002242:	d1eb      	bne.n	800221c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002244:	4b27      	ldr	r3, [pc, #156]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d210      	bcs.n	8002274 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b24      	ldr	r3, [pc, #144]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 0207 	bic.w	r2, r3, #7
 800225a:	4922      	ldr	r1, [pc, #136]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b20      	ldr	r3, [pc, #128]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e032      	b.n	80022da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002280:	4b19      	ldr	r3, [pc, #100]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4916      	ldr	r1, [pc, #88]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800229e:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	490e      	ldr	r1, [pc, #56]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022b2:	f000 f821 	bl	80022f8 <HAL_RCC_GetSysClockFreq>
 80022b6:	4602      	mov	r2, r0
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	490a      	ldr	r1, [pc, #40]	@ (80022ec <HAL_RCC_ClockConfig+0x1c8>)
 80022c4:	5ccb      	ldrb	r3, [r1, r3]
 80022c6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ca:	4a09      	ldr	r2, [pc, #36]	@ (80022f0 <HAL_RCC_ClockConfig+0x1cc>)
 80022cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ce:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <HAL_RCC_ClockConfig+0x1d0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff f986 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40022000 	.word	0x40022000
 80022e8:	40021000 	.word	0x40021000
 80022ec:	08002c04 	.word	0x08002c04
 80022f0:	20000014 	.word	0x20000014
 80022f4:	20000018 	.word	0x20000018

080022f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002312:	4b1e      	ldr	r3, [pc, #120]	@ (800238c <HAL_RCC_GetSysClockFreq+0x94>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b04      	cmp	r3, #4
 8002320:	d002      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x30>
 8002322:	2b08      	cmp	r3, #8
 8002324:	d003      	beq.n	800232e <HAL_RCC_GetSysClockFreq+0x36>
 8002326:	e027      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002328:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x98>)
 800232a:	613b      	str	r3, [r7, #16]
      break;
 800232c:	e027      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	0c9b      	lsrs	r3, r3, #18
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	4a17      	ldr	r2, [pc, #92]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002338:	5cd3      	ldrb	r3, [r2, r3]
 800233a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d010      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002346:	4b11      	ldr	r3, [pc, #68]	@ (800238c <HAL_RCC_GetSysClockFreq+0x94>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	0c5b      	lsrs	r3, r3, #17
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	4a11      	ldr	r2, [pc, #68]	@ (8002398 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a0d      	ldr	r2, [pc, #52]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x98>)
 800235a:	fb03 f202 	mul.w	r2, r3, r2
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e004      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a0c      	ldr	r2, [pc, #48]	@ (800239c <HAL_RCC_GetSysClockFreq+0xa4>)
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	613b      	str	r3, [r7, #16]
      break;
 8002376:	e002      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x98>)
 800237a:	613b      	str	r3, [r7, #16]
      break;
 800237c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237e:	693b      	ldr	r3, [r7, #16]
}
 8002380:	4618      	mov	r0, r3
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	007a1200 	.word	0x007a1200
 8002394:	08002c14 	.word	0x08002c14
 8002398:	08002c24 	.word	0x08002c24
 800239c:	003d0900 	.word	0x003d0900

080023a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023a8:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <RCC_Delay+0x34>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <RCC_Delay+0x38>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	0a5b      	lsrs	r3, r3, #9
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023bc:	bf00      	nop
  }
  while (Delay --);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1e5a      	subs	r2, r3, #1
 80023c2:	60fa      	str	r2, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f9      	bne.n	80023bc <RCC_Delay+0x1c>
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	20000014 	.word	0x20000014
 80023d8:	10624dd3 	.word	0x10624dd3

080023dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e041      	b.n	8002472 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe ff3e 	bl	8001284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	4619      	mov	r1, r3
 800241a:	4610      	mov	r0, r2
 800241c:	f000 fa56 	bl	80028cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b01      	cmp	r3, #1
 800248e:	d001      	beq.n	8002494 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e035      	b.n	8002500 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a16      	ldr	r2, [pc, #88]	@ (800250c <HAL_TIM_Base_Start_IT+0x90>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d009      	beq.n	80024ca <HAL_TIM_Base_Start_IT+0x4e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024be:	d004      	beq.n	80024ca <HAL_TIM_Base_Start_IT+0x4e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a12      	ldr	r2, [pc, #72]	@ (8002510 <HAL_TIM_Base_Start_IT+0x94>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d111      	bne.n	80024ee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b06      	cmp	r3, #6
 80024da:	d010      	beq.n	80024fe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ec:	e007      	b.n	80024fe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 0201 	orr.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40012c00 	.word	0x40012c00
 8002510:	40000400 	.word	0x40000400

08002514 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d020      	beq.n	8002578 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01b      	beq.n	8002578 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0202 	mvn.w	r2, #2
 8002548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f998 	bl	8002894 <HAL_TIM_IC_CaptureCallback>
 8002564:	e005      	b.n	8002572 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f98b 	bl	8002882 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f99a 	bl	80028a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d020      	beq.n	80025c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01b      	beq.n	80025c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0204 	mvn.w	r2, #4
 8002594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2202      	movs	r2, #2
 800259a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f972 	bl	8002894 <HAL_TIM_IC_CaptureCallback>
 80025b0:	e005      	b.n	80025be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f965 	bl	8002882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f974 	bl	80028a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d020      	beq.n	8002610 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01b      	beq.n	8002610 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0208 	mvn.w	r2, #8
 80025e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2204      	movs	r2, #4
 80025e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f94c 	bl	8002894 <HAL_TIM_IC_CaptureCallback>
 80025fc:	e005      	b.n	800260a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f93f 	bl	8002882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f94e 	bl	80028a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d020      	beq.n	800265c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01b      	beq.n	800265c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0210 	mvn.w	r2, #16
 800262c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2208      	movs	r2, #8
 8002632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f926 	bl	8002894 <HAL_TIM_IC_CaptureCallback>
 8002648:	e005      	b.n	8002656 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f919 	bl	8002882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f928 	bl	80028a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00c      	beq.n	8002680 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0201 	mvn.w	r2, #1
 8002678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe fdbe 	bl	80011fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00c      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800269c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fa6f 	bl	8002b82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00c      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f8f8 	bl	80028b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0220 	mvn.w	r2, #32
 80026e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fa42 	bl	8002b70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_TIM_ConfigClockSource+0x1c>
 800270c:	2302      	movs	r3, #2
 800270e:	e0b4      	b.n	800287a <HAL_TIM_ConfigClockSource+0x186>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800272e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002748:	d03e      	beq.n	80027c8 <HAL_TIM_ConfigClockSource+0xd4>
 800274a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800274e:	f200 8087 	bhi.w	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002756:	f000 8086 	beq.w	8002866 <HAL_TIM_ConfigClockSource+0x172>
 800275a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800275e:	d87f      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b70      	cmp	r3, #112	@ 0x70
 8002762:	d01a      	beq.n	800279a <HAL_TIM_ConfigClockSource+0xa6>
 8002764:	2b70      	cmp	r3, #112	@ 0x70
 8002766:	d87b      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b60      	cmp	r3, #96	@ 0x60
 800276a:	d050      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x11a>
 800276c:	2b60      	cmp	r3, #96	@ 0x60
 800276e:	d877      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002770:	2b50      	cmp	r3, #80	@ 0x50
 8002772:	d03c      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0xfa>
 8002774:	2b50      	cmp	r3, #80	@ 0x50
 8002776:	d873      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002778:	2b40      	cmp	r3, #64	@ 0x40
 800277a:	d058      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x13a>
 800277c:	2b40      	cmp	r3, #64	@ 0x40
 800277e:	d86f      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002780:	2b30      	cmp	r3, #48	@ 0x30
 8002782:	d064      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x15a>
 8002784:	2b30      	cmp	r3, #48	@ 0x30
 8002786:	d86b      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002788:	2b20      	cmp	r3, #32
 800278a:	d060      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x15a>
 800278c:	2b20      	cmp	r3, #32
 800278e:	d867      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d05c      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x15a>
 8002794:	2b10      	cmp	r3, #16
 8002796:	d05a      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x15a>
 8002798:	e062      	b.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027aa:	f000 f96a 	bl	8002a82 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	609a      	str	r2, [r3, #8]
      break;
 80027c6:	e04f      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027d8:	f000 f953 	bl	8002a82 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027ea:	609a      	str	r2, [r3, #8]
      break;
 80027ec:	e03c      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fa:	461a      	mov	r2, r3
 80027fc:	f000 f8ca 	bl	8002994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2150      	movs	r1, #80	@ 0x50
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f921 	bl	8002a4e <TIM_ITRx_SetConfig>
      break;
 800280c:	e02c      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800281a:	461a      	mov	r2, r3
 800281c:	f000 f8e8 	bl	80029f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2160      	movs	r1, #96	@ 0x60
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f911 	bl	8002a4e <TIM_ITRx_SetConfig>
      break;
 800282c:	e01c      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283a:	461a      	mov	r2, r3
 800283c:	f000 f8aa 	bl	8002994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2140      	movs	r1, #64	@ 0x40
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f901 	bl	8002a4e <TIM_ITRx_SetConfig>
      break;
 800284c:	e00c      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4619      	mov	r1, r3
 8002858:	4610      	mov	r0, r2
 800285a:	f000 f8f8 	bl	8002a4e <TIM_ITRx_SetConfig>
      break;
 800285e:	e003      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
      break;
 8002864:	e000      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002878:	7bfb      	ldrb	r3, [r7, #15]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
	...

080028cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a2b      	ldr	r2, [pc, #172]	@ (800298c <TIM_Base_SetConfig+0xc0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d007      	beq.n	80028f4 <TIM_Base_SetConfig+0x28>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ea:	d003      	beq.n	80028f4 <TIM_Base_SetConfig+0x28>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a28      	ldr	r2, [pc, #160]	@ (8002990 <TIM_Base_SetConfig+0xc4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d108      	bne.n	8002906 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a20      	ldr	r2, [pc, #128]	@ (800298c <TIM_Base_SetConfig+0xc0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d007      	beq.n	800291e <TIM_Base_SetConfig+0x52>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002914:	d003      	beq.n	800291e <TIM_Base_SetConfig+0x52>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a1d      	ldr	r2, [pc, #116]	@ (8002990 <TIM_Base_SetConfig+0xc4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d108      	bne.n	8002930 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a0d      	ldr	r2, [pc, #52]	@ (800298c <TIM_Base_SetConfig+0xc0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d103      	bne.n	8002964 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f023 0201 	bic.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	611a      	str	r2, [r3, #16]
  }
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	40012c00 	.word	0x40012c00
 8002990:	40000400 	.word	0x40000400

08002994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	f023 0201 	bic.w	r2, r3, #1
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f023 030a 	bic.w	r3, r3, #10
 80029d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	621a      	str	r2, [r3, #32]
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f023 0210 	bic.w	r2, r3, #16
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	031b      	lsls	r3, r3, #12
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	621a      	str	r2, [r3, #32]
}
 8002a44:	bf00      	nop
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f043 0307 	orr.w	r3, r3, #7
 8002a70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	609a      	str	r2, [r3, #8]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b087      	sub	sp, #28
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	021a      	lsls	r2, r3, #8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	609a      	str	r2, [r3, #8]
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e041      	b.n	8002b5c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a14      	ldr	r2, [pc, #80]	@ (8002b68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b24:	d004      	beq.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a10      	ldr	r2, [pc, #64]	@ (8002b6c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d10c      	bne.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40012c00 	.word	0x40012c00
 8002b6c:	40000400 	.word	0x40000400

08002b70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <memset>:
 8002b94:	4603      	mov	r3, r0
 8002b96:	4402      	add	r2, r0
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d100      	bne.n	8002b9e <memset+0xa>
 8002b9c:	4770      	bx	lr
 8002b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ba2:	e7f9      	b.n	8002b98 <memset+0x4>

08002ba4 <__libc_init_array>:
 8002ba4:	b570      	push	{r4, r5, r6, lr}
 8002ba6:	2600      	movs	r6, #0
 8002ba8:	4d0c      	ldr	r5, [pc, #48]	@ (8002bdc <__libc_init_array+0x38>)
 8002baa:	4c0d      	ldr	r4, [pc, #52]	@ (8002be0 <__libc_init_array+0x3c>)
 8002bac:	1b64      	subs	r4, r4, r5
 8002bae:	10a4      	asrs	r4, r4, #2
 8002bb0:	42a6      	cmp	r6, r4
 8002bb2:	d109      	bne.n	8002bc8 <__libc_init_array+0x24>
 8002bb4:	f000 f81a 	bl	8002bec <_init>
 8002bb8:	2600      	movs	r6, #0
 8002bba:	4d0a      	ldr	r5, [pc, #40]	@ (8002be4 <__libc_init_array+0x40>)
 8002bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002be8 <__libc_init_array+0x44>)
 8002bbe:	1b64      	subs	r4, r4, r5
 8002bc0:	10a4      	asrs	r4, r4, #2
 8002bc2:	42a6      	cmp	r6, r4
 8002bc4:	d105      	bne.n	8002bd2 <__libc_init_array+0x2e>
 8002bc6:	bd70      	pop	{r4, r5, r6, pc}
 8002bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bcc:	4798      	blx	r3
 8002bce:	3601      	adds	r6, #1
 8002bd0:	e7ee      	b.n	8002bb0 <__libc_init_array+0xc>
 8002bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd6:	4798      	blx	r3
 8002bd8:	3601      	adds	r6, #1
 8002bda:	e7f2      	b.n	8002bc2 <__libc_init_array+0x1e>
 8002bdc:	08002c28 	.word	0x08002c28
 8002be0:	08002c28 	.word	0x08002c28
 8002be4:	08002c28 	.word	0x08002c28
 8002be8:	08002c2c 	.word	0x08002c2c

08002bec <_init>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	bf00      	nop
 8002bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf2:	bc08      	pop	{r3}
 8002bf4:	469e      	mov	lr, r3
 8002bf6:	4770      	bx	lr

08002bf8 <_fini>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr
