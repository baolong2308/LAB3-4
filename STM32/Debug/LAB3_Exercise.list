
LAB3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e28  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f34  08002f34  00003f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f58  08002f58  00004018  2**0
                  CONTENTS
  4 .ARM          00000000  08002f58  08002f58  00004018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f58  08002f58  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f58  08002f58  00003f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f5c  08002f5c  00003f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002f60  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000018  08002f78  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08002f78  000041c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000899c  00000000  00000000  00004041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc7  00000000  00000000  0000c9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0000e7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fb  00000000  00000000  0000f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173d7  00000000  00000000  0000fa43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d904  00000000  00000000  00026e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826b4  00000000  00000000  0003471e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6dd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002918  00000000  00000000  000b6e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000b9730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f1c 	.word	0x08002f1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002f1c 	.word	0x08002f1c

0800014c <isButtonPressed>:
int KeyReg1[MAX_BUTTON] = { NORMAL_STATE };
int KeyReg2[MAX_BUTTON] = { NORMAL_STATE };
int KeyReg3[MAX_BUTTON] = { NORMAL_STATE }; // trạng thái ổn định trước đó
int button_flag[MAX_BUTTON];

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000d4 	.word	0x200000d4

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a06      	ldr	r2, [pc, #24]	@ (80001a4 <subKeyProcess+0x24>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000192:	2110      	movs	r1, #16
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <subKeyProcess+0x28>)
 8000196:	f001 fec2 	bl	8001f1e <HAL_GPIO_TogglePin>
}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	200000d4 	.word	0x200000d4
 80001a8:	40010800 	.word	0x40010800

080001ac <getKeyInput>:

void getKeyInput() {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
	KeyReg0[0] = KeyReg1[0];
 80001b2:	4b36      	ldr	r3, [pc, #216]	@ (800028c <getKeyInput+0xe0>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a36      	ldr	r2, [pc, #216]	@ (8000290 <getKeyInput+0xe4>)
 80001b8:	6013      	str	r3, [r2, #0]
	KeyReg1[0] = KeyReg2[0];
 80001ba:	4b36      	ldr	r3, [pc, #216]	@ (8000294 <getKeyInput+0xe8>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a33      	ldr	r2, [pc, #204]	@ (800028c <getKeyInput+0xe0>)
 80001c0:	6013      	str	r3, [r2, #0]
	KeyReg2[0] = HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin);
 80001c2:	2102      	movs	r1, #2
 80001c4:	4834      	ldr	r0, [pc, #208]	@ (8000298 <getKeyInput+0xec>)
 80001c6:	f001 fe7b 	bl	8001ec0 <HAL_GPIO_ReadPin>
 80001ca:	4603      	mov	r3, r0
 80001cc:	461a      	mov	r2, r3
 80001ce:	4b31      	ldr	r3, [pc, #196]	@ (8000294 <getKeyInput+0xe8>)
 80001d0:	601a      	str	r2, [r3, #0]

	KeyReg0[1] = KeyReg1[1];
 80001d2:	4b2e      	ldr	r3, [pc, #184]	@ (800028c <getKeyInput+0xe0>)
 80001d4:	685b      	ldr	r3, [r3, #4]
 80001d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000290 <getKeyInput+0xe4>)
 80001d8:	6053      	str	r3, [r2, #4]
	KeyReg1[1] = KeyReg2[1];
 80001da:	4b2e      	ldr	r3, [pc, #184]	@ (8000294 <getKeyInput+0xe8>)
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	4a2b      	ldr	r2, [pc, #172]	@ (800028c <getKeyInput+0xe0>)
 80001e0:	6053      	str	r3, [r2, #4]
	KeyReg2[1] = HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin);
 80001e2:	2104      	movs	r1, #4
 80001e4:	482c      	ldr	r0, [pc, #176]	@ (8000298 <getKeyInput+0xec>)
 80001e6:	f001 fe6b 	bl	8001ec0 <HAL_GPIO_ReadPin>
 80001ea:	4603      	mov	r3, r0
 80001ec:	461a      	mov	r2, r3
 80001ee:	4b29      	ldr	r3, [pc, #164]	@ (8000294 <getKeyInput+0xe8>)
 80001f0:	605a      	str	r2, [r3, #4]

	KeyReg0[2] = KeyReg1[2];
 80001f2:	4b26      	ldr	r3, [pc, #152]	@ (800028c <getKeyInput+0xe0>)
 80001f4:	689b      	ldr	r3, [r3, #8]
 80001f6:	4a26      	ldr	r2, [pc, #152]	@ (8000290 <getKeyInput+0xe4>)
 80001f8:	6093      	str	r3, [r2, #8]
	KeyReg1[2] = KeyReg2[2];
 80001fa:	4b26      	ldr	r3, [pc, #152]	@ (8000294 <getKeyInput+0xe8>)
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	4a23      	ldr	r2, [pc, #140]	@ (800028c <getKeyInput+0xe0>)
 8000200:	6093      	str	r3, [r2, #8]
	KeyReg2[2] = HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin);
 8000202:	2108      	movs	r1, #8
 8000204:	4824      	ldr	r0, [pc, #144]	@ (8000298 <getKeyInput+0xec>)
 8000206:	f001 fe5b 	bl	8001ec0 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	461a      	mov	r2, r3
 800020e:	4b21      	ldr	r3, [pc, #132]	@ (8000294 <getKeyInput+0xe8>)
 8000210:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < MAX_BUTTON; i++) {
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	e031      	b.n	800027c <getKeyInput+0xd0>
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000218:	4a1d      	ldr	r2, [pc, #116]	@ (8000290 <getKeyInput+0xe4>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	491a      	ldr	r1, [pc, #104]	@ (800028c <getKeyInput+0xe0>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d124      	bne.n	8000276 <getKeyInput+0xca>
 800022c:	4a17      	ldr	r2, [pc, #92]	@ (800028c <getKeyInput+0xe0>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	4917      	ldr	r1, [pc, #92]	@ (8000294 <getKeyInput+0xe8>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d11a      	bne.n	8000276 <getKeyInput+0xca>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000240:	4a16      	ldr	r2, [pc, #88]	@ (800029c <getKeyInput+0xf0>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	4912      	ldr	r1, [pc, #72]	@ (8000294 <getKeyInput+0xe8>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000250:	429a      	cmp	r2, r3
 8000252:	d010      	beq.n	8000276 <getKeyInput+0xca>
				KeyReg3[i] = KeyReg2[i];
 8000254:	4a0f      	ldr	r2, [pc, #60]	@ (8000294 <getKeyInput+0xe8>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <getKeyInput+0xf0>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg2[i] == PRESSED_STATE) {
 8000264:	4a0b      	ldr	r2, [pc, #44]	@ (8000294 <getKeyInput+0xe8>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d102      	bne.n	8000276 <getKeyInput+0xca>
					//TODO
					subKeyProcess(i);
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f7ff ff85 	bl	8000180 <subKeyProcess>
	for (int i = 0; i < MAX_BUTTON; i++) {
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	3301      	adds	r3, #1
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b09      	cmp	r3, #9
 8000280:	ddca      	ble.n	8000218 <getKeyInput+0x6c>

				}
			}
		}
	}
}
 8000282:	bf00      	nop
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	2000005c 	.word	0x2000005c
 8000290:	20000034 	.word	0x20000034
 8000294:	20000084 	.word	0x20000084
 8000298:	40010800 	.word	0x40010800
 800029c:	200000ac 	.word	0x200000ac

080002a0 <scanLEDs>:
 *      Author: admin
 */

#include"fsm_automatic.h"
#include"led7_segment.h"
void scanLEDs(int time_1, int time_2) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	updateClockBuffer(time_1, time_2);
 80002aa:	6839      	ldr	r1, [r7, #0]
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f000 fbe3 	bl	8000a78 <updateClockBuffer>
	update7SEG_2(index_led_2++ % 2);
 80002b2:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <scanLEDs+0x58>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	1c5a      	adds	r2, r3, #1
 80002b8:	490f      	ldr	r1, [pc, #60]	@ (80002f8 <scanLEDs+0x58>)
 80002ba:	600a      	str	r2, [r1, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	bfb8      	it	lt
 80002c4:	425b      	neglt	r3, r3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fc4a 	bl	8000b60 <update7SEG_2>
	update7SEG_1(index_led_1++ % 2);
 80002cc:	4b0b      	ldr	r3, [pc, #44]	@ (80002fc <scanLEDs+0x5c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	490a      	ldr	r1, [pc, #40]	@ (80002fc <scanLEDs+0x5c>)
 80002d4:	600a      	str	r2, [r1, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	f003 0301 	and.w	r3, r3, #1
 80002dc:	bfb8      	it	lt
 80002de:	425b      	neglt	r3, r3
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fc05 	bl	8000af0 <update7SEG_1>
	setTimer(3, 25);
 80002e6:	2119      	movs	r1, #25
 80002e8:	2003      	movs	r0, #3
 80002ea:	f001 f9c3 	bl	8001674 <setTimer>
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000110 	.word	0x20000110
 80002fc:	2000010c 	.word	0x2000010c

08000300 <fsm_automatic_run>:

void fsm_automatic_run() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0

	if (isTimerExpired(0) == 1) {
 8000304:	2000      	movs	r0, #0
 8000306:	f001 f9cd 	bl	80016a4 <isTimerExpired>
 800030a:	4603      	mov	r3, r0
 800030c:	2b01      	cmp	r3, #1
 800030e:	d107      	bne.n	8000320 <fsm_automatic_run+0x20>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000310:	2120      	movs	r1, #32
 8000312:	48b6      	ldr	r0, [pc, #728]	@ (80005ec <fsm_automatic_run+0x2ec>)
 8000314:	f001 fe03 	bl	8001f1e <HAL_GPIO_TogglePin>
		setTimer(0, 100);
 8000318:	2164      	movs	r1, #100	@ 0x64
 800031a:	2000      	movs	r0, #0
 800031c:	f001 f9aa 	bl	8001674 <setTimer>
	}

	switch (status) {
 8000320:	4bb3      	ldr	r3, [pc, #716]	@ (80005f0 <fsm_automatic_run+0x2f0>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	3b01      	subs	r3, #1
 8000326:	2b04      	cmp	r3, #4
 8000328:	f200 81d1 	bhi.w	80006ce <fsm_automatic_run+0x3ce>
 800032c:	a201      	add	r2, pc, #4	@ (adr r2, 8000334 <fsm_automatic_run+0x34>)
 800032e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000332:	bf00      	nop
 8000334:	08000349 	.word	0x08000349
 8000338:	080003a1 	.word	0x080003a1
 800033c:	08000463 	.word	0x08000463
 8000340:	0800052b 	.word	0x0800052b
 8000344:	08000609 	.word	0x08000609
	case INIT:

		TIME_RED = 5;
 8000348:	4baa      	ldr	r3, [pc, #680]	@ (80005f4 <fsm_automatic_run+0x2f4>)
 800034a:	2205      	movs	r2, #5
 800034c:	601a      	str	r2, [r3, #0]
		TIME_YELLOW = 2;
 800034e:	4baa      	ldr	r3, [pc, #680]	@ (80005f8 <fsm_automatic_run+0x2f8>)
 8000350:	2202      	movs	r2, #2
 8000352:	601a      	str	r2, [r3, #0]
		TIME_GREEN = 3;
 8000354:	4ba9      	ldr	r3, [pc, #676]	@ (80005fc <fsm_automatic_run+0x2fc>)
 8000356:	2203      	movs	r2, #3
 8000358:	601a      	str	r2, [r3, #0]
		status = RED_GREEN;
 800035a:	4ba5      	ldr	r3, [pc, #660]	@ (80005f0 <fsm_automatic_run+0x2f0>)
 800035c:	2202      	movs	r2, #2
 800035e:	601a      	str	r2, [r3, #0]

		time_1 = TIME_GREEN - 1;
 8000360:	4ba6      	ldr	r3, [pc, #664]	@ (80005fc <fsm_automatic_run+0x2fc>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3b01      	subs	r3, #1
 8000366:	4aa6      	ldr	r2, [pc, #664]	@ (8000600 <fsm_automatic_run+0x300>)
 8000368:	6013      	str	r3, [r2, #0]
		time_2 = TIME_RED - 1;
 800036a:	4ba2      	ldr	r3, [pc, #648]	@ (80005f4 <fsm_automatic_run+0x2f4>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3b01      	subs	r3, #1
 8000370:	4aa4      	ldr	r2, [pc, #656]	@ (8000604 <fsm_automatic_run+0x304>)
 8000372:	6013      	str	r3, [r2, #0]
		setTimer(0, 100); //timer DOT
 8000374:	2164      	movs	r1, #100	@ 0x64
 8000376:	2000      	movs	r0, #0
 8000378:	f001 f97c 	bl	8001674 <setTimer>
		setTimer(1, TIME_GREEN * 100);
 800037c:	4b9f      	ldr	r3, [pc, #636]	@ (80005fc <fsm_automatic_run+0x2fc>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2264      	movs	r2, #100	@ 0x64
 8000382:	fb02 f303 	mul.w	r3, r2, r3
 8000386:	4619      	mov	r1, r3
 8000388:	2001      	movs	r0, #1
 800038a:	f001 f973 	bl	8001674 <setTimer>
		setTimer(2, 100); // timer second
 800038e:	2164      	movs	r1, #100	@ 0x64
 8000390:	2002      	movs	r0, #2
 8000392:	f001 f96f 	bl	8001674 <setTimer>
		setTimer(3, 1); // timer scan
 8000396:	2101      	movs	r1, #1
 8000398:	2003      	movs	r0, #3
 800039a:	f001 f96b 	bl	8001674 <setTimer>
		break;
 800039e:	e19f      	b.n	80006e0 <fsm_automatic_run+0x3e0>
	case RED_GREEN:

		turnOn_RED1();
 80003a0:	f001 f9ca 	bl	8001738 <turnOn_RED1>
		turnOn_GREEN2();
 80003a4:	f001 fa22 	bl	80017ec <turnOn_GREEN2>
		if (isTimerExpired(3) == 1) {
 80003a8:	2003      	movs	r0, #3
 80003aa:	f001 f97b 	bl	80016a4 <isTimerExpired>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d107      	bne.n	80003c4 <fsm_automatic_run+0xc4>
			scanLEDs(time_1, time_2);
 80003b4:	4b92      	ldr	r3, [pc, #584]	@ (8000600 <fsm_automatic_run+0x300>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a92      	ldr	r2, [pc, #584]	@ (8000604 <fsm_automatic_run+0x304>)
 80003ba:	6812      	ldr	r2, [r2, #0]
 80003bc:	4611      	mov	r1, r2
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff ff6e 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(2) == 1) {
 80003c4:	2002      	movs	r0, #2
 80003c6:	f001 f96d 	bl	80016a4 <isTimerExpired>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d10d      	bne.n	80003ec <fsm_automatic_run+0xec>
			time_1--;
 80003d0:	4b8b      	ldr	r3, [pc, #556]	@ (8000600 <fsm_automatic_run+0x300>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	3b01      	subs	r3, #1
 80003d6:	4a8a      	ldr	r2, [pc, #552]	@ (8000600 <fsm_automatic_run+0x300>)
 80003d8:	6013      	str	r3, [r2, #0]
			time_2--;
 80003da:	4b8a      	ldr	r3, [pc, #552]	@ (8000604 <fsm_automatic_run+0x304>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	3b01      	subs	r3, #1
 80003e0:	4a88      	ldr	r2, [pc, #544]	@ (8000604 <fsm_automatic_run+0x304>)
 80003e2:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 80003e4:	2164      	movs	r1, #100	@ 0x64
 80003e6:	2002      	movs	r0, #2
 80003e8:	f001 f944 	bl	8001674 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 80003ec:	2001      	movs	r0, #1
 80003ee:	f001 f959 	bl	80016a4 <isTimerExpired>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d110      	bne.n	800041a <fsm_automatic_run+0x11a>
			status = RED_YELLOW;
 80003f8:	4b7d      	ldr	r3, [pc, #500]	@ (80005f0 <fsm_automatic_run+0x2f0>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	601a      	str	r2, [r3, #0]
			time_1 = TIME_YELLOW - 1;
 80003fe:	4b7e      	ldr	r3, [pc, #504]	@ (80005f8 <fsm_automatic_run+0x2f8>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	3b01      	subs	r3, #1
 8000404:	4a7e      	ldr	r2, [pc, #504]	@ (8000600 <fsm_automatic_run+0x300>)
 8000406:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_YELLOW * 100);
 8000408:	4b7b      	ldr	r3, [pc, #492]	@ (80005f8 <fsm_automatic_run+0x2f8>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2264      	movs	r2, #100	@ 0x64
 800040e:	fb02 f303 	mul.w	r3, r2, r3
 8000412:	4619      	mov	r1, r3
 8000414:	2001      	movs	r0, #1
 8000416:	f001 f92d 	bl	8001674 <setTimer>

		}
//		if (isTimerExpired(3) == 1) {
//			scanLEDs(time_1, time_2);
//		}
		if (isButtonPressed(0) == 1) {
 800041a:	2000      	movs	r0, #0
 800041c:	f7ff fe96 	bl	800014c <isButtonPressed>
 8000420:	4603      	mov	r3, r0
 8000422:	2b01      	cmp	r3, #1
 8000424:	d10d      	bne.n	8000442 <fsm_automatic_run+0x142>
			status = SET_RED;
 8000426:	4b72      	ldr	r3, [pc, #456]	@ (80005f0 <fsm_automatic_run+0x2f0>)
 8000428:	2210      	movs	r2, #16
 800042a:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 800042c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000430:	2001      	movs	r0, #1
 8000432:	f001 f91f 	bl	8001674 <setTimer>
			setTimer(6,50);
 8000436:	2132      	movs	r1, #50	@ 0x32
 8000438:	2006      	movs	r0, #6
 800043a:	f001 f91b 	bl	8001674 <setTimer>
			turnOff();
 800043e:	f001 fa05 	bl	800184c <turnOff>
		}
		if (isButtonPressed(1) == 1) {
 8000442:	2001      	movs	r0, #1
 8000444:	f7ff fe82 	bl	800014c <isButtonPressed>
 8000448:	4603      	mov	r3, r0
 800044a:	2b01      	cmp	r3, #1
 800044c:	f040 8141 	bne.w	80006d2 <fsm_automatic_run+0x3d2>
			status = MAN_RED;
 8000450:	4b67      	ldr	r3, [pc, #412]	@ (80005f0 <fsm_automatic_run+0x2f0>)
 8000452:	220c      	movs	r2, #12
 8000454:	601a      	str	r2, [r3, #0]
			setTimer(5, 1000);
 8000456:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800045a:	2005      	movs	r0, #5
 800045c:	f001 f90a 	bl	8001674 <setTimer>
		}

		break;
 8000460:	e137      	b.n	80006d2 <fsm_automatic_run+0x3d2>
	case RED_YELLOW:
		turnOn_YELLOW2();
 8000462:	f001 f9db 	bl	800181c <turnOn_YELLOW2>
		if (isTimerExpired(3) == 1) {
 8000466:	2003      	movs	r0, #3
 8000468:	f001 f91c 	bl	80016a4 <isTimerExpired>
 800046c:	4603      	mov	r3, r0
 800046e:	2b01      	cmp	r3, #1
 8000470:	d107      	bne.n	8000482 <fsm_automatic_run+0x182>
			scanLEDs(time_1, time_2);
 8000472:	4b63      	ldr	r3, [pc, #396]	@ (8000600 <fsm_automatic_run+0x300>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a63      	ldr	r2, [pc, #396]	@ (8000604 <fsm_automatic_run+0x304>)
 8000478:	6812      	ldr	r2, [r2, #0]
 800047a:	4611      	mov	r1, r2
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff0f 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(2) == 1) {
 8000482:	2002      	movs	r0, #2
 8000484:	f001 f90e 	bl	80016a4 <isTimerExpired>
 8000488:	4603      	mov	r3, r0
 800048a:	2b01      	cmp	r3, #1
 800048c:	d10d      	bne.n	80004aa <fsm_automatic_run+0x1aa>
			time_1--;
 800048e:	4b5c      	ldr	r3, [pc, #368]	@ (8000600 <fsm_automatic_run+0x300>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	3b01      	subs	r3, #1
 8000494:	4a5a      	ldr	r2, [pc, #360]	@ (8000600 <fsm_automatic_run+0x300>)
 8000496:	6013      	str	r3, [r2, #0]
			time_2--;
 8000498:	4b5a      	ldr	r3, [pc, #360]	@ (8000604 <fsm_automatic_run+0x304>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	3b01      	subs	r3, #1
 800049e:	4a59      	ldr	r2, [pc, #356]	@ (8000604 <fsm_automatic_run+0x304>)
 80004a0:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 80004a2:	2164      	movs	r1, #100	@ 0x64
 80004a4:	2002      	movs	r0, #2
 80004a6:	f001 f8e5 	bl	8001674 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 80004aa:	2001      	movs	r0, #1
 80004ac:	f001 f8fa 	bl	80016a4 <isTimerExpired>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d115      	bne.n	80004e2 <fsm_automatic_run+0x1e2>
			status = GREEN_RED;
 80004b6:	4b4e      	ldr	r3, [pc, #312]	@ (80005f0 <fsm_automatic_run+0x2f0>)
 80004b8:	2204      	movs	r2, #4
 80004ba:	601a      	str	r2, [r3, #0]
			time_1 = TIME_RED - 1;
 80004bc:	4b4d      	ldr	r3, [pc, #308]	@ (80005f4 <fsm_automatic_run+0x2f4>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	4a4f      	ldr	r2, [pc, #316]	@ (8000600 <fsm_automatic_run+0x300>)
 80004c4:	6013      	str	r3, [r2, #0]
			time_2 = TIME_GREEN - 1;
 80004c6:	4b4d      	ldr	r3, [pc, #308]	@ (80005fc <fsm_automatic_run+0x2fc>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	4a4d      	ldr	r2, [pc, #308]	@ (8000604 <fsm_automatic_run+0x304>)
 80004ce:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_GREEN * 100);
 80004d0:	4b4a      	ldr	r3, [pc, #296]	@ (80005fc <fsm_automatic_run+0x2fc>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2264      	movs	r2, #100	@ 0x64
 80004d6:	fb02 f303 	mul.w	r3, r2, r3
 80004da:	4619      	mov	r1, r3
 80004dc:	2001      	movs	r0, #1
 80004de:	f001 f8c9 	bl	8001674 <setTimer>

		}

		if (isButtonPressed(0) == 1) {
 80004e2:	2000      	movs	r0, #0
 80004e4:	f7ff fe32 	bl	800014c <isButtonPressed>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d10d      	bne.n	800050a <fsm_automatic_run+0x20a>
			status = SET_RED;
 80004ee:	4b40      	ldr	r3, [pc, #256]	@ (80005f0 <fsm_automatic_run+0x2f0>)
 80004f0:	2210      	movs	r2, #16
 80004f2:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 80004f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004f8:	2001      	movs	r0, #1
 80004fa:	f001 f8bb 	bl	8001674 <setTimer>
			setTimer(6,50);
 80004fe:	2132      	movs	r1, #50	@ 0x32
 8000500:	2006      	movs	r0, #6
 8000502:	f001 f8b7 	bl	8001674 <setTimer>
			turnOff();
 8000506:	f001 f9a1 	bl	800184c <turnOff>
		}
		if (isButtonPressed(1) == 1) {
 800050a:	2001      	movs	r0, #1
 800050c:	f7ff fe1e 	bl	800014c <isButtonPressed>
 8000510:	4603      	mov	r3, r0
 8000512:	2b01      	cmp	r3, #1
 8000514:	f040 80df 	bne.w	80006d6 <fsm_automatic_run+0x3d6>
			status = MAN_RED;
 8000518:	4b35      	ldr	r3, [pc, #212]	@ (80005f0 <fsm_automatic_run+0x2f0>)
 800051a:	220c      	movs	r2, #12
 800051c:	601a      	str	r2, [r3, #0]
			setTimer(5, 1000);
 800051e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000522:	2005      	movs	r0, #5
 8000524:	f001 f8a6 	bl	8001674 <setTimer>
		}

		break;
 8000528:	e0d5      	b.n	80006d6 <fsm_automatic_run+0x3d6>
	case GREEN_RED:
		turnOn_GREEN1();
 800052a:	f001 f91b 	bl	8001764 <turnOn_GREEN1>
		turnOn_RED2();
 800052e:	f001 f945 	bl	80017bc <turnOn_RED2>
		if (isTimerExpired(3) == 1) {
 8000532:	2003      	movs	r0, #3
 8000534:	f001 f8b6 	bl	80016a4 <isTimerExpired>
 8000538:	4603      	mov	r3, r0
 800053a:	2b01      	cmp	r3, #1
 800053c:	d107      	bne.n	800054e <fsm_automatic_run+0x24e>
			scanLEDs(time_1, time_2);
 800053e:	4b30      	ldr	r3, [pc, #192]	@ (8000600 <fsm_automatic_run+0x300>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a30      	ldr	r2, [pc, #192]	@ (8000604 <fsm_automatic_run+0x304>)
 8000544:	6812      	ldr	r2, [r2, #0]
 8000546:	4611      	mov	r1, r2
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fea9 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(2) == 1) {
 800054e:	2002      	movs	r0, #2
 8000550:	f001 f8a8 	bl	80016a4 <isTimerExpired>
 8000554:	4603      	mov	r3, r0
 8000556:	2b01      	cmp	r3, #1
 8000558:	d10d      	bne.n	8000576 <fsm_automatic_run+0x276>
			time_1--;
 800055a:	4b29      	ldr	r3, [pc, #164]	@ (8000600 <fsm_automatic_run+0x300>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	3b01      	subs	r3, #1
 8000560:	4a27      	ldr	r2, [pc, #156]	@ (8000600 <fsm_automatic_run+0x300>)
 8000562:	6013      	str	r3, [r2, #0]
			time_2--;
 8000564:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <fsm_automatic_run+0x304>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3b01      	subs	r3, #1
 800056a:	4a26      	ldr	r2, [pc, #152]	@ (8000604 <fsm_automatic_run+0x304>)
 800056c:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 800056e:	2164      	movs	r1, #100	@ 0x64
 8000570:	2002      	movs	r0, #2
 8000572:	f001 f87f 	bl	8001674 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 8000576:	2001      	movs	r0, #1
 8000578:	f001 f894 	bl	80016a4 <isTimerExpired>
 800057c:	4603      	mov	r3, r0
 800057e:	2b01      	cmp	r3, #1
 8000580:	d110      	bne.n	80005a4 <fsm_automatic_run+0x2a4>
			status = YELLOW_RED;
 8000582:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <fsm_automatic_run+0x2f0>)
 8000584:	2205      	movs	r2, #5
 8000586:	601a      	str	r2, [r3, #0]
			time_2 = TIME_YELLOW - 1;
 8000588:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <fsm_automatic_run+0x2f8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a1d      	ldr	r2, [pc, #116]	@ (8000604 <fsm_automatic_run+0x304>)
 8000590:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_YELLOW * 100);
 8000592:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <fsm_automatic_run+0x2f8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2264      	movs	r2, #100	@ 0x64
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	4619      	mov	r1, r3
 800059e:	2001      	movs	r0, #1
 80005a0:	f001 f868 	bl	8001674 <setTimer>

		}

		if (isButtonPressed(0) == 1) {
 80005a4:	2000      	movs	r0, #0
 80005a6:	f7ff fdd1 	bl	800014c <isButtonPressed>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d10d      	bne.n	80005cc <fsm_automatic_run+0x2cc>
			status = SET_RED;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <fsm_automatic_run+0x2f0>)
 80005b2:	2210      	movs	r2, #16
 80005b4:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 80005b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005ba:	2001      	movs	r0, #1
 80005bc:	f001 f85a 	bl	8001674 <setTimer>
			setTimer(6,50);
 80005c0:	2132      	movs	r1, #50	@ 0x32
 80005c2:	2006      	movs	r0, #6
 80005c4:	f001 f856 	bl	8001674 <setTimer>
			turnOff();
 80005c8:	f001 f940 	bl	800184c <turnOff>
		}
		if (isButtonPressed(1) == 1) {
 80005cc:	2001      	movs	r0, #1
 80005ce:	f7ff fdbd 	bl	800014c <isButtonPressed>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	f040 8080 	bne.w	80006da <fsm_automatic_run+0x3da>
			status = MAN_RED;
 80005da:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <fsm_automatic_run+0x2f0>)
 80005dc:	220c      	movs	r2, #12
 80005de:	601a      	str	r2, [r3, #0]
			setTimer(5, 1000);
 80005e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005e4:	2005      	movs	r0, #5
 80005e6:	f001 f845 	bl	8001674 <setTimer>
		}

		break;
 80005ea:	e076      	b.n	80006da <fsm_automatic_run+0x3da>
 80005ec:	40010800 	.word	0x40010800
 80005f0:	200000fc 	.word	0x200000fc
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000004 	.word	0x20000004
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000100 	.word	0x20000100
 8000604:	20000104 	.word	0x20000104
	case YELLOW_RED:
		turnOn_YELLOW1();
 8000608:	f001 f8c2 	bl	8001790 <turnOn_YELLOW1>
		if (isTimerExpired(3) == 1) {
 800060c:	2003      	movs	r0, #3
 800060e:	f001 f849 	bl	80016a4 <isTimerExpired>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d107      	bne.n	8000628 <fsm_automatic_run+0x328>
			scanLEDs(time_1, time_2);
 8000618:	4b32      	ldr	r3, [pc, #200]	@ (80006e4 <fsm_automatic_run+0x3e4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a32      	ldr	r2, [pc, #200]	@ (80006e8 <fsm_automatic_run+0x3e8>)
 800061e:	6812      	ldr	r2, [r2, #0]
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fe3c 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(2) == 1) {
 8000628:	2002      	movs	r0, #2
 800062a:	f001 f83b 	bl	80016a4 <isTimerExpired>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d10d      	bne.n	8000650 <fsm_automatic_run+0x350>
			time_1--;
 8000634:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <fsm_automatic_run+0x3e4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3b01      	subs	r3, #1
 800063a:	4a2a      	ldr	r2, [pc, #168]	@ (80006e4 <fsm_automatic_run+0x3e4>)
 800063c:	6013      	str	r3, [r2, #0]
			time_2--;
 800063e:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <fsm_automatic_run+0x3e8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a28      	ldr	r2, [pc, #160]	@ (80006e8 <fsm_automatic_run+0x3e8>)
 8000646:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 8000648:	2164      	movs	r1, #100	@ 0x64
 800064a:	2002      	movs	r0, #2
 800064c:	f001 f812 	bl	8001674 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 8000650:	2001      	movs	r0, #1
 8000652:	f001 f827 	bl	80016a4 <isTimerExpired>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d115      	bne.n	8000688 <fsm_automatic_run+0x388>
			status = RED_GREEN;
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <fsm_automatic_run+0x3ec>)
 800065e:	2202      	movs	r2, #2
 8000660:	601a      	str	r2, [r3, #0]
			time_1 = TIME_GREEN - 1;
 8000662:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <fsm_automatic_run+0x3f0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3b01      	subs	r3, #1
 8000668:	4a1e      	ldr	r2, [pc, #120]	@ (80006e4 <fsm_automatic_run+0x3e4>)
 800066a:	6013      	str	r3, [r2, #0]
			time_2 = TIME_RED - 1;
 800066c:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <fsm_automatic_run+0x3f4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	3b01      	subs	r3, #1
 8000672:	4a1d      	ldr	r2, [pc, #116]	@ (80006e8 <fsm_automatic_run+0x3e8>)
 8000674:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_GREEN * 100);
 8000676:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <fsm_automatic_run+0x3f0>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2264      	movs	r2, #100	@ 0x64
 800067c:	fb02 f303 	mul.w	r3, r2, r3
 8000680:	4619      	mov	r1, r3
 8000682:	2001      	movs	r0, #1
 8000684:	f000 fff6 	bl	8001674 <setTimer>

		}

		if (isButtonPressed(0) == 1) {
 8000688:	2000      	movs	r0, #0
 800068a:	f7ff fd5f 	bl	800014c <isButtonPressed>
 800068e:	4603      	mov	r3, r0
 8000690:	2b01      	cmp	r3, #1
 8000692:	d10d      	bne.n	80006b0 <fsm_automatic_run+0x3b0>
			status = SET_RED;
 8000694:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <fsm_automatic_run+0x3ec>)
 8000696:	2210      	movs	r2, #16
 8000698:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 800069a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 ffe8 	bl	8001674 <setTimer>
			setTimer(6,50);
 80006a4:	2132      	movs	r1, #50	@ 0x32
 80006a6:	2006      	movs	r0, #6
 80006a8:	f000 ffe4 	bl	8001674 <setTimer>
			turnOff();
 80006ac:	f001 f8ce 	bl	800184c <turnOff>
		}
		if (isButtonPressed(1) == 1) {
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff fd4b 	bl	800014c <isButtonPressed>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d110      	bne.n	80006de <fsm_automatic_run+0x3de>
			status = MAN_RED;
 80006bc:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <fsm_automatic_run+0x3ec>)
 80006be:	220c      	movs	r2, #12
 80006c0:	601a      	str	r2, [r3, #0]
			setTimer(5, 1000);
 80006c2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006c6:	2005      	movs	r0, #5
 80006c8:	f000 ffd4 	bl	8001674 <setTimer>
		}
		break;
 80006cc:	e007      	b.n	80006de <fsm_automatic_run+0x3de>
	default:
		break;
 80006ce:	bf00      	nop
 80006d0:	e006      	b.n	80006e0 <fsm_automatic_run+0x3e0>
		break;
 80006d2:	bf00      	nop
 80006d4:	e004      	b.n	80006e0 <fsm_automatic_run+0x3e0>
		break;
 80006d6:	bf00      	nop
 80006d8:	e002      	b.n	80006e0 <fsm_automatic_run+0x3e0>
		break;
 80006da:	bf00      	nop
 80006dc:	e000      	b.n	80006e0 <fsm_automatic_run+0x3e0>
		break;
 80006de:	bf00      	nop
	}
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000100 	.word	0x20000100
 80006e8:	20000104 	.word	0x20000104
 80006ec:	200000fc 	.word	0x200000fc
 80006f0:	20000008 	.word	0x20000008
 80006f4:	20000000 	.word	0x20000000

080006f8 <fsm_manual_run>:
 *      Author: admin
 */

#include"fsm_manual.h"

void fsm_manual_run() {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	switch (status) {
 80006fc:	4b96      	ldr	r3, [pc, #600]	@ (8000958 <fsm_manual_run+0x260>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3b10      	subs	r3, #16
 8000702:	2b04      	cmp	r3, #4
 8000704:	f200 811c 	bhi.w	8000940 <fsm_manual_run+0x248>
 8000708:	a201      	add	r2, pc, #4	@ (adr r2, 8000710 <fsm_manual_run+0x18>)
 800070a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070e:	bf00      	nop
 8000710:	08000725 	.word	0x08000725
 8000714:	080007b5 	.word	0x080007b5
 8000718:	08000893 	.word	0x08000893
 800071c:	08000941 	.word	0x08000941
 8000720:	08000919 	.word	0x08000919

	case SET_RED:


		if (isTimerExpired(6) == 1) {
 8000724:	2006      	movs	r0, #6
 8000726:	f000 ffbd 	bl	80016a4 <isTimerExpired>
 800072a:	4603      	mov	r3, r0
 800072c:	2b01      	cmp	r3, #1
 800072e:	d10c      	bne.n	800074a <fsm_manual_run+0x52>
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000730:	2140      	movs	r1, #64	@ 0x40
 8000732:	488a      	ldr	r0, [pc, #552]	@ (800095c <fsm_manual_run+0x264>)
 8000734:	f001 fbf3 	bl	8001f1e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8000738:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073c:	4887      	ldr	r0, [pc, #540]	@ (800095c <fsm_manual_run+0x264>)
 800073e:	f001 fbee 	bl	8001f1e <HAL_GPIO_TogglePin>
			setTimer(6, 50);
 8000742:	2132      	movs	r1, #50	@ 0x32
 8000744:	2006      	movs	r0, #6
 8000746:	f000 ff95 	bl	8001674 <setTimer>
		}

		if (isButtonPressed(0) == 1) {
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff fcfe 	bl	800014c <isButtonPressed>
 8000750:	4603      	mov	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	d107      	bne.n	8000766 <fsm_manual_run+0x6e>
			status = SET_YELLOW;
 8000756:	4b80      	ldr	r3, [pc, #512]	@ (8000958 <fsm_manual_run+0x260>)
 8000758:	2212      	movs	r2, #18
 800075a:	601a      	str	r2, [r3, #0]
			turnOff();
 800075c:	f001 f876 	bl	800184c <turnOff>
			count = 0;
 8000760:	4b7f      	ldr	r3, [pc, #508]	@ (8000960 <fsm_manual_run+0x268>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]

		}
		if (isTimerExpired(3) == 1) {
 8000766:	2003      	movs	r0, #3
 8000768:	f000 ff9c 	bl	80016a4 <isTimerExpired>
 800076c:	4603      	mov	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d105      	bne.n	800077e <fsm_manual_run+0x86>

			scanLEDs(count, 2);
 8000772:	4b7b      	ldr	r3, [pc, #492]	@ (8000960 <fsm_manual_run+0x268>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2102      	movs	r1, #2
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fd91 	bl	80002a0 <scanLEDs>
		}
		if (isButtonPressed(1) == 1) {
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff fce4 	bl	800014c <isButtonPressed>
 8000784:	4603      	mov	r3, r0
 8000786:	2b01      	cmp	r3, #1
 8000788:	d104      	bne.n	8000794 <fsm_manual_run+0x9c>
			count++;
 800078a:	4b75      	ldr	r3, [pc, #468]	@ (8000960 <fsm_manual_run+0x268>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	4a73      	ldr	r2, [pc, #460]	@ (8000960 <fsm_manual_run+0x268>)
 8000792:	6013      	str	r3, [r2, #0]

		}
		if (isButtonPressed(2) == 1) {
 8000794:	2002      	movs	r0, #2
 8000796:	f7ff fcd9 	bl	800014c <isButtonPressed>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	f040 80d1 	bne.w	8000944 <fsm_manual_run+0x24c>
			TIME_RED = count;
 80007a2:	4b6f      	ldr	r3, [pc, #444]	@ (8000960 <fsm_manual_run+0x268>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a6f      	ldr	r2, [pc, #444]	@ (8000964 <fsm_manual_run+0x26c>)
 80007a8:	6013      	str	r3, [r2, #0]
			time_1 = count;
 80007aa:	4b6d      	ldr	r3, [pc, #436]	@ (8000960 <fsm_manual_run+0x268>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a6e      	ldr	r2, [pc, #440]	@ (8000968 <fsm_manual_run+0x270>)
 80007b0:	6013      	str	r3, [r2, #0]
		}
		break;
 80007b2:	e0c7      	b.n	8000944 <fsm_manual_run+0x24c>
	case SET_GREEN:


		if (isTimerExpired(6) == 1) {
 80007b4:	2006      	movs	r0, #6
 80007b6:	f000 ff75 	bl	80016a4 <isTimerExpired>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d10d      	bne.n	80007dc <fsm_manual_run+0xe4>
			HAL_GPIO_TogglePin(LED_6_GPIO_Port, LED_6_Pin);
 80007c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007c4:	4865      	ldr	r0, [pc, #404]	@ (800095c <fsm_manual_run+0x264>)
 80007c6:	f001 fbaa 	bl	8001f1e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80007ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ce:	4863      	ldr	r0, [pc, #396]	@ (800095c <fsm_manual_run+0x264>)
 80007d0:	f001 fba5 	bl	8001f1e <HAL_GPIO_TogglePin>
			setTimer(6, 50);
 80007d4:	2132      	movs	r1, #50	@ 0x32
 80007d6:	2006      	movs	r0, #6
 80007d8:	f000 ff4c 	bl	8001674 <setTimer>
		}

		if (isTimerExpired(3) == 1) {
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 ff61 	bl	80016a4 <isTimerExpired>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d105      	bne.n	80007f4 <fsm_manual_run+0xfc>
			scanLEDs(count, 4);
 80007e8:	4b5d      	ldr	r3, [pc, #372]	@ (8000960 <fsm_manual_run+0x268>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2104      	movs	r1, #4
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fd56 	bl	80002a0 <scanLEDs>
		}

		if (isButtonPressed(1) == 1) {
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff fca9 	bl	800014c <isButtonPressed>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d104      	bne.n	800080a <fsm_manual_run+0x112>
			count++;
 8000800:	4b57      	ldr	r3, [pc, #348]	@ (8000960 <fsm_manual_run+0x268>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	4a56      	ldr	r2, [pc, #344]	@ (8000960 <fsm_manual_run+0x268>)
 8000808:	6013      	str	r3, [r2, #0]

		}
		if (isButtonPressed(2) == 1) {
 800080a:	2002      	movs	r0, #2
 800080c:	f7ff fc9e 	bl	800014c <isButtonPressed>
 8000810:	4603      	mov	r3, r0
 8000812:	2b01      	cmp	r3, #1
 8000814:	d107      	bne.n	8000826 <fsm_manual_run+0x12e>
			TIME_GREEN = count;
 8000816:	4b52      	ldr	r3, [pc, #328]	@ (8000960 <fsm_manual_run+0x268>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a54      	ldr	r2, [pc, #336]	@ (800096c <fsm_manual_run+0x274>)
 800081c:	6013      	str	r3, [r2, #0]
			time_1 = count;
 800081e:	4b50      	ldr	r3, [pc, #320]	@ (8000960 <fsm_manual_run+0x268>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a51      	ldr	r2, [pc, #324]	@ (8000968 <fsm_manual_run+0x270>)
 8000824:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(0) == 1) {
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fc90 	bl	800014c <isButtonPressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	f040 808a 	bne.w	8000948 <fsm_manual_run+0x250>
			count = 0;
 8000834:	4b4a      	ldr	r3, [pc, #296]	@ (8000960 <fsm_manual_run+0x268>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
			if (TIME_RED == TIME_YELLOW + TIME_GREEN) {
 800083a:	4b4d      	ldr	r3, [pc, #308]	@ (8000970 <fsm_manual_run+0x278>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	4b4b      	ldr	r3, [pc, #300]	@ (800096c <fsm_manual_run+0x274>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	441a      	add	r2, r3
 8000844:	4b47      	ldr	r3, [pc, #284]	@ (8000964 <fsm_manual_run+0x26c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	429a      	cmp	r2, r3
 800084a:	d11a      	bne.n	8000882 <fsm_manual_run+0x18a>
				status = RED_GREEN;
 800084c:	4b42      	ldr	r3, [pc, #264]	@ (8000958 <fsm_manual_run+0x260>)
 800084e:	2202      	movs	r2, #2
 8000850:	601a      	str	r2, [r3, #0]
				time_1 = TIME_GREEN - 1;
 8000852:	4b46      	ldr	r3, [pc, #280]	@ (800096c <fsm_manual_run+0x274>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3b01      	subs	r3, #1
 8000858:	4a43      	ldr	r2, [pc, #268]	@ (8000968 <fsm_manual_run+0x270>)
 800085a:	6013      	str	r3, [r2, #0]
				time_2 = TIME_RED - 1;
 800085c:	4b41      	ldr	r3, [pc, #260]	@ (8000964 <fsm_manual_run+0x26c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3b01      	subs	r3, #1
 8000862:	4a44      	ldr	r2, [pc, #272]	@ (8000974 <fsm_manual_run+0x27c>)
 8000864:	6013      	str	r3, [r2, #0]
				setTimer(2, 100);
 8000866:	2164      	movs	r1, #100	@ 0x64
 8000868:	2002      	movs	r0, #2
 800086a:	f000 ff03 	bl	8001674 <setTimer>
				setTimer(1, TIME_GREEN * 100);
 800086e:	4b3f      	ldr	r3, [pc, #252]	@ (800096c <fsm_manual_run+0x274>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2264      	movs	r2, #100	@ 0x64
 8000874:	fb02 f303 	mul.w	r3, r2, r3
 8000878:	4619      	mov	r1, r3
 800087a:	2001      	movs	r0, #1
 800087c:	f000 fefa 	bl	8001674 <setTimer>
				status = ERR;
				setTimer(4, 100);
			}

		}
		break;
 8000880:	e062      	b.n	8000948 <fsm_manual_run+0x250>
				status = ERR;
 8000882:	4b35      	ldr	r3, [pc, #212]	@ (8000958 <fsm_manual_run+0x260>)
 8000884:	2214      	movs	r2, #20
 8000886:	601a      	str	r2, [r3, #0]
				setTimer(4, 100);
 8000888:	2164      	movs	r1, #100	@ 0x64
 800088a:	2004      	movs	r0, #4
 800088c:	f000 fef2 	bl	8001674 <setTimer>
		break;
 8000890:	e05a      	b.n	8000948 <fsm_manual_run+0x250>
	case SET_YELLOW:


		if (isTimerExpired(6) == 1) {
 8000892:	2006      	movs	r0, #6
 8000894:	f000 ff06 	bl	80016a4 <isTimerExpired>
 8000898:	4603      	mov	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d10c      	bne.n	80008b8 <fsm_manual_run+0x1c0>
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800089e:	2180      	movs	r1, #128	@ 0x80
 80008a0:	482e      	ldr	r0, [pc, #184]	@ (800095c <fsm_manual_run+0x264>)
 80008a2:	f001 fb3c 	bl	8001f1e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_5_GPIO_Port, LED_5_Pin);
 80008a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008aa:	482c      	ldr	r0, [pc, #176]	@ (800095c <fsm_manual_run+0x264>)
 80008ac:	f001 fb37 	bl	8001f1e <HAL_GPIO_TogglePin>
			setTimer(6, 50);
 80008b0:	2132      	movs	r1, #50	@ 0x32
 80008b2:	2006      	movs	r0, #6
 80008b4:	f000 fede 	bl	8001674 <setTimer>
		}

		if (isTimerExpired(3) == 1) {
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 fef3 	bl	80016a4 <isTimerExpired>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d105      	bne.n	80008d0 <fsm_manual_run+0x1d8>

			scanLEDs(count, 3);
 80008c4:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <fsm_manual_run+0x268>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2103      	movs	r1, #3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fce8 	bl	80002a0 <scanLEDs>

		}
		if (isButtonPressed(0) == 1) {
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff fc3b 	bl	800014c <isButtonPressed>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d107      	bne.n	80008ec <fsm_manual_run+0x1f4>
			status = SET_GREEN;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <fsm_manual_run+0x260>)
 80008de:	2211      	movs	r2, #17
 80008e0:	601a      	str	r2, [r3, #0]
			turnOff();
 80008e2:	f000 ffb3 	bl	800184c <turnOff>
			count = 0;
 80008e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <fsm_manual_run+0x268>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1) {
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff fc2d 	bl	800014c <isButtonPressed>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d104      	bne.n	8000902 <fsm_manual_run+0x20a>
			count++;
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <fsm_manual_run+0x268>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	4a18      	ldr	r2, [pc, #96]	@ (8000960 <fsm_manual_run+0x268>)
 8000900:	6013      	str	r3, [r2, #0]

		}
		if (isButtonPressed(2) == 1) {
 8000902:	2002      	movs	r0, #2
 8000904:	f7ff fc22 	bl	800014c <isButtonPressed>
 8000908:	4603      	mov	r3, r0
 800090a:	2b01      	cmp	r3, #1
 800090c:	d11e      	bne.n	800094c <fsm_manual_run+0x254>
			TIME_YELLOW = count;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <fsm_manual_run+0x268>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a17      	ldr	r2, [pc, #92]	@ (8000970 <fsm_manual_run+0x278>)
 8000914:	6013      	str	r3, [r2, #0]

		}
		break;
 8000916:	e019      	b.n	800094c <fsm_manual_run+0x254>
	case ERR:
		if (isTimerExpired(3)) {
 8000918:	2003      	movs	r0, #3
 800091a:	f000 fec3 	bl	80016a4 <isTimerExpired>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d003      	beq.n	800092c <fsm_manual_run+0x234>
			scanLEDs(99, 99);
 8000924:	2163      	movs	r1, #99	@ 0x63
 8000926:	2063      	movs	r0, #99	@ 0x63
 8000928:	f7ff fcba 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(4)) {
 800092c:	2004      	movs	r0, #4
 800092e:	f000 feb9 	bl	80016a4 <isTimerExpired>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d00b      	beq.n	8000950 <fsm_manual_run+0x258>
			status = INIT;
 8000938:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <fsm_manual_run+0x260>)
 800093a:	2201      	movs	r2, #1
 800093c:	601a      	str	r2, [r3, #0]
		}
		break;
 800093e:	e007      	b.n	8000950 <fsm_manual_run+0x258>
	default:
		break;
 8000940:	bf00      	nop
 8000942:	e006      	b.n	8000952 <fsm_manual_run+0x25a>
		break;
 8000944:	bf00      	nop
 8000946:	e004      	b.n	8000952 <fsm_manual_run+0x25a>
		break;
 8000948:	bf00      	nop
 800094a:	e002      	b.n	8000952 <fsm_manual_run+0x25a>
		break;
 800094c:	bf00      	nop
 800094e:	e000      	b.n	8000952 <fsm_manual_run+0x25a>
		break;
 8000950:	bf00      	nop
	}
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000fc 	.word	0x200000fc
 800095c:	40010800 	.word	0x40010800
 8000960:	20000108 	.word	0x20000108
 8000964:	20000000 	.word	0x20000000
 8000968:	20000100 	.word	0x20000100
 800096c:	20000008 	.word	0x20000008
 8000970:	20000004 	.word	0x20000004
 8000974:	20000104 	.word	0x20000104

08000978 <fsm_setting>:
 *  Created on: Oct 27, 2024
 *      Author: admin
 */
#include"fsm_setting.h"

void fsm_setting() {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	switch (status) {
 800097c:	4b39      	ldr	r3, [pc, #228]	@ (8000a64 <fsm_setting+0xec>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b0e      	cmp	r3, #14
 8000982:	d01e      	beq.n	80009c2 <fsm_setting+0x4a>
 8000984:	2b0e      	cmp	r3, #14
 8000986:	dc63      	bgt.n	8000a50 <fsm_setting+0xd8>
 8000988:	2b0c      	cmp	r3, #12
 800098a:	d002      	beq.n	8000992 <fsm_setting+0x1a>
 800098c:	2b0d      	cmp	r3, #13
 800098e:	d030      	beq.n	80009f2 <fsm_setting+0x7a>
			scanLEDs(99, 5);
		}

		break;
	default:
		break;
 8000990:	e05e      	b.n	8000a50 <fsm_setting+0xd8>
		turnOn_RED1();
 8000992:	f000 fed1 	bl	8001738 <turnOn_RED1>
		turnOn_RED2();
 8000996:	f000 ff11 	bl	80017bc <turnOn_RED2>
		if (isButtonPressed(1) == 1) {
 800099a:	2001      	movs	r0, #1
 800099c:	f7ff fbd6 	bl	800014c <isButtonPressed>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d102      	bne.n	80009ac <fsm_setting+0x34>
			status = MAN_YELLOW;
 80009a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a64 <fsm_setting+0xec>)
 80009a8:	220e      	movs	r2, #14
 80009aa:	601a      	str	r2, [r3, #0]
		if (isTimerExpired(3) == 1) {
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 fe79 	bl	80016a4 <isTimerExpired>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d14d      	bne.n	8000a54 <fsm_setting+0xdc>
			scanLEDs(99, 5);
 80009b8:	2105      	movs	r1, #5
 80009ba:	2063      	movs	r0, #99	@ 0x63
 80009bc:	f7ff fc70 	bl	80002a0 <scanLEDs>
		break;
 80009c0:	e048      	b.n	8000a54 <fsm_setting+0xdc>
		turnOn_YELLOW1();
 80009c2:	f000 fee5 	bl	8001790 <turnOn_YELLOW1>
		turnOn_YELLOW2();
 80009c6:	f000 ff29 	bl	800181c <turnOn_YELLOW2>
		if (isButtonPressed(1) == 1) {
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff fbbe 	bl	800014c <isButtonPressed>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d102      	bne.n	80009dc <fsm_setting+0x64>
			status = MAN_GREEN;
 80009d6:	4b23      	ldr	r3, [pc, #140]	@ (8000a64 <fsm_setting+0xec>)
 80009d8:	220d      	movs	r2, #13
 80009da:	601a      	str	r2, [r3, #0]
		if (isTimerExpired(3) == 1) {
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 fe61 	bl	80016a4 <isTimerExpired>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d137      	bne.n	8000a58 <fsm_setting+0xe0>
			scanLEDs(99, 5);
 80009e8:	2105      	movs	r1, #5
 80009ea:	2063      	movs	r0, #99	@ 0x63
 80009ec:	f7ff fc58 	bl	80002a0 <scanLEDs>
		break;
 80009f0:	e032      	b.n	8000a58 <fsm_setting+0xe0>
		turnOn_GREEN1();
 80009f2:	f000 feb7 	bl	8001764 <turnOn_GREEN1>
		turnOn_GREEN2();
 80009f6:	f000 fef9 	bl	80017ec <turnOn_GREEN2>
		if (isButtonPressed(1) == 1) {
 80009fa:	2001      	movs	r0, #1
 80009fc:	f7ff fba6 	bl	800014c <isButtonPressed>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d119      	bne.n	8000a3a <fsm_setting+0xc2>
			status = RED_GREEN;
 8000a06:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <fsm_setting+0xec>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	601a      	str	r2, [r3, #0]
			time_1 = TIME_GREEN - 1;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <fsm_setting+0xf0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <fsm_setting+0xf4>)
 8000a14:	6013      	str	r3, [r2, #0]
			time_2 = TIME_RED - 1;
 8000a16:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <fsm_setting+0xf8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	4a15      	ldr	r2, [pc, #84]	@ (8000a74 <fsm_setting+0xfc>)
 8000a1e:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 8000a20:	2164      	movs	r1, #100	@ 0x64
 8000a22:	2002      	movs	r0, #2
 8000a24:	f000 fe26 	bl	8001674 <setTimer>
			setTimer(1, TIME_GREEN * 100);
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <fsm_setting+0xf0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2264      	movs	r2, #100	@ 0x64
 8000a2e:	fb02 f303 	mul.w	r3, r2, r3
 8000a32:	4619      	mov	r1, r3
 8000a34:	2001      	movs	r0, #1
 8000a36:	f000 fe1d 	bl	8001674 <setTimer>
		if (isTimerExpired(3) == 1) {
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f000 fe32 	bl	80016a4 <isTimerExpired>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d10a      	bne.n	8000a5c <fsm_setting+0xe4>
			scanLEDs(99, 5);
 8000a46:	2105      	movs	r1, #5
 8000a48:	2063      	movs	r0, #99	@ 0x63
 8000a4a:	f7ff fc29 	bl	80002a0 <scanLEDs>
		break;
 8000a4e:	e005      	b.n	8000a5c <fsm_setting+0xe4>
		break;
 8000a50:	bf00      	nop
 8000a52:	e004      	b.n	8000a5e <fsm_setting+0xe6>
		break;
 8000a54:	bf00      	nop
 8000a56:	e002      	b.n	8000a5e <fsm_setting+0xe6>
		break;
 8000a58:	bf00      	nop
 8000a5a:	e000      	b.n	8000a5e <fsm_setting+0xe6>
		break;
 8000a5c:	bf00      	nop
	}
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000fc 	.word	0x200000fc
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000100 	.word	0x20000100
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000104 	.word	0x20000104

08000a78 <updateClockBuffer>:
 *      Author: admin
 */
#include"led7_segment.h"
int led_buffer[4] = { 0, 0, 0, 0 };

void updateClockBuffer(int time1,int time2) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
	led_buffer[0] = time1 / 10;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a18      	ldr	r2, [pc, #96]	@ (8000ae8 <updateClockBuffer+0x70>)
 8000a86:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8a:	1092      	asrs	r2, r2, #2
 8000a8c:	17db      	asrs	r3, r3, #31
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	4a16      	ldr	r2, [pc, #88]	@ (8000aec <updateClockBuffer+0x74>)
 8000a92:	6013      	str	r3, [r2, #0]
	led_buffer[1] = time1 % 10;
 8000a94:	6879      	ldr	r1, [r7, #4]
 8000a96:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <updateClockBuffer+0x70>)
 8000a98:	fb83 2301 	smull	r2, r3, r3, r1
 8000a9c:	109a      	asrs	r2, r3, #2
 8000a9e:	17cb      	asrs	r3, r1, #31
 8000aa0:	1ad2      	subs	r2, r2, r3
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	1aca      	subs	r2, r1, r3
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <updateClockBuffer+0x74>)
 8000aae:	605a      	str	r2, [r3, #4]
	led_buffer[2] = time2 / 10;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <updateClockBuffer+0x70>)
 8000ab4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab8:	1092      	asrs	r2, r2, #2
 8000aba:	17db      	asrs	r3, r3, #31
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	4a0b      	ldr	r2, [pc, #44]	@ (8000aec <updateClockBuffer+0x74>)
 8000ac0:	6093      	str	r3, [r2, #8]
	led_buffer[3] = time2 % 10;
 8000ac2:	6839      	ldr	r1, [r7, #0]
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <updateClockBuffer+0x70>)
 8000ac6:	fb83 2301 	smull	r2, r3, r3, r1
 8000aca:	109a      	asrs	r2, r3, #2
 8000acc:	17cb      	asrs	r3, r1, #31
 8000ace:	1ad2      	subs	r2, r2, r3
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	1aca      	subs	r2, r1, r3
 8000ada:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <updateClockBuffer+0x74>)
 8000adc:	60da      	str	r2, [r3, #12]
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	66666667 	.word	0x66666667
 8000aec:	20000114 	.word	0x20000114

08000af0 <update7SEG_1>:
void update7SEG_1(int index) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

	switch (index) {
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <update7SEG_1+0x16>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d012      	beq.n	8000b2a <update7SEG_1+0x3a>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
		display7SEG_1(led_buffer[1]);
		break;
	default:
		break;
 8000b04:	e023      	b.n	8000b4e <update7SEG_1+0x5e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b0c:	4812      	ldr	r0, [pc, #72]	@ (8000b58 <update7SEG_1+0x68>)
 8000b0e:	f001 f9ee 	bl	8001eee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b18:	480f      	ldr	r0, [pc, #60]	@ (8000b58 <update7SEG_1+0x68>)
 8000b1a:	f001 f9e8 	bl	8001eee <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer[0]);
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <update7SEG_1+0x6c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f854 	bl	8000bd0 <display7SEG_1>
		break;
 8000b28:	e011      	b.n	8000b4e <update7SEG_1+0x5e>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b30:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <update7SEG_1+0x68>)
 8000b32:	f001 f9dc 	bl	8001eee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b3c:	4806      	ldr	r0, [pc, #24]	@ (8000b58 <update7SEG_1+0x68>)
 8000b3e:	f001 f9d6 	bl	8001eee <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer[1]);
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <update7SEG_1+0x6c>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f842 	bl	8000bd0 <display7SEG_1>
		break;
 8000b4c:	bf00      	nop
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40010800 	.word	0x40010800
 8000b5c:	20000114 	.word	0x20000114

08000b60 <update7SEG_2>:
void update7SEG_2(int index) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

	switch (index) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <update7SEG_2+0x16>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d012      	beq.n	8000b9a <update7SEG_2+0x3a>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
		display7SEG_2(led_buffer[3]);
		break;
	default:
		break;
 8000b74:	e023      	b.n	8000bbe <update7SEG_2+0x5e>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b7c:	4812      	ldr	r0, [pc, #72]	@ (8000bc8 <update7SEG_2+0x68>)
 8000b7e:	f001 f9b6 	bl	8001eee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b88:	480f      	ldr	r0, [pc, #60]	@ (8000bc8 <update7SEG_2+0x68>)
 8000b8a:	f001 f9b0 	bl	8001eee <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer[2]);
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <update7SEG_2+0x6c>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f9ce 	bl	8000f34 <display7SEG_2>
		break;
 8000b98:	e011      	b.n	8000bbe <update7SEG_2+0x5e>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ba0:	4809      	ldr	r0, [pc, #36]	@ (8000bc8 <update7SEG_2+0x68>)
 8000ba2:	f001 f9a4 	bl	8001eee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bac:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <update7SEG_2+0x68>)
 8000bae:	f001 f99e 	bl	8001eee <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer[3]);
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <update7SEG_2+0x6c>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f9bc 	bl	8000f34 <display7SEG_2>
		break;
 8000bbc:	bf00      	nop
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	20000114 	.word	0x20000114

08000bd0 <display7SEG_1>:
void display7SEG_1(int num) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b09      	cmp	r3, #9
 8000bdc:	f200 8180 	bhi.w	8000ee0 <display7SEG_1+0x310>
 8000be0:	a201      	add	r2, pc, #4	@ (adr r2, 8000be8 <display7SEG_1+0x18>)
 8000be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be6:	bf00      	nop
 8000be8:	08000c11 	.word	0x08000c11
 8000bec:	08000c59 	.word	0x08000c59
 8000bf0:	08000ca1 	.word	0x08000ca1
 8000bf4:	08000ce9 	.word	0x08000ce9
 8000bf8:	08000d31 	.word	0x08000d31
 8000bfc:	08000d79 	.word	0x08000d79
 8000c00:	08000dc1 	.word	0x08000dc1
 8000c04:	08000e09 	.word	0x08000e09
 8000c08:	08000e51 	.word	0x08000e51
 8000c0c:	08000e99 	.word	0x08000e99
	case 0:
		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2101      	movs	r1, #1
 8000c14:	48c6      	ldr	r0, [pc, #792]	@ (8000f30 <display7SEG_1+0x360>)
 8000c16:	f001 f96a 	bl	8001eee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	48c4      	ldr	r0, [pc, #784]	@ (8000f30 <display7SEG_1+0x360>)
 8000c20:	f001 f965 	bl	8001eee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2104      	movs	r1, #4
 8000c28:	48c1      	ldr	r0, [pc, #772]	@ (8000f30 <display7SEG_1+0x360>)
 8000c2a:	f001 f960 	bl	8001eee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2108      	movs	r1, #8
 8000c32:	48bf      	ldr	r0, [pc, #764]	@ (8000f30 <display7SEG_1+0x360>)
 8000c34:	f001 f95b 	bl	8001eee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	48bc      	ldr	r0, [pc, #752]	@ (8000f30 <display7SEG_1+0x360>)
 8000c3e:	f001 f956 	bl	8001eee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2120      	movs	r1, #32
 8000c46:	48ba      	ldr	r0, [pc, #744]	@ (8000f30 <display7SEG_1+0x360>)
 8000c48:	f001 f951 	bl	8001eee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2140      	movs	r1, #64	@ 0x40
 8000c50:	48b7      	ldr	r0, [pc, #732]	@ (8000f30 <display7SEG_1+0x360>)
 8000c52:	f001 f94c 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8000c56:	e167      	b.n	8000f28 <display7SEG_1+0x358>

	case 1:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	48b4      	ldr	r0, [pc, #720]	@ (8000f30 <display7SEG_1+0x360>)
 8000c5e:	f001 f946 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2108      	movs	r1, #8
 8000c66:	48b2      	ldr	r0, [pc, #712]	@ (8000f30 <display7SEG_1+0x360>)
 8000c68:	f001 f941 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2110      	movs	r1, #16
 8000c70:	48af      	ldr	r0, [pc, #700]	@ (8000f30 <display7SEG_1+0x360>)
 8000c72:	f001 f93c 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2120      	movs	r1, #32
 8000c7a:	48ad      	ldr	r0, [pc, #692]	@ (8000f30 <display7SEG_1+0x360>)
 8000c7c:	f001 f937 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2140      	movs	r1, #64	@ 0x40
 8000c84:	48aa      	ldr	r0, [pc, #680]	@ (8000f30 <display7SEG_1+0x360>)
 8000c86:	f001 f932 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	48a8      	ldr	r0, [pc, #672]	@ (8000f30 <display7SEG_1+0x360>)
 8000c90:	f001 f92d 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2104      	movs	r1, #4
 8000c98:	48a5      	ldr	r0, [pc, #660]	@ (8000f30 <display7SEG_1+0x360>)
 8000c9a:	f001 f928 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8000c9e:	e143      	b.n	8000f28 <display7SEG_1+0x358>

	case 2:

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	48a2      	ldr	r0, [pc, #648]	@ (8000f30 <display7SEG_1+0x360>)
 8000ca6:	f001 f922 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2120      	movs	r1, #32
 8000cae:	48a0      	ldr	r0, [pc, #640]	@ (8000f30 <display7SEG_1+0x360>)
 8000cb0:	f001 f91d 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	489d      	ldr	r0, [pc, #628]	@ (8000f30 <display7SEG_1+0x360>)
 8000cba:	f001 f918 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	489b      	ldr	r0, [pc, #620]	@ (8000f30 <display7SEG_1+0x360>)
 8000cc4:	f001 f913 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2108      	movs	r1, #8
 8000ccc:	4898      	ldr	r0, [pc, #608]	@ (8000f30 <display7SEG_1+0x360>)
 8000cce:	f001 f90e 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2110      	movs	r1, #16
 8000cd6:	4896      	ldr	r0, [pc, #600]	@ (8000f30 <display7SEG_1+0x360>)
 8000cd8:	f001 f909 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2140      	movs	r1, #64	@ 0x40
 8000ce0:	4893      	ldr	r0, [pc, #588]	@ (8000f30 <display7SEG_1+0x360>)
 8000ce2:	f001 f904 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8000ce6:	e11f      	b.n	8000f28 <display7SEG_1+0x358>

	case 3:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2110      	movs	r1, #16
 8000cec:	4890      	ldr	r0, [pc, #576]	@ (8000f30 <display7SEG_1+0x360>)
 8000cee:	f001 f8fe 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	488e      	ldr	r0, [pc, #568]	@ (8000f30 <display7SEG_1+0x360>)
 8000cf8:	f001 f8f9 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2104      	movs	r1, #4
 8000d00:	488b      	ldr	r0, [pc, #556]	@ (8000f30 <display7SEG_1+0x360>)
 8000d02:	f001 f8f4 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4889      	ldr	r0, [pc, #548]	@ (8000f30 <display7SEG_1+0x360>)
 8000d0c:	f001 f8ef 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2102      	movs	r1, #2
 8000d14:	4886      	ldr	r0, [pc, #536]	@ (8000f30 <display7SEG_1+0x360>)
 8000d16:	f001 f8ea 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	4884      	ldr	r0, [pc, #528]	@ (8000f30 <display7SEG_1+0x360>)
 8000d20:	f001 f8e5 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2140      	movs	r1, #64	@ 0x40
 8000d28:	4881      	ldr	r0, [pc, #516]	@ (8000f30 <display7SEG_1+0x360>)
 8000d2a:	f001 f8e0 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8000d2e:	e0fb      	b.n	8000f28 <display7SEG_1+0x358>

	case 4:

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2120      	movs	r1, #32
 8000d34:	487e      	ldr	r0, [pc, #504]	@ (8000f30 <display7SEG_1+0x360>)
 8000d36:	f001 f8da 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2140      	movs	r1, #64	@ 0x40
 8000d3e:	487c      	ldr	r0, [pc, #496]	@ (8000f30 <display7SEG_1+0x360>)
 8000d40:	f001 f8d5 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2102      	movs	r1, #2
 8000d48:	4879      	ldr	r0, [pc, #484]	@ (8000f30 <display7SEG_1+0x360>)
 8000d4a:	f001 f8d0 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2104      	movs	r1, #4
 8000d52:	4877      	ldr	r0, [pc, #476]	@ (8000f30 <display7SEG_1+0x360>)
 8000d54:	f001 f8cb 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4874      	ldr	r0, [pc, #464]	@ (8000f30 <display7SEG_1+0x360>)
 8000d5e:	f001 f8c6 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2108      	movs	r1, #8
 8000d66:	4872      	ldr	r0, [pc, #456]	@ (8000f30 <display7SEG_1+0x360>)
 8000d68:	f001 f8c1 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2110      	movs	r1, #16
 8000d70:	486f      	ldr	r0, [pc, #444]	@ (8000f30 <display7SEG_1+0x360>)
 8000d72:	f001 f8bc 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8000d76:	e0d7      	b.n	8000f28 <display7SEG_1+0x358>

	case 5:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	486c      	ldr	r0, [pc, #432]	@ (8000f30 <display7SEG_1+0x360>)
 8000d7e:	f001 f8b6 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2108      	movs	r1, #8
 8000d86:	486a      	ldr	r0, [pc, #424]	@ (8000f30 <display7SEG_1+0x360>)
 8000d88:	f001 f8b1 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2120      	movs	r1, #32
 8000d90:	4867      	ldr	r0, [pc, #412]	@ (8000f30 <display7SEG_1+0x360>)
 8000d92:	f001 f8ac 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2140      	movs	r1, #64	@ 0x40
 8000d9a:	4865      	ldr	r0, [pc, #404]	@ (8000f30 <display7SEG_1+0x360>)
 8000d9c:	f001 f8a7 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2104      	movs	r1, #4
 8000da4:	4862      	ldr	r0, [pc, #392]	@ (8000f30 <display7SEG_1+0x360>)
 8000da6:	f001 f8a2 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2102      	movs	r1, #2
 8000dae:	4860      	ldr	r0, [pc, #384]	@ (8000f30 <display7SEG_1+0x360>)
 8000db0:	f001 f89d 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2110      	movs	r1, #16
 8000db8:	485d      	ldr	r0, [pc, #372]	@ (8000f30 <display7SEG_1+0x360>)
 8000dba:	f001 f898 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8000dbe:	e0b3      	b.n	8000f28 <display7SEG_1+0x358>

	case 6:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	485a      	ldr	r0, [pc, #360]	@ (8000f30 <display7SEG_1+0x360>)
 8000dc6:	f001 f892 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2101      	movs	r1, #1
 8000dce:	4858      	ldr	r0, [pc, #352]	@ (8000f30 <display7SEG_1+0x360>)
 8000dd0:	f001 f88d 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2108      	movs	r1, #8
 8000dd8:	4855      	ldr	r0, [pc, #340]	@ (8000f30 <display7SEG_1+0x360>)
 8000dda:	f001 f888 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2120      	movs	r1, #32
 8000de2:	4853      	ldr	r0, [pc, #332]	@ (8000f30 <display7SEG_1+0x360>)
 8000de4:	f001 f883 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2140      	movs	r1, #64	@ 0x40
 8000dec:	4850      	ldr	r0, [pc, #320]	@ (8000f30 <display7SEG_1+0x360>)
 8000dee:	f001 f87e 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2104      	movs	r1, #4
 8000df6:	484e      	ldr	r0, [pc, #312]	@ (8000f30 <display7SEG_1+0x360>)
 8000df8:	f001 f879 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2102      	movs	r1, #2
 8000e00:	484b      	ldr	r0, [pc, #300]	@ (8000f30 <display7SEG_1+0x360>)
 8000e02:	f001 f874 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8000e06:	e08f      	b.n	8000f28 <display7SEG_1+0x358>

	case 7:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	4848      	ldr	r0, [pc, #288]	@ (8000f30 <display7SEG_1+0x360>)
 8000e0e:	f001 f86e 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2120      	movs	r1, #32
 8000e16:	4846      	ldr	r0, [pc, #280]	@ (8000f30 <display7SEG_1+0x360>)
 8000e18:	f001 f869 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2108      	movs	r1, #8
 8000e20:	4843      	ldr	r0, [pc, #268]	@ (8000f30 <display7SEG_1+0x360>)
 8000e22:	f001 f864 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2140      	movs	r1, #64	@ 0x40
 8000e2a:	4841      	ldr	r0, [pc, #260]	@ (8000f30 <display7SEG_1+0x360>)
 8000e2c:	f001 f85f 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2102      	movs	r1, #2
 8000e34:	483e      	ldr	r0, [pc, #248]	@ (8000f30 <display7SEG_1+0x360>)
 8000e36:	f001 f85a 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	483c      	ldr	r0, [pc, #240]	@ (8000f30 <display7SEG_1+0x360>)
 8000e40:	f001 f855 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2104      	movs	r1, #4
 8000e48:	4839      	ldr	r0, [pc, #228]	@ (8000f30 <display7SEG_1+0x360>)
 8000e4a:	f001 f850 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8000e4e:	e06b      	b.n	8000f28 <display7SEG_1+0x358>

	case 8:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2110      	movs	r1, #16
 8000e54:	4836      	ldr	r0, [pc, #216]	@ (8000f30 <display7SEG_1+0x360>)
 8000e56:	f001 f84a 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2120      	movs	r1, #32
 8000e5e:	4834      	ldr	r0, [pc, #208]	@ (8000f30 <display7SEG_1+0x360>)
 8000e60:	f001 f845 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2108      	movs	r1, #8
 8000e68:	4831      	ldr	r0, [pc, #196]	@ (8000f30 <display7SEG_1+0x360>)
 8000e6a:	f001 f840 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2140      	movs	r1, #64	@ 0x40
 8000e72:	482f      	ldr	r0, [pc, #188]	@ (8000f30 <display7SEG_1+0x360>)
 8000e74:	f001 f83b 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	482c      	ldr	r0, [pc, #176]	@ (8000f30 <display7SEG_1+0x360>)
 8000e7e:	f001 f836 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2102      	movs	r1, #2
 8000e86:	482a      	ldr	r0, [pc, #168]	@ (8000f30 <display7SEG_1+0x360>)
 8000e88:	f001 f831 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2104      	movs	r1, #4
 8000e90:	4827      	ldr	r0, [pc, #156]	@ (8000f30 <display7SEG_1+0x360>)
 8000e92:	f001 f82c 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8000e96:	e047      	b.n	8000f28 <display7SEG_1+0x358>

	case 9:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	4824      	ldr	r0, [pc, #144]	@ (8000f30 <display7SEG_1+0x360>)
 8000e9e:	f001 f826 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4822      	ldr	r0, [pc, #136]	@ (8000f30 <display7SEG_1+0x360>)
 8000ea8:	f001 f821 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2102      	movs	r1, #2
 8000eb0:	481f      	ldr	r0, [pc, #124]	@ (8000f30 <display7SEG_1+0x360>)
 8000eb2:	f001 f81c 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2104      	movs	r1, #4
 8000eba:	481d      	ldr	r0, [pc, #116]	@ (8000f30 <display7SEG_1+0x360>)
 8000ebc:	f001 f817 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2108      	movs	r1, #8
 8000ec4:	481a      	ldr	r0, [pc, #104]	@ (8000f30 <display7SEG_1+0x360>)
 8000ec6:	f001 f812 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2140      	movs	r1, #64	@ 0x40
 8000ece:	4818      	ldr	r0, [pc, #96]	@ (8000f30 <display7SEG_1+0x360>)
 8000ed0:	f001 f80d 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2120      	movs	r1, #32
 8000ed8:	4815      	ldr	r0, [pc, #84]	@ (8000f30 <display7SEG_1+0x360>)
 8000eda:	f001 f808 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8000ede:	e023      	b.n	8000f28 <display7SEG_1+0x358>

	default:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	4812      	ldr	r0, [pc, #72]	@ (8000f30 <display7SEG_1+0x360>)
 8000ee6:	f001 f802 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2102      	movs	r1, #2
 8000eee:	4810      	ldr	r0, [pc, #64]	@ (8000f30 <display7SEG_1+0x360>)
 8000ef0:	f000 fffd 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <display7SEG_1+0x360>)
 8000efa:	f000 fff8 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2108      	movs	r1, #8
 8000f02:	480b      	ldr	r0, [pc, #44]	@ (8000f30 <display7SEG_1+0x360>)
 8000f04:	f000 fff3 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	4808      	ldr	r0, [pc, #32]	@ (8000f30 <display7SEG_1+0x360>)
 8000f0e:	f000 ffee 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2120      	movs	r1, #32
 8000f16:	4806      	ldr	r0, [pc, #24]	@ (8000f30 <display7SEG_1+0x360>)
 8000f18:	f000 ffe9 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2140      	movs	r1, #64	@ 0x40
 8000f20:	4803      	ldr	r0, [pc, #12]	@ (8000f30 <display7SEG_1+0x360>)
 8000f22:	f000 ffe4 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8000f26:	bf00      	nop
	}

}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40010c00 	.word	0x40010c00

08000f34 <display7SEG_2>:
void display7SEG_2(int num) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b09      	cmp	r3, #9
 8000f40:	f200 81be 	bhi.w	80012c0 <display7SEG_2+0x38c>
 8000f44:	a201      	add	r2, pc, #4	@ (adr r2, 8000f4c <display7SEG_2+0x18>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000f75 	.word	0x08000f75
 8000f50:	08000fc9 	.word	0x08000fc9
 8000f54:	0800101d 	.word	0x0800101d
 8000f58:	08001071 	.word	0x08001071
 8000f5c:	080010c5 	.word	0x080010c5
 8000f60:	08001119 	.word	0x08001119
 8000f64:	0800116d 	.word	0x0800116d
 8000f68:	080011c1 	.word	0x080011c1
 8000f6c:	08001215 	.word	0x08001215
 8000f70:	08001269 	.word	0x08001269

	case 0:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2180      	movs	r1, #128	@ 0x80
 8000f78:	48d0      	ldr	r0, [pc, #832]	@ (80012bc <display7SEG_2+0x388>)
 8000f7a:	f000 ffb8 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f84:	48cd      	ldr	r0, [pc, #820]	@ (80012bc <display7SEG_2+0x388>)
 8000f86:	f000 ffb2 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f90:	48ca      	ldr	r0, [pc, #808]	@ (80012bc <display7SEG_2+0x388>)
 8000f92:	f000 ffac 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f9c:	48c7      	ldr	r0, [pc, #796]	@ (80012bc <display7SEG_2+0x388>)
 8000f9e:	f000 ffa6 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fa8:	48c4      	ldr	r0, [pc, #784]	@ (80012bc <display7SEG_2+0x388>)
 8000faa:	f000 ffa0 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fb4:	48c1      	ldr	r0, [pc, #772]	@ (80012bc <display7SEG_2+0x388>)
 8000fb6:	f000 ff9a 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc0:	48be      	ldr	r0, [pc, #760]	@ (80012bc <display7SEG_2+0x388>)
 8000fc2:	f000 ff94 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8000fc6:	e1a5      	b.n	8001314 <display7SEG_2+0x3e0>

	case 1:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2180      	movs	r1, #128	@ 0x80
 8000fcc:	48bb      	ldr	r0, [pc, #748]	@ (80012bc <display7SEG_2+0x388>)
 8000fce:	f000 ff8e 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fd8:	48b8      	ldr	r0, [pc, #736]	@ (80012bc <display7SEG_2+0x388>)
 8000fda:	f000 ff88 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fe4:	48b5      	ldr	r0, [pc, #724]	@ (80012bc <display7SEG_2+0x388>)
 8000fe6:	f000 ff82 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ff0:	48b2      	ldr	r0, [pc, #712]	@ (80012bc <display7SEG_2+0x388>)
 8000ff2:	f000 ff7c 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ffc:	48af      	ldr	r0, [pc, #700]	@ (80012bc <display7SEG_2+0x388>)
 8000ffe:	f000 ff76 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001008:	48ac      	ldr	r0, [pc, #688]	@ (80012bc <display7SEG_2+0x388>)
 800100a:	f000 ff70 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001014:	48a9      	ldr	r0, [pc, #676]	@ (80012bc <display7SEG_2+0x388>)
 8001016:	f000 ff6a 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 800101a:	e17b      	b.n	8001314 <display7SEG_2+0x3e0>

	case 2:

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, SET);
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001022:	48a6      	ldr	r0, [pc, #664]	@ (80012bc <display7SEG_2+0x388>)
 8001024:	f000 ff63 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800102e:	48a3      	ldr	r0, [pc, #652]	@ (80012bc <display7SEG_2+0x388>)
 8001030:	f000 ff5d 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2180      	movs	r1, #128	@ 0x80
 8001038:	48a0      	ldr	r0, [pc, #640]	@ (80012bc <display7SEG_2+0x388>)
 800103a:	f000 ff58 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001044:	489d      	ldr	r0, [pc, #628]	@ (80012bc <display7SEG_2+0x388>)
 8001046:	f000 ff52 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001050:	489a      	ldr	r0, [pc, #616]	@ (80012bc <display7SEG_2+0x388>)
 8001052:	f000 ff4c 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800105c:	4897      	ldr	r0, [pc, #604]	@ (80012bc <display7SEG_2+0x388>)
 800105e:	f000 ff46 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001068:	4894      	ldr	r0, [pc, #592]	@ (80012bc <display7SEG_2+0x388>)
 800106a:	f000 ff40 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 800106e:	e151      	b.n	8001314 <display7SEG_2+0x3e0>

	case 3:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001076:	4891      	ldr	r0, [pc, #580]	@ (80012bc <display7SEG_2+0x388>)
 8001078:	f000 ff39 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001082:	488e      	ldr	r0, [pc, #568]	@ (80012bc <display7SEG_2+0x388>)
 8001084:	f000 ff33 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800108e:	488b      	ldr	r0, [pc, #556]	@ (80012bc <display7SEG_2+0x388>)
 8001090:	f000 ff2d 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2180      	movs	r1, #128	@ 0x80
 8001098:	4888      	ldr	r0, [pc, #544]	@ (80012bc <display7SEG_2+0x388>)
 800109a:	f000 ff28 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a4:	4885      	ldr	r0, [pc, #532]	@ (80012bc <display7SEG_2+0x388>)
 80010a6:	f000 ff22 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010b0:	4882      	ldr	r0, [pc, #520]	@ (80012bc <display7SEG_2+0x388>)
 80010b2:	f000 ff1c 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010bc:	487f      	ldr	r0, [pc, #508]	@ (80012bc <display7SEG_2+0x388>)
 80010be:	f000 ff16 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 80010c2:	e127      	b.n	8001314 <display7SEG_2+0x3e0>

	case 4:

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010ca:	487c      	ldr	r0, [pc, #496]	@ (80012bc <display7SEG_2+0x388>)
 80010cc:	f000 ff0f 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d6:	4879      	ldr	r0, [pc, #484]	@ (80012bc <display7SEG_2+0x388>)
 80010d8:	f000 ff09 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010e2:	4876      	ldr	r0, [pc, #472]	@ (80012bc <display7SEG_2+0x388>)
 80010e4:	f000 ff03 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010ee:	4873      	ldr	r0, [pc, #460]	@ (80012bc <display7SEG_2+0x388>)
 80010f0:	f000 fefd 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2180      	movs	r1, #128	@ 0x80
 80010f8:	4870      	ldr	r0, [pc, #448]	@ (80012bc <display7SEG_2+0x388>)
 80010fa:	f000 fef8 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001104:	486d      	ldr	r0, [pc, #436]	@ (80012bc <display7SEG_2+0x388>)
 8001106:	f000 fef2 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001110:	486a      	ldr	r0, [pc, #424]	@ (80012bc <display7SEG_2+0x388>)
 8001112:	f000 feec 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8001116:	e0fd      	b.n	8001314 <display7SEG_2+0x3e0>

	case 5:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2180      	movs	r1, #128	@ 0x80
 800111c:	4867      	ldr	r0, [pc, #412]	@ (80012bc <display7SEG_2+0x388>)
 800111e:	f000 fee6 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001128:	4864      	ldr	r0, [pc, #400]	@ (80012bc <display7SEG_2+0x388>)
 800112a:	f000 fee0 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001134:	4861      	ldr	r0, [pc, #388]	@ (80012bc <display7SEG_2+0x388>)
 8001136:	f000 feda 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001140:	485e      	ldr	r0, [pc, #376]	@ (80012bc <display7SEG_2+0x388>)
 8001142:	f000 fed4 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800114c:	485b      	ldr	r0, [pc, #364]	@ (80012bc <display7SEG_2+0x388>)
 800114e:	f000 fece 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001158:	4858      	ldr	r0, [pc, #352]	@ (80012bc <display7SEG_2+0x388>)
 800115a:	f000 fec8 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001164:	4855      	ldr	r0, [pc, #340]	@ (80012bc <display7SEG_2+0x388>)
 8001166:	f000 fec2 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 800116a:	e0d3      	b.n	8001314 <display7SEG_2+0x3e0>

	case 6:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001172:	4852      	ldr	r0, [pc, #328]	@ (80012bc <display7SEG_2+0x388>)
 8001174:	f000 febb 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2180      	movs	r1, #128	@ 0x80
 800117c:	484f      	ldr	r0, [pc, #316]	@ (80012bc <display7SEG_2+0x388>)
 800117e:	f000 feb6 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001188:	484c      	ldr	r0, [pc, #304]	@ (80012bc <display7SEG_2+0x388>)
 800118a:	f000 feb0 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001194:	4849      	ldr	r0, [pc, #292]	@ (80012bc <display7SEG_2+0x388>)
 8001196:	f000 feaa 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a0:	4846      	ldr	r0, [pc, #280]	@ (80012bc <display7SEG_2+0x388>)
 80011a2:	f000 fea4 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011ac:	4843      	ldr	r0, [pc, #268]	@ (80012bc <display7SEG_2+0x388>)
 80011ae:	f000 fe9e 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b8:	4840      	ldr	r0, [pc, #256]	@ (80012bc <display7SEG_2+0x388>)
 80011ba:	f000 fe98 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 80011be:	e0a9      	b.n	8001314 <display7SEG_2+0x3e0>

	case 7:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011c6:	483d      	ldr	r0, [pc, #244]	@ (80012bc <display7SEG_2+0x388>)
 80011c8:	f000 fe91 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011d2:	483a      	ldr	r0, [pc, #232]	@ (80012bc <display7SEG_2+0x388>)
 80011d4:	f000 fe8b 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011de:	4837      	ldr	r0, [pc, #220]	@ (80012bc <display7SEG_2+0x388>)
 80011e0:	f000 fe85 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ea:	4834      	ldr	r0, [pc, #208]	@ (80012bc <display7SEG_2+0x388>)
 80011ec:	f000 fe7f 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f6:	4831      	ldr	r0, [pc, #196]	@ (80012bc <display7SEG_2+0x388>)
 80011f8:	f000 fe79 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2180      	movs	r1, #128	@ 0x80
 8001200:	482e      	ldr	r0, [pc, #184]	@ (80012bc <display7SEG_2+0x388>)
 8001202:	f000 fe74 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800120c:	482b      	ldr	r0, [pc, #172]	@ (80012bc <display7SEG_2+0x388>)
 800120e:	f000 fe6e 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8001212:	e07f      	b.n	8001314 <display7SEG_2+0x3e0>

	case 8:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800121a:	4828      	ldr	r0, [pc, #160]	@ (80012bc <display7SEG_2+0x388>)
 800121c:	f000 fe67 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001226:	4825      	ldr	r0, [pc, #148]	@ (80012bc <display7SEG_2+0x388>)
 8001228:	f000 fe61 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001232:	4822      	ldr	r0, [pc, #136]	@ (80012bc <display7SEG_2+0x388>)
 8001234:	f000 fe5b 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800123e:	481f      	ldr	r0, [pc, #124]	@ (80012bc <display7SEG_2+0x388>)
 8001240:	f000 fe55 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2180      	movs	r1, #128	@ 0x80
 8001248:	481c      	ldr	r0, [pc, #112]	@ (80012bc <display7SEG_2+0x388>)
 800124a:	f000 fe50 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001254:	4819      	ldr	r0, [pc, #100]	@ (80012bc <display7SEG_2+0x388>)
 8001256:	f000 fe4a 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001260:	4816      	ldr	r0, [pc, #88]	@ (80012bc <display7SEG_2+0x388>)
 8001262:	f000 fe44 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8001266:	e055      	b.n	8001314 <display7SEG_2+0x3e0>

	case 9:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800126e:	4813      	ldr	r0, [pc, #76]	@ (80012bc <display7SEG_2+0x388>)
 8001270:	f000 fe3d 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2180      	movs	r1, #128	@ 0x80
 8001278:	4810      	ldr	r0, [pc, #64]	@ (80012bc <display7SEG_2+0x388>)
 800127a:	f000 fe38 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001284:	480d      	ldr	r0, [pc, #52]	@ (80012bc <display7SEG_2+0x388>)
 8001286:	f000 fe32 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001290:	480a      	ldr	r0, [pc, #40]	@ (80012bc <display7SEG_2+0x388>)
 8001292:	f000 fe2c 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800129c:	4807      	ldr	r0, [pc, #28]	@ (80012bc <display7SEG_2+0x388>)
 800129e:	f000 fe26 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012a8:	4804      	ldr	r0, [pc, #16]	@ (80012bc <display7SEG_2+0x388>)
 80012aa:	f000 fe20 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012b4:	4801      	ldr	r0, [pc, #4]	@ (80012bc <display7SEG_2+0x388>)
 80012b6:	f000 fe1a 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 80012ba:	e02b      	b.n	8001314 <display7SEG_2+0x3e0>
 80012bc:	40010c00 	.word	0x40010c00

	default:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2180      	movs	r1, #128	@ 0x80
 80012c4:	4815      	ldr	r0, [pc, #84]	@ (800131c <display7SEG_2+0x3e8>)
 80012c6:	f000 fe12 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012d0:	4812      	ldr	r0, [pc, #72]	@ (800131c <display7SEG_2+0x3e8>)
 80012d2:	f000 fe0c 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012dc:	480f      	ldr	r0, [pc, #60]	@ (800131c <display7SEG_2+0x3e8>)
 80012de:	f000 fe06 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012e8:	480c      	ldr	r0, [pc, #48]	@ (800131c <display7SEG_2+0x3e8>)
 80012ea:	f000 fe00 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012f4:	4809      	ldr	r0, [pc, #36]	@ (800131c <display7SEG_2+0x3e8>)
 80012f6:	f000 fdfa 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001300:	4806      	ldr	r0, [pc, #24]	@ (800131c <display7SEG_2+0x3e8>)
 8001302:	f000 fdf4 	bl	8001eee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8001306:	2201      	movs	r2, #1
 8001308:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800130c:	4803      	ldr	r0, [pc, #12]	@ (800131c <display7SEG_2+0x3e8>)
 800130e:	f000 fdee 	bl	8001eee <HAL_GPIO_WritePin>

		break;
 8001312:	bf00      	nop
	}

}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40010c00 	.word	0x40010c00

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f000 fae0 	bl	80018e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f816 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f000 f89c 	bl	8001468 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001330:	f000 f84e 	bl	80013d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001334:	4806      	ldr	r0, [pc, #24]	@ (8001350 <main+0x30>)
 8001336:	f001 fa39 	bl	80027ac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	status = INIT;
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <main+0x34>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]

	while (1) {
		fsm_manual_run();
 8001340:	f7ff f9da 	bl	80006f8 <fsm_manual_run>
		fsm_automatic_run();
 8001344:	f7fe ffdc 	bl	8000300 <fsm_automatic_run>
		fsm_setting();
 8001348:	f7ff fb16 	bl	8000978 <fsm_setting>
		fsm_manual_run();
 800134c:	bf00      	nop
 800134e:	e7f7      	b.n	8001340 <main+0x20>
 8001350:	20000124 	.word	0x20000124
 8001354:	200000fc 	.word	0x200000fc

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b090      	sub	sp, #64	@ 0x40
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	2228      	movs	r2, #40	@ 0x28
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f001 fdac 	bl	8002ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137e:	2301      	movs	r3, #1
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001382:	2310      	movs	r3, #16
 8001384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001386:	2300      	movs	r3, #0
 8001388:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fdde 	bl	8001f50 <HAL_RCC_OscConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800139a:	f000 f8d3 	bl	8001544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139e:	230f      	movs	r3, #15
 80013a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 f84c 	bl	8002454 <HAL_RCC_ClockConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013c2:	f000 f8bf 	bl	8001544 <Error_Handler>
  }
}
 80013c6:	bf00      	nop
 80013c8:	3740      	adds	r7, #64	@ 0x40
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	463b      	mov	r3, r7
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <MX_TIM2_Init+0x94>)
 80013ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <MX_TIM2_Init+0x94>)
 80013f6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80013fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <MX_TIM2_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <MX_TIM2_Init+0x94>)
 8001404:	2209      	movs	r2, #9
 8001406:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <MX_TIM2_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <MX_TIM2_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001414:	4813      	ldr	r0, [pc, #76]	@ (8001464 <MX_TIM2_Init+0x94>)
 8001416:	f001 f979 	bl	800270c <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001420:	f000 f890 	bl	8001544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001428:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	@ (8001464 <MX_TIM2_Init+0x94>)
 8001432:	f001 faf7 	bl	8002a24 <HAL_TIM_ConfigClockSource>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800143c:	f000 f882 	bl	8001544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_TIM2_Init+0x94>)
 800144e:	f001 fccf 	bl	8002df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001458:	f000 f874 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000124 	.word	0x20000124

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	4b28      	ldr	r3, [pc, #160]	@ (8001520 <MX_GPIO_Init+0xb8>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a27      	ldr	r2, [pc, #156]	@ (8001520 <MX_GPIO_Init+0xb8>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <MX_GPIO_Init+0xb8>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <MX_GPIO_Init+0xb8>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a21      	ldr	r2, [pc, #132]	@ (8001520 <MX_GPIO_Init+0xb8>)
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <MX_GPIO_Init+0xb8>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_RED_Pin|LED_1_Pin|LED_2_Pin
 80014ac:	2200      	movs	r2, #0
 80014ae:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 80014b2:	481c      	ldr	r0, [pc, #112]	@ (8001524 <MX_GPIO_Init+0xbc>)
 80014b4:	f000 fd1b 	bl	8001eee <HAL_GPIO_WritePin>
                          |LED_3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin|SEG0_2_Pin|SEG0_3_Pin|SEG1_4_Pin
 80014b8:	2200      	movs	r2, #0
 80014ba:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 80014be:	481a      	ldr	r0, [pc, #104]	@ (8001528 <MX_GPIO_Init+0xc0>)
 80014c0:	f000 fd15 	bl	8001eee <HAL_GPIO_WritePin>
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|SEG0_4_Pin
                          |SEG0_5_Pin|SEG0_6_Pin|SEG0_7_Pin|SEG1_1_Pin
                          |SEG1_2_Pin|SEG1_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 80014c4:	230e      	movs	r3, #14
 80014c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	4619      	mov	r1, r3
 80014d6:	4813      	ldr	r0, [pc, #76]	@ (8001524 <MX_GPIO_Init+0xbc>)
 80014d8:	f000 fb76 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_1_Pin LED_2_Pin
                           LED_3_Pin LED_4_Pin LED_5_Pin LED_6_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_1_Pin|LED_2_Pin
 80014dc:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80014e0:	60bb      	str	r3, [r7, #8]
                          |LED_3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2302      	movs	r3, #2
 80014ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	4619      	mov	r1, r3
 80014f4:	480b      	ldr	r0, [pc, #44]	@ (8001524 <MX_GPIO_Init+0xbc>)
 80014f6:	f000 fb67 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_1_Pin SEG0_2_Pin SEG0_3_Pin SEG1_4_Pin
                           SEG1_5_Pin SEG1_6_Pin SEG1_7_Pin SEG0_4_Pin
                           SEG0_5_Pin SEG0_6_Pin SEG0_7_Pin SEG1_1_Pin
                           SEG1_2_Pin SEG1_3_Pin */
  GPIO_InitStruct.Pin = SEG0_1_Pin|SEG0_2_Pin|SEG0_3_Pin|SEG1_4_Pin
 80014fa:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80014fe:	60bb      	str	r3, [r7, #8]
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|SEG0_4_Pin
                          |SEG0_5_Pin|SEG0_6_Pin|SEG0_7_Pin|SEG1_1_Pin
                          |SEG1_2_Pin|SEG1_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2302      	movs	r3, #2
 800150a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	4619      	mov	r1, r3
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <MX_GPIO_Init+0xc0>)
 8001514:	f000 fb58 	bl	8001bc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	40010800 	.word	0x40010800
 8001528:	40010c00 	.word	0x40010c00

0800152c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8001534:	f7fe fe3a 	bl	80001ac <getKeyInput>
	timerRun();
 8001538:	f000 f8ce 	bl	80016d8 <timerRun>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
}
 800154a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <Error_Handler+0x8>

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <HAL_MspInit+0x5c>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	4a14      	ldr	r2, [pc, #80]	@ (80015ac <HAL_MspInit+0x5c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6193      	str	r3, [r2, #24]
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <HAL_MspInit+0x5c>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <HAL_MspInit+0x5c>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a0e      	ldr	r2, [pc, #56]	@ (80015ac <HAL_MspInit+0x5c>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <HAL_MspInit+0x5c>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_MspInit+0x60>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <HAL_MspInit+0x60>)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010000 	.word	0x40010000

080015b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015c4:	d113      	bne.n	80015ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c6:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <HAL_TIM_Base_MspInit+0x44>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a0b      	ldr	r2, [pc, #44]	@ (80015f8 <HAL_TIM_Base_MspInit+0x44>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	61d3      	str	r3, [r2, #28]
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_TIM_Base_MspInit+0x44>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	201c      	movs	r0, #28
 80015e4:	f000 fab9 	bl	8001b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015e8:	201c      	movs	r0, #28
 80015ea:	f000 fad2 	bl	8001b92 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <NMI_Handler+0x4>

08001604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <MemManage_Handler+0x4>

08001614 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <UsageFault_Handler+0x4>

08001624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164c:	f000 f992 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001658:	4802      	ldr	r0, [pc, #8]	@ (8001664 <TIM2_IRQHandler+0x10>)
 800165a:	f001 f8f3 	bl	8002844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000124 	.word	0x20000124

08001668 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <setTimer>:

#define MAX_COUNTER 10
int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value) {
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value;
 800167e:	4907      	ldr	r1, [pc, #28]	@ (800169c <setTimer+0x28>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001688:	4a05      	ldr	r2, [pc, #20]	@ (80016a0 <setTimer+0x2c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2100      	movs	r1, #0
 800168e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	2000016c 	.word	0x2000016c
 80016a0:	20000194 	.word	0x20000194

080016a4 <isTimerExpired>:
int isTimerExpired(int index) {
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 80016ac:	4a09      	ldr	r2, [pc, #36]	@ (80016d4 <isTimerExpired+0x30>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d106      	bne.n	80016c6 <isTimerExpired+0x22>
		timer_flag[index] = 0;
 80016b8:	4a06      	ldr	r2, [pc, #24]	@ (80016d4 <isTimerExpired+0x30>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2100      	movs	r1, #0
 80016be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <isTimerExpired+0x24>
	}
	return 0;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000194 	.word	0x20000194

080016d8 <timerRun>:
void timerRun() {
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++) {
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	e01c      	b.n	800171e <timerRun+0x46>
		if (timer_counter[i] > 0) {
 80016e4:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <timerRun+0x58>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	dd13      	ble.n	8001718 <timerRun+0x40>
			timer_counter[i]--;
 80016f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001730 <timerRun+0x58>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f8:	1e5a      	subs	r2, r3, #1
 80016fa:	490d      	ldr	r1, [pc, #52]	@ (8001730 <timerRun+0x58>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 8001702:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <timerRun+0x58>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170a:	2b00      	cmp	r3, #0
 800170c:	dc04      	bgt.n	8001718 <timerRun+0x40>
				timer_flag[i] = 1;
 800170e:	4a09      	ldr	r2, [pc, #36]	@ (8001734 <timerRun+0x5c>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2101      	movs	r1, #1
 8001714:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++) {
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3301      	adds	r3, #1
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b09      	cmp	r3, #9
 8001722:	dddf      	ble.n	80016e4 <timerRun+0xc>
			}
		}
	}


}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	2000016c 	.word	0x2000016c
 8001734:	20000194 	.word	0x20000194

08001738 <turnOn_RED1>:
 *  Created on: Oct 27, 2024
 *      Author: admin
 */

#include"traffic_light.h"
void turnOn_RED1() {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800173c:	2201      	movs	r2, #1
 800173e:	2140      	movs	r1, #64	@ 0x40
 8001740:	4807      	ldr	r0, [pc, #28]	@ (8001760 <turnOn_RED1+0x28>)
 8001742:	f000 fbd4 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800174c:	4804      	ldr	r0, [pc, #16]	@ (8001760 <turnOn_RED1+0x28>)
 800174e:	f000 fbce 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	2180      	movs	r1, #128	@ 0x80
 8001756:	4802      	ldr	r0, [pc, #8]	@ (8001760 <turnOn_RED1+0x28>)
 8001758:	f000 fbc9 	bl	8001eee <HAL_GPIO_WritePin>
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40010800 	.word	0x40010800

08001764 <turnOn_GREEN1>:
void turnOn_GREEN1() {
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	2140      	movs	r1, #64	@ 0x40
 800176c:	4807      	ldr	r0, [pc, #28]	@ (800178c <turnOn_GREEN1+0x28>)
 800176e:	f000 fbbe 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001778:	4804      	ldr	r0, [pc, #16]	@ (800178c <turnOn_GREEN1+0x28>)
 800177a:	f000 fbb8 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	2180      	movs	r1, #128	@ 0x80
 8001782:	4802      	ldr	r0, [pc, #8]	@ (800178c <turnOn_GREEN1+0x28>)
 8001784:	f000 fbb3 	bl	8001eee <HAL_GPIO_WritePin>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40010800 	.word	0x40010800

08001790 <turnOn_YELLOW1>:
void turnOn_YELLOW1() {
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	2140      	movs	r1, #64	@ 0x40
 8001798:	4807      	ldr	r0, [pc, #28]	@ (80017b8 <turnOn_YELLOW1+0x28>)
 800179a:	f000 fba8 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017a4:	4804      	ldr	r0, [pc, #16]	@ (80017b8 <turnOn_YELLOW1+0x28>)
 80017a6:	f000 fba2 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	2180      	movs	r1, #128	@ 0x80
 80017ae:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <turnOn_YELLOW1+0x28>)
 80017b0:	f000 fb9d 	bl	8001eee <HAL_GPIO_WritePin>
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40010800 	.word	0x40010800

080017bc <turnOn_RED2>:
void turnOn_RED2() {
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017c6:	4808      	ldr	r0, [pc, #32]	@ (80017e8 <turnOn_RED2+0x2c>)
 80017c8:	f000 fb91 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017d2:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <turnOn_RED2+0x2c>)
 80017d4:	f000 fb8b 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017de:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <turnOn_RED2+0x2c>)
 80017e0:	f000 fb85 	bl	8001eee <HAL_GPIO_WritePin>
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40010800 	.word	0x40010800

080017ec <turnOn_GREEN2>:
void turnOn_GREEN2() {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017f6:	4808      	ldr	r0, [pc, #32]	@ (8001818 <turnOn_GREEN2+0x2c>)
 80017f8:	f000 fb79 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <turnOn_GREEN2+0x2c>)
 8001804:	f000 fb73 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800180e:	4802      	ldr	r0, [pc, #8]	@ (8001818 <turnOn_GREEN2+0x2c>)
 8001810:	f000 fb6d 	bl	8001eee <HAL_GPIO_WritePin>
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40010800 	.word	0x40010800

0800181c <turnOn_YELLOW2>:
void turnOn_YELLOW2() {
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001826:	4808      	ldr	r0, [pc, #32]	@ (8001848 <turnOn_YELLOW2+0x2c>)
 8001828:	f000 fb61 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001832:	4805      	ldr	r0, [pc, #20]	@ (8001848 <turnOn_YELLOW2+0x2c>)
 8001834:	f000 fb5b 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800183e:	4802      	ldr	r0, [pc, #8]	@ (8001848 <turnOn_YELLOW2+0x2c>)
 8001840:	f000 fb55 	bl	8001eee <HAL_GPIO_WritePin>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40010800 	.word	0x40010800

0800184c <turnOff>:
void turnOff(){
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	2140      	movs	r1, #64	@ 0x40
 8001854:	4810      	ldr	r0, [pc, #64]	@ (8001898 <turnOff+0x4c>)
 8001856:	f000 fb4a 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2180      	movs	r1, #128	@ 0x80
 800185e:	480e      	ldr	r0, [pc, #56]	@ (8001898 <turnOff+0x4c>)
 8001860:	f000 fb45 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800186a:	480b      	ldr	r0, [pc, #44]	@ (8001898 <turnOff+0x4c>)
 800186c:	f000 fb3f 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001876:	4808      	ldr	r0, [pc, #32]	@ (8001898 <turnOff+0x4c>)
 8001878:	f000 fb39 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001882:	4805      	ldr	r0, [pc, #20]	@ (8001898 <turnOff+0x4c>)
 8001884:	f000 fb33 	bl	8001eee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800188e:	4802      	ldr	r0, [pc, #8]	@ (8001898 <turnOff+0x4c>)
 8001890:	f000 fb2d 	bl	8001eee <HAL_GPIO_WritePin>
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40010800 	.word	0x40010800

0800189c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800189c:	f7ff fee4 	bl	8001668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a0:	480b      	ldr	r0, [pc, #44]	@ (80018d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018a2:	490c      	ldr	r1, [pc, #48]	@ (80018d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018a4:	4a0c      	ldr	r2, [pc, #48]	@ (80018d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a8:	e002      	b.n	80018b0 <LoopCopyDataInit>

080018aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ae:	3304      	adds	r3, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b4:	d3f9      	bcc.n	80018aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b6:	4a09      	ldr	r2, [pc, #36]	@ (80018dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018b8:	4c09      	ldr	r4, [pc, #36]	@ (80018e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018bc:	e001      	b.n	80018c2 <LoopFillZerobss>

080018be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c0:	3204      	adds	r2, #4

080018c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c4:	d3fb      	bcc.n	80018be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018c6:	f001 fb05 	bl	8002ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ca:	f7ff fd29 	bl	8001320 <main>
  bx lr
 80018ce:	4770      	bx	lr
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80018d8:	08002f60 	.word	0x08002f60
  ldr r2, =_sbss
 80018dc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80018e0:	200001c0 	.word	0x200001c0

080018e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC1_2_IRQHandler>
	...

080018e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <HAL_Init+0x28>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a07      	ldr	r2, [pc, #28]	@ (8001910 <HAL_Init+0x28>)
 80018f2:	f043 0310 	orr.w	r3, r3, #16
 80018f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f000 f923 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fe:	200f      	movs	r0, #15
 8001900:	f000 f808 	bl	8001914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001904:	f7ff fe24 	bl	8001550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40022000 	.word	0x40022000

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800191c:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_InitTick+0x54>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_InitTick+0x58>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800192a:	fbb3 f3f1 	udiv	r3, r3, r1
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f93b 	bl	8001bae <HAL_SYSTICK_Config>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00e      	b.n	8001960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d80a      	bhi.n	800195e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f000 f903 	bl	8001b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001954:	4a06      	ldr	r2, [pc, #24]	@ (8001970 <HAL_InitTick+0x5c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	2000000c 	.word	0x2000000c
 800196c:	20000014 	.word	0x20000014
 8001970:	20000010 	.word	0x20000010

08001974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_IncTick+0x1c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <HAL_IncTick+0x20>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a03      	ldr	r2, [pc, #12]	@ (8001994 <HAL_IncTick+0x20>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	20000014 	.word	0x20000014
 8001994:	200001bc 	.word	0x200001bc

08001998 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b02      	ldr	r3, [pc, #8]	@ (80019a8 <HAL_GetTick+0x10>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	200001bc 	.word	0x200001bc

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	db0b      	blt.n	8001a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	4906      	ldr	r1, [pc, #24]	@ (8001a44 <__NVIC_EnableIRQ+0x34>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	2001      	movs	r0, #1
 8001a32:	fa00 f202 	lsl.w	r2, r0, r2
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100

08001a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	db0a      	blt.n	8001a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	490c      	ldr	r1, [pc, #48]	@ (8001a94 <__NVIC_SetPriority+0x4c>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	0112      	lsls	r2, r2, #4
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a70:	e00a      	b.n	8001a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4908      	ldr	r1, [pc, #32]	@ (8001a98 <__NVIC_SetPriority+0x50>)
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	3b04      	subs	r3, #4
 8001a80:	0112      	lsls	r2, r2, #4
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	440b      	add	r3, r1
 8001a86:	761a      	strb	r2, [r3, #24]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000e100 	.word	0xe000e100
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	@ 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f1c3 0307 	rsb	r3, r3, #7
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	bf28      	it	cs
 8001aba:	2304      	movcs	r3, #4
 8001abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d902      	bls.n	8001acc <NVIC_EncodePriority+0x30>
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3b03      	subs	r3, #3
 8001aca:	e000      	b.n	8001ace <NVIC_EncodePriority+0x32>
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	401a      	ands	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	4313      	orrs	r3, r2
         );
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3724      	adds	r7, #36	@ 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7ff ff90 	bl	8001a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff2d 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff42 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff90 	bl	8001a9c <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5f 	bl	8001a48 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff35 	bl	8001a10 <__NVIC_EnableIRQ>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ffa2 	bl	8001b00 <SysTick_Config>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b08b      	sub	sp, #44	@ 0x2c
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bda:	e161      	b.n	8001ea0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 8150 	bne.w	8001e9a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a97      	ldr	r2, [pc, #604]	@ (8001e5c <HAL_GPIO_Init+0x294>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d05e      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c04:	4a95      	ldr	r2, [pc, #596]	@ (8001e5c <HAL_GPIO_Init+0x294>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d875      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c0a:	4a95      	ldr	r2, [pc, #596]	@ (8001e60 <HAL_GPIO_Init+0x298>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d058      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c10:	4a93      	ldr	r2, [pc, #588]	@ (8001e60 <HAL_GPIO_Init+0x298>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d86f      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c16:	4a93      	ldr	r2, [pc, #588]	@ (8001e64 <HAL_GPIO_Init+0x29c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d052      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c1c:	4a91      	ldr	r2, [pc, #580]	@ (8001e64 <HAL_GPIO_Init+0x29c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d869      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c22:	4a91      	ldr	r2, [pc, #580]	@ (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d04c      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c28:	4a8f      	ldr	r2, [pc, #572]	@ (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d863      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c2e:	4a8f      	ldr	r2, [pc, #572]	@ (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d046      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c34:	4a8d      	ldr	r2, [pc, #564]	@ (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d85d      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d82a      	bhi.n	8001c94 <HAL_GPIO_Init+0xcc>
 8001c3e:	2b12      	cmp	r3, #18
 8001c40:	d859      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c42:	a201      	add	r2, pc, #4	@ (adr r2, 8001c48 <HAL_GPIO_Init+0x80>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001c9d 	.word	0x08001c9d
 8001c50:	08001caf 	.word	0x08001caf
 8001c54:	08001cf1 	.word	0x08001cf1
 8001c58:	08001cf7 	.word	0x08001cf7
 8001c5c:	08001cf7 	.word	0x08001cf7
 8001c60:	08001cf7 	.word	0x08001cf7
 8001c64:	08001cf7 	.word	0x08001cf7
 8001c68:	08001cf7 	.word	0x08001cf7
 8001c6c:	08001cf7 	.word	0x08001cf7
 8001c70:	08001cf7 	.word	0x08001cf7
 8001c74:	08001cf7 	.word	0x08001cf7
 8001c78:	08001cf7 	.word	0x08001cf7
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cf7 	.word	0x08001cf7
 8001c84:	08001cf7 	.word	0x08001cf7
 8001c88:	08001cf7 	.word	0x08001cf7
 8001c8c:	08001ca5 	.word	0x08001ca5
 8001c90:	08001cb9 	.word	0x08001cb9
 8001c94:	4a76      	ldr	r2, [pc, #472]	@ (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c9a:	e02c      	b.n	8001cf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e029      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	623b      	str	r3, [r7, #32]
          break;
 8001cac:	e024      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	623b      	str	r3, [r7, #32]
          break;
 8001cb6:	e01f      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	330c      	adds	r3, #12
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e01a      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e013      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d105      	bne.n	8001ce4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	611a      	str	r2, [r3, #16]
          break;
 8001ce2:	e009      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	615a      	str	r2, [r3, #20]
          break;
 8001cee:	e003      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          break;
 8001cf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2bff      	cmp	r3, #255	@ 0xff
 8001cfc:	d801      	bhi.n	8001d02 <HAL_GPIO_Init+0x13a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	e001      	b.n	8001d06 <HAL_GPIO_Init+0x13e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3304      	adds	r3, #4
 8001d06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2bff      	cmp	r3, #255	@ 0xff
 8001d0c:	d802      	bhi.n	8001d14 <HAL_GPIO_Init+0x14c>
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	e002      	b.n	8001d1a <HAL_GPIO_Init+0x152>
 8001d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d16:	3b08      	subs	r3, #8
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	210f      	movs	r1, #15
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	6a39      	ldr	r1, [r7, #32]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	431a      	orrs	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80a9 	beq.w	8001e9a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d48:	4b4a      	ldr	r3, [pc, #296]	@ (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a49      	ldr	r2, [pc, #292]	@ (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b47      	ldr	r3, [pc, #284]	@ (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d60:	4a45      	ldr	r2, [pc, #276]	@ (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3d      	ldr	r2, [pc, #244]	@ (8001e7c <HAL_GPIO_Init+0x2b4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00d      	beq.n	8001da8 <HAL_GPIO_Init+0x1e0>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d007      	beq.n	8001da4 <HAL_GPIO_Init+0x1dc>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3b      	ldr	r2, [pc, #236]	@ (8001e84 <HAL_GPIO_Init+0x2bc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_GPIO_Init+0x1d8>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e004      	b.n	8001daa <HAL_GPIO_Init+0x1e2>
 8001da0:	2303      	movs	r3, #3
 8001da2:	e002      	b.n	8001daa <HAL_GPIO_Init+0x1e2>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <HAL_GPIO_Init+0x1e2>
 8001da8:	2300      	movs	r3, #0
 8001daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dac:	f002 0203 	and.w	r2, r2, #3
 8001db0:	0092      	lsls	r2, r2, #2
 8001db2:	4093      	lsls	r3, r2
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dba:	492f      	ldr	r1, [pc, #188]	@ (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	492b      	ldr	r1, [pc, #172]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001de2:	4b29      	ldr	r3, [pc, #164]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	4927      	ldr	r1, [pc, #156]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d006      	beq.n	8001e0a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dfc:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	4921      	ldr	r1, [pc, #132]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60cb      	str	r3, [r1, #12]
 8001e08:	e006      	b.n	8001e18 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	491d      	ldr	r1, [pc, #116]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d006      	beq.n	8001e32 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e24:	4b18      	ldr	r3, [pc, #96]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4917      	ldr	r1, [pc, #92]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	4913      	ldr	r1, [pc, #76]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01f      	beq.n	8001e8c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	490d      	ldr	r1, [pc, #52]	@ (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
 8001e58:	e01f      	b.n	8001e9a <HAL_GPIO_Init+0x2d2>
 8001e5a:	bf00      	nop
 8001e5c:	10320000 	.word	0x10320000
 8001e60:	10310000 	.word	0x10310000
 8001e64:	10220000 	.word	0x10220000
 8001e68:	10210000 	.word	0x10210000
 8001e6c:	10120000 	.word	0x10120000
 8001e70:	10110000 	.word	0x10110000
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40010800 	.word	0x40010800
 8001e80:	40010c00 	.word	0x40010c00
 8001e84:	40011000 	.word	0x40011000
 8001e88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_GPIO_Init+0x2f4>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	4909      	ldr	r1, [pc, #36]	@ (8001ebc <HAL_GPIO_Init+0x2f4>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f47f ae96 	bne.w	8001bdc <HAL_GPIO_Init+0x14>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	372c      	adds	r7, #44	@ 0x2c
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e001      	b.n	8001ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	807b      	strh	r3, [r7, #2]
 8001efa:	4613      	mov	r3, r2
 8001efc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001efe:	787b      	ldrb	r3, [r7, #1]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f04:	887a      	ldrh	r2, [r7, #2]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f0a:	e003      	b.n	8001f14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	041a      	lsls	r2, r3, #16
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	611a      	str	r2, [r3, #16]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f30:	887a      	ldrh	r2, [r7, #2]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4013      	ands	r3, r2
 8001f36:	041a      	lsls	r2, r3, #16
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	400b      	ands	r3, r1
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	611a      	str	r2, [r3, #16]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e272      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8087 	beq.w	800207e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f70:	4b92      	ldr	r3, [pc, #584]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d00c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f7c:	4b8f      	ldr	r3, [pc, #572]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d112      	bne.n	8001fae <HAL_RCC_OscConfig+0x5e>
 8001f88:	4b8c      	ldr	r3, [pc, #560]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f94:	d10b      	bne.n	8001fae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f96:	4b89      	ldr	r3, [pc, #548]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d06c      	beq.n	800207c <HAL_RCC_OscConfig+0x12c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d168      	bne.n	800207c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e24c      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x76>
 8001fb8:	4b80      	ldr	r3, [pc, #512]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a7f      	ldr	r2, [pc, #508]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e02e      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x98>
 8001fce:	4b7b      	ldr	r3, [pc, #492]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a7a      	ldr	r2, [pc, #488]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b78      	ldr	r3, [pc, #480]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a77      	ldr	r2, [pc, #476]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e01d      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0xbc>
 8001ff2:	4b72      	ldr	r3, [pc, #456]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a71      	ldr	r2, [pc, #452]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b6f      	ldr	r3, [pc, #444]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6e      	ldr	r2, [pc, #440]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 800200c:	4b6b      	ldr	r3, [pc, #428]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a6a      	ldr	r2, [pc, #424]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b68      	ldr	r3, [pc, #416]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a67      	ldr	r2, [pc, #412]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 800201e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002022:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fcb4 	bl	8001998 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff fcb0 	bl	8001998 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	@ 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e200      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b5d      	ldr	r3, [pc, #372]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0xe4>
 8002052:	e014      	b.n	800207e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fca0 	bl	8001998 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff fc9c 	bl	8001998 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	@ 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1ec      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	4b53      	ldr	r3, [pc, #332]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x10c>
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d063      	beq.n	8002152 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800208a:	4b4c      	ldr	r3, [pc, #304]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002096:	4b49      	ldr	r3, [pc, #292]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d11c      	bne.n	80020dc <HAL_RCC_OscConfig+0x18c>
 80020a2:	4b46      	ldr	r3, [pc, #280]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d116      	bne.n	80020dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	4b43      	ldr	r3, [pc, #268]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x176>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e1c0      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c6:	4b3d      	ldr	r3, [pc, #244]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4939      	ldr	r1, [pc, #228]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	e03a      	b.n	8002152 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e4:	4b36      	ldr	r3, [pc, #216]	@ (80021c0 <HAL_RCC_OscConfig+0x270>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff fc55 	bl	8001998 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f2:	f7ff fc51 	bl	8001998 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e1a1      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	4b2d      	ldr	r3, [pc, #180]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b2a      	ldr	r3, [pc, #168]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4927      	ldr	r1, [pc, #156]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
 8002124:	e015      	b.n	8002152 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002126:	4b26      	ldr	r3, [pc, #152]	@ (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fc34 	bl	8001998 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002134:	f7ff fc30 	bl	8001998 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e180      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	4b1d      	ldr	r3, [pc, #116]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d03a      	beq.n	80021d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d019      	beq.n	800219a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002166:	4b17      	ldr	r3, [pc, #92]	@ (80021c4 <HAL_RCC_OscConfig+0x274>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216c:	f7ff fc14 	bl	8001998 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002174:	f7ff fc10 	bl	8001998 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e160      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	4b0d      	ldr	r3, [pc, #52]	@ (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002192:	2001      	movs	r0, #1
 8002194:	f000 fa9c 	bl	80026d0 <RCC_Delay>
 8002198:	e01c      	b.n	80021d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219a:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <HAL_RCC_OscConfig+0x274>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7ff fbfa 	bl	8001998 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a6:	e00f      	b.n	80021c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7ff fbf6 	bl	8001998 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d908      	bls.n	80021c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e146      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	42420000 	.word	0x42420000
 80021c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	4b92      	ldr	r3, [pc, #584]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e9      	bne.n	80021a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80a6 	beq.w	800232e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e6:	4b8b      	ldr	r3, [pc, #556]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10d      	bne.n	800220e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	4b88      	ldr	r3, [pc, #544]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a87      	ldr	r2, [pc, #540]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	61d3      	str	r3, [r2, #28]
 80021fe:	4b85      	ldr	r3, [pc, #532]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220a:	2301      	movs	r3, #1
 800220c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220e:	4b82      	ldr	r3, [pc, #520]	@ (8002418 <HAL_RCC_OscConfig+0x4c8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221a:	4b7f      	ldr	r3, [pc, #508]	@ (8002418 <HAL_RCC_OscConfig+0x4c8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7e      	ldr	r2, [pc, #504]	@ (8002418 <HAL_RCC_OscConfig+0x4c8>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7ff fbb7 	bl	8001998 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7ff fbb3 	bl	8001998 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	@ 0x64
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e103      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b75      	ldr	r3, [pc, #468]	@ (8002418 <HAL_RCC_OscConfig+0x4c8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x312>
 8002254:	4b6f      	ldr	r3, [pc, #444]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a6e      	ldr	r2, [pc, #440]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	e02d      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x334>
 800226a:	4b6a      	ldr	r3, [pc, #424]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4a69      	ldr	r2, [pc, #420]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	6213      	str	r3, [r2, #32]
 8002276:	4b67      	ldr	r3, [pc, #412]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a66      	ldr	r2, [pc, #408]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f023 0304 	bic.w	r3, r3, #4
 8002280:	6213      	str	r3, [r2, #32]
 8002282:	e01c      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d10c      	bne.n	80022a6 <HAL_RCC_OscConfig+0x356>
 800228c:	4b61      	ldr	r3, [pc, #388]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4a60      	ldr	r2, [pc, #384]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	6213      	str	r3, [r2, #32]
 8002298:	4b5e      	ldr	r3, [pc, #376]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a5d      	ldr	r2, [pc, #372]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	e00b      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 80022a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4a5a      	ldr	r2, [pc, #360]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	6213      	str	r3, [r2, #32]
 80022b2:	4b58      	ldr	r3, [pc, #352]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a57      	ldr	r2, [pc, #348]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d015      	beq.n	80022f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c6:	f7ff fb67 	bl	8001998 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7ff fb63 	bl	8001998 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0b1      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ee      	beq.n	80022ce <HAL_RCC_OscConfig+0x37e>
 80022f0:	e014      	b.n	800231c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7ff fb51 	bl	8001998 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7ff fb4d 	bl	8001998 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e09b      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002310:	4b40      	ldr	r3, [pc, #256]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ee      	bne.n	80022fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d105      	bne.n	800232e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002322:	4b3c      	ldr	r3, [pc, #240]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	4a3b      	ldr	r2, [pc, #236]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800232c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8087 	beq.w	8002446 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002338:	4b36      	ldr	r3, [pc, #216]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b08      	cmp	r3, #8
 8002342:	d061      	beq.n	8002408 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d146      	bne.n	80023da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234c:	4b33      	ldr	r3, [pc, #204]	@ (800241c <HAL_RCC_OscConfig+0x4cc>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7ff fb21 	bl	8001998 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235a:	f7ff fb1d 	bl	8001998 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e06d      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236c:	4b29      	ldr	r3, [pc, #164]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002380:	d108      	bne.n	8002394 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002382:	4b24      	ldr	r3, [pc, #144]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	4921      	ldr	r1, [pc, #132]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002394:	4b1f      	ldr	r3, [pc, #124]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a19      	ldr	r1, [r3, #32]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	430b      	orrs	r3, r1
 80023a6:	491b      	ldr	r1, [pc, #108]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ac:	4b1b      	ldr	r3, [pc, #108]	@ (800241c <HAL_RCC_OscConfig+0x4cc>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7ff faf1 	bl	8001998 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ba:	f7ff faed 	bl	8001998 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e03d      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023cc:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x46a>
 80023d8:	e035      	b.n	8002446 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b10      	ldr	r3, [pc, #64]	@ (800241c <HAL_RCC_OscConfig+0x4cc>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fada 	bl	8001998 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7ff fad6 	bl	8001998 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e026      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x498>
 8002406:	e01e      	b.n	8002446 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d107      	bne.n	8002420 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e019      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
 8002414:	40021000 	.word	0x40021000
 8002418:	40007000 	.word	0x40007000
 800241c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_RCC_OscConfig+0x500>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	429a      	cmp	r2, r3
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000

08002454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0d0      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002468:	4b6a      	ldr	r3, [pc, #424]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d910      	bls.n	8002498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b67      	ldr	r3, [pc, #412]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 0207 	bic.w	r2, r3, #7
 800247e:	4965      	ldr	r1, [pc, #404]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b63      	ldr	r3, [pc, #396]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0b8      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b0:	4b59      	ldr	r3, [pc, #356]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4a58      	ldr	r2, [pc, #352]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c8:	4b53      	ldr	r3, [pc, #332]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a52      	ldr	r2, [pc, #328]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4b50      	ldr	r3, [pc, #320]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	494d      	ldr	r1, [pc, #308]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d040      	beq.n	8002574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b47      	ldr	r3, [pc, #284]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d115      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e07f      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002512:	4b41      	ldr	r3, [pc, #260]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e073      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002522:	4b3d      	ldr	r3, [pc, #244]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e06b      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002532:	4b39      	ldr	r3, [pc, #228]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f023 0203 	bic.w	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4936      	ldr	r1, [pc, #216]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002544:	f7ff fa28 	bl	8001998 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	e00a      	b.n	8002562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254c:	f7ff fa24 	bl	8001998 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e053      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	4b2d      	ldr	r3, [pc, #180]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 020c 	and.w	r2, r3, #12
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	429a      	cmp	r2, r3
 8002572:	d1eb      	bne.n	800254c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002574:	4b27      	ldr	r3, [pc, #156]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d210      	bcs.n	80025a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 0207 	bic.w	r2, r3, #7
 800258a:	4922      	ldr	r1, [pc, #136]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b20      	ldr	r3, [pc, #128]	@ (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e032      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b0:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4916      	ldr	r1, [pc, #88]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ce:	4b12      	ldr	r3, [pc, #72]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	490e      	ldr	r1, [pc, #56]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025e2:	f000 f821 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 80025e6:	4602      	mov	r2, r0
 80025e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	490a      	ldr	r1, [pc, #40]	@ (800261c <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	5ccb      	ldrb	r3, [r1, r3]
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	4a09      	ldr	r2, [pc, #36]	@ (8002620 <HAL_RCC_ClockConfig+0x1cc>)
 80025fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025fe:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <HAL_RCC_ClockConfig+0x1d0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff f986 	bl	8001914 <HAL_InitTick>

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40022000 	.word	0x40022000
 8002618:	40021000 	.word	0x40021000
 800261c:	08002f34 	.word	0x08002f34
 8002620:	2000000c 	.word	0x2000000c
 8002624:	20000010 	.word	0x20000010

08002628 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002642:	4b1e      	ldr	r3, [pc, #120]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b04      	cmp	r3, #4
 8002650:	d002      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x30>
 8002652:	2b08      	cmp	r3, #8
 8002654:	d003      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0x36>
 8002656:	e027      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002658:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800265a:	613b      	str	r3, [r7, #16]
      break;
 800265c:	e027      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	0c9b      	lsrs	r3, r3, #18
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	4a17      	ldr	r2, [pc, #92]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002668:	5cd3      	ldrb	r3, [r2, r3]
 800266a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d010      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002676:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	0c5b      	lsrs	r3, r3, #17
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	4a11      	ldr	r2, [pc, #68]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a0d      	ldr	r2, [pc, #52]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800268a:	fb03 f202 	mul.w	r2, r3, r2
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e004      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a0c      	ldr	r2, [pc, #48]	@ (80026cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	613b      	str	r3, [r7, #16]
      break;
 80026a6:	e002      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80026aa:	613b      	str	r3, [r7, #16]
      break;
 80026ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ae:	693b      	ldr	r3, [r7, #16]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	007a1200 	.word	0x007a1200
 80026c4:	08002f44 	.word	0x08002f44
 80026c8:	08002f54 	.word	0x08002f54
 80026cc:	003d0900 	.word	0x003d0900

080026d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <RCC_Delay+0x34>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <RCC_Delay+0x38>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0a5b      	lsrs	r3, r3, #9
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026ec:	bf00      	nop
  }
  while (Delay --);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1e5a      	subs	r2, r3, #1
 80026f2:	60fa      	str	r2, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f9      	bne.n	80026ec <RCC_Delay+0x1c>
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	2000000c 	.word	0x2000000c
 8002708:	10624dd3 	.word	0x10624dd3

0800270c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e041      	b.n	80027a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fe ff3e 	bl	80015b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f000 fa56 	bl	8002bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d001      	beq.n	80027c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e035      	b.n	8002830 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a16      	ldr	r2, [pc, #88]	@ (800283c <HAL_TIM_Base_Start_IT+0x90>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d009      	beq.n	80027fa <HAL_TIM_Base_Start_IT+0x4e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ee:	d004      	beq.n	80027fa <HAL_TIM_Base_Start_IT+0x4e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a12      	ldr	r2, [pc, #72]	@ (8002840 <HAL_TIM_Base_Start_IT+0x94>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d111      	bne.n	800281e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b06      	cmp	r3, #6
 800280a:	d010      	beq.n	800282e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281c:	e007      	b.n	800282e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0201 	orr.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40000400 	.word	0x40000400

08002844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d020      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0202 	mvn.w	r2, #2
 8002878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f998 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 8002894:	e005      	b.n	80028a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f98b 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f99a 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d020      	beq.n	80028f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01b      	beq.n	80028f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0204 	mvn.w	r2, #4
 80028c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f972 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f965 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f974 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d020      	beq.n	8002940 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01b      	beq.n	8002940 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0208 	mvn.w	r2, #8
 8002910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2204      	movs	r2, #4
 8002916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f94c 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f93f 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f94e 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	d020      	beq.n	800298c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0210 	mvn.w	r2, #16
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2208      	movs	r2, #8
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f926 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f919 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f928 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00c      	beq.n	80029b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0201 	mvn.w	r2, #1
 80029a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe fdbe 	bl	800152c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00c      	beq.n	80029d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa6f 	bl	8002eb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f8f8 	bl	8002be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0220 	mvn.w	r2, #32
 8002a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fa42 	bl	8002ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_TIM_ConfigClockSource+0x1c>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0b4      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x186>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a78:	d03e      	beq.n	8002af8 <HAL_TIM_ConfigClockSource+0xd4>
 8002a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a7e:	f200 8087 	bhi.w	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a86:	f000 8086 	beq.w	8002b96 <HAL_TIM_ConfigClockSource+0x172>
 8002a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a8e:	d87f      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002a90:	2b70      	cmp	r3, #112	@ 0x70
 8002a92:	d01a      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0xa6>
 8002a94:	2b70      	cmp	r3, #112	@ 0x70
 8002a96:	d87b      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002a98:	2b60      	cmp	r3, #96	@ 0x60
 8002a9a:	d050      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x11a>
 8002a9c:	2b60      	cmp	r3, #96	@ 0x60
 8002a9e:	d877      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa0:	2b50      	cmp	r3, #80	@ 0x50
 8002aa2:	d03c      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0xfa>
 8002aa4:	2b50      	cmp	r3, #80	@ 0x50
 8002aa6:	d873      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa8:	2b40      	cmp	r3, #64	@ 0x40
 8002aaa:	d058      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x13a>
 8002aac:	2b40      	cmp	r3, #64	@ 0x40
 8002aae:	d86f      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab0:	2b30      	cmp	r3, #48	@ 0x30
 8002ab2:	d064      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002ab4:	2b30      	cmp	r3, #48	@ 0x30
 8002ab6:	d86b      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d060      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d867      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d05c      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d05a      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002ac8:	e062      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ada:	f000 f96a 	bl	8002db2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	609a      	str	r2, [r3, #8]
      break;
 8002af6:	e04f      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b08:	f000 f953 	bl	8002db2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b1a:	609a      	str	r2, [r3, #8]
      break;
 8002b1c:	e03c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f000 f8ca 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2150      	movs	r1, #80	@ 0x50
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f921 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b3c:	e02c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f000 f8e8 	bl	8002d20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2160      	movs	r1, #96	@ 0x60
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f911 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b5c:	e01c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f000 f8aa 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2140      	movs	r1, #64	@ 0x40
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f901 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b7c:	e00c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4619      	mov	r1, r3
 8002b88:	4610      	mov	r0, r2
 8002b8a:	f000 f8f8 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b8e:	e003      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e000      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
	...

08002bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a2b      	ldr	r2, [pc, #172]	@ (8002cbc <TIM_Base_SetConfig+0xc0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d007      	beq.n	8002c24 <TIM_Base_SetConfig+0x28>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c1a:	d003      	beq.n	8002c24 <TIM_Base_SetConfig+0x28>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a28      	ldr	r2, [pc, #160]	@ (8002cc0 <TIM_Base_SetConfig+0xc4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d108      	bne.n	8002c36 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a20      	ldr	r2, [pc, #128]	@ (8002cbc <TIM_Base_SetConfig+0xc0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d007      	beq.n	8002c4e <TIM_Base_SetConfig+0x52>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c44:	d003      	beq.n	8002c4e <TIM_Base_SetConfig+0x52>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc0 <TIM_Base_SetConfig+0xc4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d108      	bne.n	8002c60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a0d      	ldr	r2, [pc, #52]	@ (8002cbc <TIM_Base_SetConfig+0xc0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d103      	bne.n	8002c94 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f023 0201 	bic.w	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	40012c00 	.word	0x40012c00
 8002cc0:	40000400 	.word	0x40000400

08002cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f023 0201 	bic.w	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f023 030a 	bic.w	r3, r3, #10
 8002d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f023 0210 	bic.w	r2, r3, #16
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	031b      	lsls	r3, r3, #12
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	621a      	str	r2, [r3, #32]
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b085      	sub	sp, #20
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f043 0307 	orr.w	r3, r3, #7
 8002da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	609a      	str	r2, [r3, #8]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b087      	sub	sp, #28
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	021a      	lsls	r2, r3, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	609a      	str	r2, [r3, #8]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e041      	b.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a14      	ldr	r2, [pc, #80]	@ (8002e98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d009      	beq.n	8002e60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e54:	d004      	beq.n	8002e60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a10      	ldr	r2, [pc, #64]	@ (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d10c      	bne.n	8002e7a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	40000400 	.word	0x40000400

08002ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <memset>:
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4402      	add	r2, r0
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d100      	bne.n	8002ece <memset+0xa>
 8002ecc:	4770      	bx	lr
 8002ece:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed2:	e7f9      	b.n	8002ec8 <memset+0x4>

08002ed4 <__libc_init_array>:
 8002ed4:	b570      	push	{r4, r5, r6, lr}
 8002ed6:	2600      	movs	r6, #0
 8002ed8:	4d0c      	ldr	r5, [pc, #48]	@ (8002f0c <__libc_init_array+0x38>)
 8002eda:	4c0d      	ldr	r4, [pc, #52]	@ (8002f10 <__libc_init_array+0x3c>)
 8002edc:	1b64      	subs	r4, r4, r5
 8002ede:	10a4      	asrs	r4, r4, #2
 8002ee0:	42a6      	cmp	r6, r4
 8002ee2:	d109      	bne.n	8002ef8 <__libc_init_array+0x24>
 8002ee4:	f000 f81a 	bl	8002f1c <_init>
 8002ee8:	2600      	movs	r6, #0
 8002eea:	4d0a      	ldr	r5, [pc, #40]	@ (8002f14 <__libc_init_array+0x40>)
 8002eec:	4c0a      	ldr	r4, [pc, #40]	@ (8002f18 <__libc_init_array+0x44>)
 8002eee:	1b64      	subs	r4, r4, r5
 8002ef0:	10a4      	asrs	r4, r4, #2
 8002ef2:	42a6      	cmp	r6, r4
 8002ef4:	d105      	bne.n	8002f02 <__libc_init_array+0x2e>
 8002ef6:	bd70      	pop	{r4, r5, r6, pc}
 8002ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002efc:	4798      	blx	r3
 8002efe:	3601      	adds	r6, #1
 8002f00:	e7ee      	b.n	8002ee0 <__libc_init_array+0xc>
 8002f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f06:	4798      	blx	r3
 8002f08:	3601      	adds	r6, #1
 8002f0a:	e7f2      	b.n	8002ef2 <__libc_init_array+0x1e>
 8002f0c:	08002f58 	.word	0x08002f58
 8002f10:	08002f58 	.word	0x08002f58
 8002f14:	08002f58 	.word	0x08002f58
 8002f18:	08002f5c 	.word	0x08002f5c

08002f1c <_init>:
 8002f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1e:	bf00      	nop
 8002f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f22:	bc08      	pop	{r3}
 8002f24:	469e      	mov	lr, r3
 8002f26:	4770      	bx	lr

08002f28 <_fini>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	bf00      	nop
 8002f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2e:	bc08      	pop	{r3}
 8002f30:	469e      	mov	lr, r3
 8002f32:	4770      	bx	lr
