
LAB3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d00  08002d00  00003d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d24  08002d24  00004018  2**0
                  CONTENTS
  4 .ARM          00000000  08002d24  08002d24  00004018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d24  08002d24  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d24  08002d24  00003d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d28  08002d28  00003d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002d2c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000018  08002d44  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08002d44  000041c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008795  00000000  00000000  00004041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cbf  00000000  00000000  0000c7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0000e498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e1  00000000  00000000  0000ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171c6  00000000  00000000  0000f6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0d4  00000000  00000000  000268b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082660  00000000  00000000  0003398b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5feb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d0  00000000  00000000  000b6030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000b8900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ce8 	.word	0x08002ce8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002ce8 	.word	0x08002ce8

0800014c <isButtonPressed>:
int KeyReg1[MAX_BUTTON] = { NORMAL_STATE };
int KeyReg2[MAX_BUTTON] = { NORMAL_STATE };
int KeyReg3[MAX_BUTTON] = { NORMAL_STATE }; // trạng thái ổn định trước đó
int button_flag[MAX_BUTTON];

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000d4 	.word	0x200000d4

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a06      	ldr	r2, [pc, #24]	@ (80001a4 <subKeyProcess+0x24>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000192:	2110      	movs	r1, #16
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <subKeyProcess+0x28>)
 8000196:	f001 fda8 	bl	8001cea <HAL_GPIO_TogglePin>
}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	200000d4 	.word	0x200000d4
 80001a8:	40010800 	.word	0x40010800

080001ac <getKeyInput>:

void getKeyInput() {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
	KeyReg0[0] = KeyReg1[0];
 80001b2:	4b36      	ldr	r3, [pc, #216]	@ (800028c <getKeyInput+0xe0>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a36      	ldr	r2, [pc, #216]	@ (8000290 <getKeyInput+0xe4>)
 80001b8:	6013      	str	r3, [r2, #0]
	KeyReg1[0] = KeyReg2[0];
 80001ba:	4b36      	ldr	r3, [pc, #216]	@ (8000294 <getKeyInput+0xe8>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a33      	ldr	r2, [pc, #204]	@ (800028c <getKeyInput+0xe0>)
 80001c0:	6013      	str	r3, [r2, #0]
	KeyReg2[0] = HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin);
 80001c2:	2102      	movs	r1, #2
 80001c4:	4834      	ldr	r0, [pc, #208]	@ (8000298 <getKeyInput+0xec>)
 80001c6:	f001 fd61 	bl	8001c8c <HAL_GPIO_ReadPin>
 80001ca:	4603      	mov	r3, r0
 80001cc:	461a      	mov	r2, r3
 80001ce:	4b31      	ldr	r3, [pc, #196]	@ (8000294 <getKeyInput+0xe8>)
 80001d0:	601a      	str	r2, [r3, #0]

	KeyReg0[1] = KeyReg1[1];
 80001d2:	4b2e      	ldr	r3, [pc, #184]	@ (800028c <getKeyInput+0xe0>)
 80001d4:	685b      	ldr	r3, [r3, #4]
 80001d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000290 <getKeyInput+0xe4>)
 80001d8:	6053      	str	r3, [r2, #4]
	KeyReg1[1] = KeyReg2[1];
 80001da:	4b2e      	ldr	r3, [pc, #184]	@ (8000294 <getKeyInput+0xe8>)
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	4a2b      	ldr	r2, [pc, #172]	@ (800028c <getKeyInput+0xe0>)
 80001e0:	6053      	str	r3, [r2, #4]
	KeyReg2[1] = HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin);
 80001e2:	2104      	movs	r1, #4
 80001e4:	482c      	ldr	r0, [pc, #176]	@ (8000298 <getKeyInput+0xec>)
 80001e6:	f001 fd51 	bl	8001c8c <HAL_GPIO_ReadPin>
 80001ea:	4603      	mov	r3, r0
 80001ec:	461a      	mov	r2, r3
 80001ee:	4b29      	ldr	r3, [pc, #164]	@ (8000294 <getKeyInput+0xe8>)
 80001f0:	605a      	str	r2, [r3, #4]

	KeyReg0[2] = KeyReg1[2];
 80001f2:	4b26      	ldr	r3, [pc, #152]	@ (800028c <getKeyInput+0xe0>)
 80001f4:	689b      	ldr	r3, [r3, #8]
 80001f6:	4a26      	ldr	r2, [pc, #152]	@ (8000290 <getKeyInput+0xe4>)
 80001f8:	6093      	str	r3, [r2, #8]
	KeyReg1[2] = KeyReg2[2];
 80001fa:	4b26      	ldr	r3, [pc, #152]	@ (8000294 <getKeyInput+0xe8>)
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	4a23      	ldr	r2, [pc, #140]	@ (800028c <getKeyInput+0xe0>)
 8000200:	6093      	str	r3, [r2, #8]
	KeyReg2[2] = HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin);
 8000202:	2108      	movs	r1, #8
 8000204:	4824      	ldr	r0, [pc, #144]	@ (8000298 <getKeyInput+0xec>)
 8000206:	f001 fd41 	bl	8001c8c <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	461a      	mov	r2, r3
 800020e:	4b21      	ldr	r3, [pc, #132]	@ (8000294 <getKeyInput+0xe8>)
 8000210:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < MAX_BUTTON; i++) {
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	e031      	b.n	800027c <getKeyInput+0xd0>
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) { // xử lý ổn định button
 8000218:	4a1d      	ldr	r2, [pc, #116]	@ (8000290 <getKeyInput+0xe4>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	491a      	ldr	r1, [pc, #104]	@ (800028c <getKeyInput+0xe0>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d124      	bne.n	8000276 <getKeyInput+0xca>
 800022c:	4a17      	ldr	r2, [pc, #92]	@ (800028c <getKeyInput+0xe0>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	4917      	ldr	r1, [pc, #92]	@ (8000294 <getKeyInput+0xe8>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d11a      	bne.n	8000276 <getKeyInput+0xca>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000240:	4a16      	ldr	r2, [pc, #88]	@ (800029c <getKeyInput+0xf0>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	4912      	ldr	r1, [pc, #72]	@ (8000294 <getKeyInput+0xe8>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000250:	429a      	cmp	r2, r3
 8000252:	d010      	beq.n	8000276 <getKeyInput+0xca>
				KeyReg3[i] = KeyReg2[i];
 8000254:	4a0f      	ldr	r2, [pc, #60]	@ (8000294 <getKeyInput+0xe8>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <getKeyInput+0xf0>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg2[i] == PRESSED_STATE) { // nhấn thả
 8000264:	4a0b      	ldr	r2, [pc, #44]	@ (8000294 <getKeyInput+0xe8>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d102      	bne.n	8000276 <getKeyInput+0xca>
					//TODO
					subKeyProcess(i);
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f7ff ff85 	bl	8000180 <subKeyProcess>
	for (int i = 0; i < MAX_BUTTON; i++) {
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	3301      	adds	r3, #1
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b09      	cmp	r3, #9
 8000280:	ddca      	ble.n	8000218 <getKeyInput+0x6c>
			 KeyReg3[i] = NORMAL_STATE;	// Luôn để Key3 != Key2
			 }
			 }*/
		}
	}
}
 8000282:	bf00      	nop
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	2000005c 	.word	0x2000005c
 8000290:	20000034 	.word	0x20000034
 8000294:	20000084 	.word	0x20000084
 8000298:	40010800 	.word	0x40010800
 800029c:	200000ac 	.word	0x200000ac

080002a0 <scanLEDs>:
 *      Author: admin
 */

#include"fsm_automatic.h"
#include"led7_segment.h"
void scanLEDs(int time_1, int time_2) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	updateClockBuffer(time_1, time_2);
 80002aa:	6839      	ldr	r1, [r7, #0]
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f000 faf3 	bl	8000898 <updateClockBuffer>
	update7SEG_2(index_led_2++ % 2);
 80002b2:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <scanLEDs+0x58>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	1c5a      	adds	r2, r3, #1
 80002b8:	490f      	ldr	r1, [pc, #60]	@ (80002f8 <scanLEDs+0x58>)
 80002ba:	600a      	str	r2, [r1, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	bfb8      	it	lt
 80002c4:	425b      	neglt	r3, r3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fb5a 	bl	8000980 <update7SEG_2>
	update7SEG_1(index_led_1++ % 2);
 80002cc:	4b0b      	ldr	r3, [pc, #44]	@ (80002fc <scanLEDs+0x5c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	490a      	ldr	r1, [pc, #40]	@ (80002fc <scanLEDs+0x5c>)
 80002d4:	600a      	str	r2, [r1, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	f003 0301 	and.w	r3, r3, #1
 80002dc:	bfb8      	it	lt
 80002de:	425b      	neglt	r3, r3
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fb15 	bl	8000910 <update7SEG_1>
	setTimer(3, 25);
 80002e6:	2119      	movs	r1, #25
 80002e8:	2003      	movs	r0, #3
 80002ea:	f001 f8d1 	bl	8001490 <setTimer>
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000110 	.word	0x20000110
 80002fc:	2000010c 	.word	0x2000010c

08000300 <fsm_automatic_run>:

void fsm_automatic_run() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0

	if (isTimerExpired(0) == 1) {
 8000304:	2000      	movs	r0, #0
 8000306:	f001 f8db 	bl	80014c0 <isTimerExpired>
 800030a:	4603      	mov	r3, r0
 800030c:	2b01      	cmp	r3, #1
 800030e:	d107      	bne.n	8000320 <fsm_automatic_run+0x20>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000310:	2120      	movs	r1, #32
 8000312:	489f      	ldr	r0, [pc, #636]	@ (8000590 <fsm_automatic_run+0x290>)
 8000314:	f001 fce9 	bl	8001cea <HAL_GPIO_TogglePin>
		setTimer(0, 100);
 8000318:	2164      	movs	r1, #100	@ 0x64
 800031a:	2000      	movs	r0, #0
 800031c:	f001 f8b8 	bl	8001490 <setTimer>
	}

	switch (status) {
 8000320:	4b9c      	ldr	r3, [pc, #624]	@ (8000594 <fsm_automatic_run+0x294>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	3b01      	subs	r3, #1
 8000326:	2b04      	cmp	r3, #4
 8000328:	f200 818f 	bhi.w	800064a <fsm_automatic_run+0x34a>
 800032c:	a201      	add	r2, pc, #4	@ (adr r2, 8000334 <fsm_automatic_run+0x34>)
 800032e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000332:	bf00      	nop
 8000334:	08000349 	.word	0x08000349
 8000338:	080003a1 	.word	0x080003a1
 800033c:	08000457 	.word	0x08000457
 8000340:	080004f7 	.word	0x080004f7
 8000344:	080005ad 	.word	0x080005ad
	case INIT:

		TIME_RED = 5;
 8000348:	4b93      	ldr	r3, [pc, #588]	@ (8000598 <fsm_automatic_run+0x298>)
 800034a:	2205      	movs	r2, #5
 800034c:	601a      	str	r2, [r3, #0]
		TIME_YELLOW = 2;
 800034e:	4b93      	ldr	r3, [pc, #588]	@ (800059c <fsm_automatic_run+0x29c>)
 8000350:	2202      	movs	r2, #2
 8000352:	601a      	str	r2, [r3, #0]
		TIME_GREEN = 3;
 8000354:	4b92      	ldr	r3, [pc, #584]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 8000356:	2203      	movs	r2, #3
 8000358:	601a      	str	r2, [r3, #0]
		status = RED_GREEN;
 800035a:	4b8e      	ldr	r3, [pc, #568]	@ (8000594 <fsm_automatic_run+0x294>)
 800035c:	2202      	movs	r2, #2
 800035e:	601a      	str	r2, [r3, #0]

		time_1 = TIME_GREEN - 1;
 8000360:	4b8f      	ldr	r3, [pc, #572]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3b01      	subs	r3, #1
 8000366:	4a8f      	ldr	r2, [pc, #572]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 8000368:	6013      	str	r3, [r2, #0]
		time_2 = TIME_RED - 1;
 800036a:	4b8b      	ldr	r3, [pc, #556]	@ (8000598 <fsm_automatic_run+0x298>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3b01      	subs	r3, #1
 8000370:	4a8d      	ldr	r2, [pc, #564]	@ (80005a8 <fsm_automatic_run+0x2a8>)
 8000372:	6013      	str	r3, [r2, #0]
		setTimer(0, 100); //timer DOT
 8000374:	2164      	movs	r1, #100	@ 0x64
 8000376:	2000      	movs	r0, #0
 8000378:	f001 f88a 	bl	8001490 <setTimer>
		setTimer(1, TIME_GREEN * 100);
 800037c:	4b88      	ldr	r3, [pc, #544]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2264      	movs	r2, #100	@ 0x64
 8000382:	fb02 f303 	mul.w	r3, r2, r3
 8000386:	4619      	mov	r1, r3
 8000388:	2001      	movs	r0, #1
 800038a:	f001 f881 	bl	8001490 <setTimer>
		setTimer(2, 100); // timer second
 800038e:	2164      	movs	r1, #100	@ 0x64
 8000390:	2002      	movs	r0, #2
 8000392:	f001 f87d 	bl	8001490 <setTimer>
		setTimer(3, 1); // timer scan
 8000396:	2101      	movs	r1, #1
 8000398:	2003      	movs	r0, #3
 800039a:	f001 f879 	bl	8001490 <setTimer>
		break;
 800039e:	e15d      	b.n	800065c <fsm_automatic_run+0x35c>
	case RED_GREEN:

		turnOn_RED1();
 80003a0:	f001 f8d8 	bl	8001554 <turnOn_RED1>
		turnOn_GREEN2();
 80003a4:	f001 f930 	bl	8001608 <turnOn_GREEN2>
		if (isTimerExpired(3) == 1) {
 80003a8:	2003      	movs	r0, #3
 80003aa:	f001 f889 	bl	80014c0 <isTimerExpired>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d107      	bne.n	80003c4 <fsm_automatic_run+0xc4>
			scanLEDs(time_1, time_2);
 80003b4:	4b7b      	ldr	r3, [pc, #492]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a7b      	ldr	r2, [pc, #492]	@ (80005a8 <fsm_automatic_run+0x2a8>)
 80003ba:	6812      	ldr	r2, [r2, #0]
 80003bc:	4611      	mov	r1, r2
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff ff6e 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(2) == 1) {
 80003c4:	2002      	movs	r0, #2
 80003c6:	f001 f87b 	bl	80014c0 <isTimerExpired>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d10d      	bne.n	80003ec <fsm_automatic_run+0xec>
			time_1--;
 80003d0:	4b74      	ldr	r3, [pc, #464]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	3b01      	subs	r3, #1
 80003d6:	4a73      	ldr	r2, [pc, #460]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 80003d8:	6013      	str	r3, [r2, #0]
			time_2--;
 80003da:	4b73      	ldr	r3, [pc, #460]	@ (80005a8 <fsm_automatic_run+0x2a8>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	3b01      	subs	r3, #1
 80003e0:	4a71      	ldr	r2, [pc, #452]	@ (80005a8 <fsm_automatic_run+0x2a8>)
 80003e2:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 80003e4:	2164      	movs	r1, #100	@ 0x64
 80003e6:	2002      	movs	r0, #2
 80003e8:	f001 f852 	bl	8001490 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 80003ec:	2001      	movs	r0, #1
 80003ee:	f001 f867 	bl	80014c0 <isTimerExpired>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d110      	bne.n	800041a <fsm_automatic_run+0x11a>
			status = RED_YELLOW;
 80003f8:	4b66      	ldr	r3, [pc, #408]	@ (8000594 <fsm_automatic_run+0x294>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	601a      	str	r2, [r3, #0]
			time_1 = TIME_YELLOW - 1;
 80003fe:	4b67      	ldr	r3, [pc, #412]	@ (800059c <fsm_automatic_run+0x29c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	3b01      	subs	r3, #1
 8000404:	4a67      	ldr	r2, [pc, #412]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 8000406:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_YELLOW * 100);
 8000408:	4b64      	ldr	r3, [pc, #400]	@ (800059c <fsm_automatic_run+0x29c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2264      	movs	r2, #100	@ 0x64
 800040e:	fb02 f303 	mul.w	r3, r2, r3
 8000412:	4619      	mov	r1, r3
 8000414:	2001      	movs	r0, #1
 8000416:	f001 f83b 	bl	8001490 <setTimer>

		}
		if (isTimerExpired(3) == 1) {
 800041a:	2003      	movs	r0, #3
 800041c:	f001 f850 	bl	80014c0 <isTimerExpired>
 8000420:	4603      	mov	r3, r0
 8000422:	2b01      	cmp	r3, #1
 8000424:	d107      	bne.n	8000436 <fsm_automatic_run+0x136>
			scanLEDs(time_1, time_2);
 8000426:	4b5f      	ldr	r3, [pc, #380]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a5f      	ldr	r2, [pc, #380]	@ (80005a8 <fsm_automatic_run+0x2a8>)
 800042c:	6812      	ldr	r2, [r2, #0]
 800042e:	4611      	mov	r1, r2
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff ff35 	bl	80002a0 <scanLEDs>
		}
		if (isButtonPressed(0) == 1) {
 8000436:	2000      	movs	r0, #0
 8000438:	f7ff fe88 	bl	800014c <isButtonPressed>
 800043c:	4603      	mov	r3, r0
 800043e:	2b01      	cmp	r3, #1
 8000440:	f040 8105 	bne.w	800064e <fsm_automatic_run+0x34e>
			status = MAN_RED;
 8000444:	4b53      	ldr	r3, [pc, #332]	@ (8000594 <fsm_automatic_run+0x294>)
 8000446:	220c      	movs	r2, #12
 8000448:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 800044a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800044e:	2001      	movs	r0, #1
 8000450:	f001 f81e 	bl	8001490 <setTimer>
		}

		break;
 8000454:	e0fb      	b.n	800064e <fsm_automatic_run+0x34e>
	case RED_YELLOW:
		turnOn_YELLOW2();
 8000456:	f001 f8ef 	bl	8001638 <turnOn_YELLOW2>
		if (isTimerExpired(3) == 1) {
 800045a:	2003      	movs	r0, #3
 800045c:	f001 f830 	bl	80014c0 <isTimerExpired>
 8000460:	4603      	mov	r3, r0
 8000462:	2b01      	cmp	r3, #1
 8000464:	d107      	bne.n	8000476 <fsm_automatic_run+0x176>
			scanLEDs(time_1, time_2);
 8000466:	4b4f      	ldr	r3, [pc, #316]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a4f      	ldr	r2, [pc, #316]	@ (80005a8 <fsm_automatic_run+0x2a8>)
 800046c:	6812      	ldr	r2, [r2, #0]
 800046e:	4611      	mov	r1, r2
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ff15 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(2) == 1) {
 8000476:	2002      	movs	r0, #2
 8000478:	f001 f822 	bl	80014c0 <isTimerExpired>
 800047c:	4603      	mov	r3, r0
 800047e:	2b01      	cmp	r3, #1
 8000480:	d10d      	bne.n	800049e <fsm_automatic_run+0x19e>
			time_1--;
 8000482:	4b48      	ldr	r3, [pc, #288]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	3b01      	subs	r3, #1
 8000488:	4a46      	ldr	r2, [pc, #280]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 800048a:	6013      	str	r3, [r2, #0]
			time_2--;
 800048c:	4b46      	ldr	r3, [pc, #280]	@ (80005a8 <fsm_automatic_run+0x2a8>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3b01      	subs	r3, #1
 8000492:	4a45      	ldr	r2, [pc, #276]	@ (80005a8 <fsm_automatic_run+0x2a8>)
 8000494:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 8000496:	2164      	movs	r1, #100	@ 0x64
 8000498:	2002      	movs	r0, #2
 800049a:	f000 fff9 	bl	8001490 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 800049e:	2001      	movs	r0, #1
 80004a0:	f001 f80e 	bl	80014c0 <isTimerExpired>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d115      	bne.n	80004d6 <fsm_automatic_run+0x1d6>
			status = GREEN_RED;
 80004aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000594 <fsm_automatic_run+0x294>)
 80004ac:	2204      	movs	r2, #4
 80004ae:	601a      	str	r2, [r3, #0]
			time_1 = TIME_RED - 1;
 80004b0:	4b39      	ldr	r3, [pc, #228]	@ (8000598 <fsm_automatic_run+0x298>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	4a3b      	ldr	r2, [pc, #236]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 80004b8:	6013      	str	r3, [r2, #0]
			time_2 = TIME_GREEN - 1;
 80004ba:	4b39      	ldr	r3, [pc, #228]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	3b01      	subs	r3, #1
 80004c0:	4a39      	ldr	r2, [pc, #228]	@ (80005a8 <fsm_automatic_run+0x2a8>)
 80004c2:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_GREEN * 100);
 80004c4:	4b36      	ldr	r3, [pc, #216]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2264      	movs	r2, #100	@ 0x64
 80004ca:	fb02 f303 	mul.w	r3, r2, r3
 80004ce:	4619      	mov	r1, r3
 80004d0:	2001      	movs	r0, #1
 80004d2:	f000 ffdd 	bl	8001490 <setTimer>

		}

		if (isButtonPressed(0) == 1) {
 80004d6:	2000      	movs	r0, #0
 80004d8:	f7ff fe38 	bl	800014c <isButtonPressed>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b01      	cmp	r3, #1
 80004e0:	f040 80b7 	bne.w	8000652 <fsm_automatic_run+0x352>
			status = MAN_RED;
 80004e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000594 <fsm_automatic_run+0x294>)
 80004e6:	220c      	movs	r2, #12
 80004e8:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 80004ea:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004ee:	2001      	movs	r0, #1
 80004f0:	f000 ffce 	bl	8001490 <setTimer>
		}

		break;
 80004f4:	e0ad      	b.n	8000652 <fsm_automatic_run+0x352>
	case GREEN_RED:
		turnOn_GREEN1();
 80004f6:	f001 f843 	bl	8001580 <turnOn_GREEN1>
		turnOn_RED2();
 80004fa:	f001 f86d 	bl	80015d8 <turnOn_RED2>
		if (isTimerExpired(3) == 1) {
 80004fe:	2003      	movs	r0, #3
 8000500:	f000 ffde 	bl	80014c0 <isTimerExpired>
 8000504:	4603      	mov	r3, r0
 8000506:	2b01      	cmp	r3, #1
 8000508:	d107      	bne.n	800051a <fsm_automatic_run+0x21a>
			scanLEDs(time_1, time_2);
 800050a:	4b26      	ldr	r3, [pc, #152]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a26      	ldr	r2, [pc, #152]	@ (80005a8 <fsm_automatic_run+0x2a8>)
 8000510:	6812      	ldr	r2, [r2, #0]
 8000512:	4611      	mov	r1, r2
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff fec3 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(2) == 1) {
 800051a:	2002      	movs	r0, #2
 800051c:	f000 ffd0 	bl	80014c0 <isTimerExpired>
 8000520:	4603      	mov	r3, r0
 8000522:	2b01      	cmp	r3, #1
 8000524:	d10d      	bne.n	8000542 <fsm_automatic_run+0x242>
			time_1--;
 8000526:	4b1f      	ldr	r3, [pc, #124]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	3b01      	subs	r3, #1
 800052c:	4a1d      	ldr	r2, [pc, #116]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 800052e:	6013      	str	r3, [r2, #0]
			time_2--;
 8000530:	4b1d      	ldr	r3, [pc, #116]	@ (80005a8 <fsm_automatic_run+0x2a8>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3b01      	subs	r3, #1
 8000536:	4a1c      	ldr	r2, [pc, #112]	@ (80005a8 <fsm_automatic_run+0x2a8>)
 8000538:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 800053a:	2164      	movs	r1, #100	@ 0x64
 800053c:	2002      	movs	r0, #2
 800053e:	f000 ffa7 	bl	8001490 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 8000542:	2001      	movs	r0, #1
 8000544:	f000 ffbc 	bl	80014c0 <isTimerExpired>
 8000548:	4603      	mov	r3, r0
 800054a:	2b01      	cmp	r3, #1
 800054c:	d110      	bne.n	8000570 <fsm_automatic_run+0x270>
			status = YELLOW_RED;
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <fsm_automatic_run+0x294>)
 8000550:	2205      	movs	r2, #5
 8000552:	601a      	str	r2, [r3, #0]
			time_2 = TIME_YELLOW - 1;
 8000554:	4b11      	ldr	r3, [pc, #68]	@ (800059c <fsm_automatic_run+0x29c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	3b01      	subs	r3, #1
 800055a:	4a13      	ldr	r2, [pc, #76]	@ (80005a8 <fsm_automatic_run+0x2a8>)
 800055c:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_YELLOW * 100);
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <fsm_automatic_run+0x29c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2264      	movs	r2, #100	@ 0x64
 8000564:	fb02 f303 	mul.w	r3, r2, r3
 8000568:	4619      	mov	r1, r3
 800056a:	2001      	movs	r0, #1
 800056c:	f000 ff90 	bl	8001490 <setTimer>

		}

		if (isButtonPressed(0) == 1) {
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff fdeb 	bl	800014c <isButtonPressed>
 8000576:	4603      	mov	r3, r0
 8000578:	2b01      	cmp	r3, #1
 800057a:	d16c      	bne.n	8000656 <fsm_automatic_run+0x356>
			status = MAN_RED;
 800057c:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <fsm_automatic_run+0x294>)
 800057e:	220c      	movs	r2, #12
 8000580:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 8000582:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000586:	2001      	movs	r0, #1
 8000588:	f000 ff82 	bl	8001490 <setTimer>
		}

		break;
 800058c:	e063      	b.n	8000656 <fsm_automatic_run+0x356>
 800058e:	bf00      	nop
 8000590:	40010800 	.word	0x40010800
 8000594:	200000fc 	.word	0x200000fc
 8000598:	20000000 	.word	0x20000000
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000008 	.word	0x20000008
 80005a4:	20000100 	.word	0x20000100
 80005a8:	20000104 	.word	0x20000104
	case YELLOW_RED:
		turnOn_YELLOW1();
 80005ac:	f000 fffe 	bl	80015ac <turnOn_YELLOW1>
		if (isTimerExpired(3) == 1) {
 80005b0:	2003      	movs	r0, #3
 80005b2:	f000 ff85 	bl	80014c0 <isTimerExpired>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d107      	bne.n	80005cc <fsm_automatic_run+0x2cc>
			scanLEDs(time_1, time_2);
 80005bc:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <fsm_automatic_run+0x360>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a28      	ldr	r2, [pc, #160]	@ (8000664 <fsm_automatic_run+0x364>)
 80005c2:	6812      	ldr	r2, [r2, #0]
 80005c4:	4611      	mov	r1, r2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe6a 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(2) == 1) {
 80005cc:	2002      	movs	r0, #2
 80005ce:	f000 ff77 	bl	80014c0 <isTimerExpired>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d10d      	bne.n	80005f4 <fsm_automatic_run+0x2f4>
			time_1--;
 80005d8:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <fsm_automatic_run+0x360>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a20      	ldr	r2, [pc, #128]	@ (8000660 <fsm_automatic_run+0x360>)
 80005e0:	6013      	str	r3, [r2, #0]
			time_2--;
 80005e2:	4b20      	ldr	r3, [pc, #128]	@ (8000664 <fsm_automatic_run+0x364>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000664 <fsm_automatic_run+0x364>)
 80005ea:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 80005ec:	2164      	movs	r1, #100	@ 0x64
 80005ee:	2002      	movs	r0, #2
 80005f0:	f000 ff4e 	bl	8001490 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 ff63 	bl	80014c0 <isTimerExpired>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d115      	bne.n	800062c <fsm_automatic_run+0x32c>
			status = RED_GREEN;
 8000600:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <fsm_automatic_run+0x368>)
 8000602:	2202      	movs	r2, #2
 8000604:	601a      	str	r2, [r3, #0]
			time_1 = TIME_GREEN - 1;
 8000606:	4b19      	ldr	r3, [pc, #100]	@ (800066c <fsm_automatic_run+0x36c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3b01      	subs	r3, #1
 800060c:	4a14      	ldr	r2, [pc, #80]	@ (8000660 <fsm_automatic_run+0x360>)
 800060e:	6013      	str	r3, [r2, #0]
			time_2 = TIME_RED - 1;
 8000610:	4b17      	ldr	r3, [pc, #92]	@ (8000670 <fsm_automatic_run+0x370>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3b01      	subs	r3, #1
 8000616:	4a13      	ldr	r2, [pc, #76]	@ (8000664 <fsm_automatic_run+0x364>)
 8000618:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_GREEN * 100);
 800061a:	4b14      	ldr	r3, [pc, #80]	@ (800066c <fsm_automatic_run+0x36c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2264      	movs	r2, #100	@ 0x64
 8000620:	fb02 f303 	mul.w	r3, r2, r3
 8000624:	4619      	mov	r1, r3
 8000626:	2001      	movs	r0, #1
 8000628:	f000 ff32 	bl	8001490 <setTimer>

		}

		if (isButtonPressed(0) == 1) {
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff fd8d 	bl	800014c <isButtonPressed>
 8000632:	4603      	mov	r3, r0
 8000634:	2b01      	cmp	r3, #1
 8000636:	d110      	bne.n	800065a <fsm_automatic_run+0x35a>
			status = MAN_RED;
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <fsm_automatic_run+0x368>)
 800063a:	220c      	movs	r2, #12
 800063c:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 800063e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000642:	2001      	movs	r0, #1
 8000644:	f000 ff24 	bl	8001490 <setTimer>
		}
		break;
 8000648:	e007      	b.n	800065a <fsm_automatic_run+0x35a>
	default:
		break;
 800064a:	bf00      	nop
 800064c:	e006      	b.n	800065c <fsm_automatic_run+0x35c>
		break;
 800064e:	bf00      	nop
 8000650:	e004      	b.n	800065c <fsm_automatic_run+0x35c>
		break;
 8000652:	bf00      	nop
 8000654:	e002      	b.n	800065c <fsm_automatic_run+0x35c>
		break;
 8000656:	bf00      	nop
 8000658:	e000      	b.n	800065c <fsm_automatic_run+0x35c>
		break;
 800065a:	bf00      	nop
	}
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000100 	.word	0x20000100
 8000664:	20000104 	.word	0x20000104
 8000668:	200000fc 	.word	0x200000fc
 800066c:	20000008 	.word	0x20000008
 8000670:	20000000 	.word	0x20000000

08000674 <fsm_manual_run>:
 *      Author: admin
 */

#include"fsm_manual.h"

void fsm_manual_run() {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	switch (status) {
 8000678:	4b80      	ldr	r3, [pc, #512]	@ (800087c <fsm_manual_run+0x208>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3b0c      	subs	r3, #12
 800067e:	2b08      	cmp	r3, #8
 8000680:	f200 80f1 	bhi.w	8000866 <fsm_manual_run+0x1f2>
 8000684:	a201      	add	r2, pc, #4	@ (adr r2, 800068c <fsm_manual_run+0x18>)
 8000686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068a:	bf00      	nop
 800068c:	080006b1 	.word	0x080006b1
 8000690:	0800071f 	.word	0x0800071f
 8000694:	080007db 	.word	0x080007db
 8000698:	08000867 	.word	0x08000867
 800069c:	08000867 	.word	0x08000867
 80006a0:	08000867 	.word	0x08000867
 80006a4:	08000867 	.word	0x08000867
 80006a8:	08000867 	.word	0x08000867
 80006ac:	0800083f 	.word	0x0800083f

	case MAN_RED:
		turnOn_RED1();
 80006b0:	f000 ff50 	bl	8001554 <turnOn_RED1>
		turnOn_RED2();
 80006b4:	f000 ff90 	bl	80015d8 <turnOn_RED2>


		if (isButtonPressed(0) == 1) {
 80006b8:	2000      	movs	r0, #0
 80006ba:	f7ff fd47 	bl	800014c <isButtonPressed>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d105      	bne.n	80006d0 <fsm_manual_run+0x5c>
			status = MAN_YELLOW;
 80006c4:	4b6d      	ldr	r3, [pc, #436]	@ (800087c <fsm_manual_run+0x208>)
 80006c6:	220e      	movs	r2, #14
 80006c8:	601a      	str	r2, [r3, #0]
			count = 0;
 80006ca:	4b6d      	ldr	r3, [pc, #436]	@ (8000880 <fsm_manual_run+0x20c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]

		}
		if (isTimerExpired(3) == 1) {
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 fef5 	bl	80014c0 <isTimerExpired>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d105      	bne.n	80006e8 <fsm_manual_run+0x74>

			scanLEDs(count, 2);
 80006dc:	4b68      	ldr	r3, [pc, #416]	@ (8000880 <fsm_manual_run+0x20c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fddc 	bl	80002a0 <scanLEDs>
		}
		if (isButtonPressed(1) == 1) {
 80006e8:	2001      	movs	r0, #1
 80006ea:	f7ff fd2f 	bl	800014c <isButtonPressed>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d104      	bne.n	80006fe <fsm_manual_run+0x8a>
			count++;
 80006f4:	4b62      	ldr	r3, [pc, #392]	@ (8000880 <fsm_manual_run+0x20c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	4a61      	ldr	r2, [pc, #388]	@ (8000880 <fsm_manual_run+0x20c>)
 80006fc:	6013      	str	r3, [r2, #0]

		}
		if (isButtonPressed(2) == 1) {
 80006fe:	2002      	movs	r0, #2
 8000700:	f7ff fd24 	bl	800014c <isButtonPressed>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	f040 80af 	bne.w	800086a <fsm_manual_run+0x1f6>
			TIME_RED = count;
 800070c:	4b5c      	ldr	r3, [pc, #368]	@ (8000880 <fsm_manual_run+0x20c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a5c      	ldr	r2, [pc, #368]	@ (8000884 <fsm_manual_run+0x210>)
 8000712:	6013      	str	r3, [r2, #0]
			time_1 = count;
 8000714:	4b5a      	ldr	r3, [pc, #360]	@ (8000880 <fsm_manual_run+0x20c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a5b      	ldr	r2, [pc, #364]	@ (8000888 <fsm_manual_run+0x214>)
 800071a:	6013      	str	r3, [r2, #0]
		}
		break;
 800071c:	e0a5      	b.n	800086a <fsm_manual_run+0x1f6>
	case MAN_GREEN:
		turnOn_GREEN1();
 800071e:	f000 ff2f 	bl	8001580 <turnOn_GREEN1>
		turnOn_GREEN2();
 8000722:	f000 ff71 	bl	8001608 <turnOn_GREEN2>


		if (isTimerExpired(3) == 1) {
 8000726:	2003      	movs	r0, #3
 8000728:	f000 feca 	bl	80014c0 <isTimerExpired>
 800072c:	4603      	mov	r3, r0
 800072e:	2b01      	cmp	r3, #1
 8000730:	d105      	bne.n	800073e <fsm_manual_run+0xca>
			scanLEDs(count, 4);
 8000732:	4b53      	ldr	r3, [pc, #332]	@ (8000880 <fsm_manual_run+0x20c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2104      	movs	r1, #4
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fdb1 	bl	80002a0 <scanLEDs>
		}

		if (isButtonPressed(1) == 1) {
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff fd04 	bl	800014c <isButtonPressed>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	d104      	bne.n	8000754 <fsm_manual_run+0xe0>
			count++;
 800074a:	4b4d      	ldr	r3, [pc, #308]	@ (8000880 <fsm_manual_run+0x20c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	4a4b      	ldr	r2, [pc, #300]	@ (8000880 <fsm_manual_run+0x20c>)
 8000752:	6013      	str	r3, [r2, #0]

		}
		if (isButtonPressed(2) == 1) {
 8000754:	2002      	movs	r0, #2
 8000756:	f7ff fcf9 	bl	800014c <isButtonPressed>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d107      	bne.n	8000770 <fsm_manual_run+0xfc>
			TIME_GREEN = count;
 8000760:	4b47      	ldr	r3, [pc, #284]	@ (8000880 <fsm_manual_run+0x20c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a49      	ldr	r2, [pc, #292]	@ (800088c <fsm_manual_run+0x218>)
 8000766:	6013      	str	r3, [r2, #0]
			time_1 = count;
 8000768:	4b45      	ldr	r3, [pc, #276]	@ (8000880 <fsm_manual_run+0x20c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a46      	ldr	r2, [pc, #280]	@ (8000888 <fsm_manual_run+0x214>)
 800076e:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(0) == 1) {
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff fceb 	bl	800014c <isButtonPressed>
 8000776:	4603      	mov	r3, r0
 8000778:	2b01      	cmp	r3, #1
 800077a:	d178      	bne.n	800086e <fsm_manual_run+0x1fa>
			count = 0;
 800077c:	4b40      	ldr	r3, [pc, #256]	@ (8000880 <fsm_manual_run+0x20c>)
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
			if (TIME_RED == TIME_YELLOW + TIME_GREEN) {
 8000782:	4b43      	ldr	r3, [pc, #268]	@ (8000890 <fsm_manual_run+0x21c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b41      	ldr	r3, [pc, #260]	@ (800088c <fsm_manual_run+0x218>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	441a      	add	r2, r3
 800078c:	4b3d      	ldr	r3, [pc, #244]	@ (8000884 <fsm_manual_run+0x210>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d11a      	bne.n	80007ca <fsm_manual_run+0x156>
				status = RED_GREEN;
 8000794:	4b39      	ldr	r3, [pc, #228]	@ (800087c <fsm_manual_run+0x208>)
 8000796:	2202      	movs	r2, #2
 8000798:	601a      	str	r2, [r3, #0]
				time_1 = TIME_GREEN - 1;
 800079a:	4b3c      	ldr	r3, [pc, #240]	@ (800088c <fsm_manual_run+0x218>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3b01      	subs	r3, #1
 80007a0:	4a39      	ldr	r2, [pc, #228]	@ (8000888 <fsm_manual_run+0x214>)
 80007a2:	6013      	str	r3, [r2, #0]
				time_2 = TIME_RED - 1;
 80007a4:	4b37      	ldr	r3, [pc, #220]	@ (8000884 <fsm_manual_run+0x210>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a3a      	ldr	r2, [pc, #232]	@ (8000894 <fsm_manual_run+0x220>)
 80007ac:	6013      	str	r3, [r2, #0]
				setTimer(2, 100);
 80007ae:	2164      	movs	r1, #100	@ 0x64
 80007b0:	2002      	movs	r0, #2
 80007b2:	f000 fe6d 	bl	8001490 <setTimer>
				setTimer(1, TIME_GREEN * 100);
 80007b6:	4b35      	ldr	r3, [pc, #212]	@ (800088c <fsm_manual_run+0x218>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2264      	movs	r2, #100	@ 0x64
 80007bc:	fb02 f303 	mul.w	r3, r2, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	2001      	movs	r0, #1
 80007c4:	f000 fe64 	bl	8001490 <setTimer>
				status = ERR;
				setTimer(4, 100);
			}

		}
		break;
 80007c8:	e051      	b.n	800086e <fsm_manual_run+0x1fa>
				status = ERR;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	@ (800087c <fsm_manual_run+0x208>)
 80007cc:	2214      	movs	r2, #20
 80007ce:	601a      	str	r2, [r3, #0]
				setTimer(4, 100);
 80007d0:	2164      	movs	r1, #100	@ 0x64
 80007d2:	2004      	movs	r0, #4
 80007d4:	f000 fe5c 	bl	8001490 <setTimer>
		break;
 80007d8:	e049      	b.n	800086e <fsm_manual_run+0x1fa>
	case MAN_YELLOW:
		turnOn_YELLOW1();
 80007da:	f000 fee7 	bl	80015ac <turnOn_YELLOW1>
		turnOn_YELLOW2();
 80007de:	f000 ff2b 	bl	8001638 <turnOn_YELLOW2>

		if (isTimerExpired(3) == 1) {
 80007e2:	2003      	movs	r0, #3
 80007e4:	f000 fe6c 	bl	80014c0 <isTimerExpired>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d105      	bne.n	80007fa <fsm_manual_run+0x186>

			scanLEDs(count, 3);
 80007ee:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <fsm_manual_run+0x20c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2103      	movs	r1, #3
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fd53 	bl	80002a0 <scanLEDs>

		}
		if (isButtonPressed(0) == 1) {
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff fca6 	bl	800014c <isButtonPressed>
 8000800:	4603      	mov	r3, r0
 8000802:	2b01      	cmp	r3, #1
 8000804:	d105      	bne.n	8000812 <fsm_manual_run+0x19e>
			status = MAN_GREEN;
 8000806:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <fsm_manual_run+0x208>)
 8000808:	220d      	movs	r2, #13
 800080a:	601a      	str	r2, [r3, #0]
			count = 0;
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <fsm_manual_run+0x20c>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1) {
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff fc9a 	bl	800014c <isButtonPressed>
 8000818:	4603      	mov	r3, r0
 800081a:	2b01      	cmp	r3, #1
 800081c:	d104      	bne.n	8000828 <fsm_manual_run+0x1b4>
			count++;
 800081e:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <fsm_manual_run+0x20c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	4a16      	ldr	r2, [pc, #88]	@ (8000880 <fsm_manual_run+0x20c>)
 8000826:	6013      	str	r3, [r2, #0]

		}
		if (isButtonPressed(2) == 1) {
 8000828:	2002      	movs	r0, #2
 800082a:	f7ff fc8f 	bl	800014c <isButtonPressed>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d11e      	bne.n	8000872 <fsm_manual_run+0x1fe>
			TIME_YELLOW = count;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <fsm_manual_run+0x20c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a15      	ldr	r2, [pc, #84]	@ (8000890 <fsm_manual_run+0x21c>)
 800083a:	6013      	str	r3, [r2, #0]

		}
		break;
 800083c:	e019      	b.n	8000872 <fsm_manual_run+0x1fe>
	case ERR:
		if (isTimerExpired(3)) {
 800083e:	2003      	movs	r0, #3
 8000840:	f000 fe3e 	bl	80014c0 <isTimerExpired>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d003      	beq.n	8000852 <fsm_manual_run+0x1de>
			scanLEDs(99, 99);
 800084a:	2163      	movs	r1, #99	@ 0x63
 800084c:	2063      	movs	r0, #99	@ 0x63
 800084e:	f7ff fd27 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(4)) {
 8000852:	2004      	movs	r0, #4
 8000854:	f000 fe34 	bl	80014c0 <isTimerExpired>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d00b      	beq.n	8000876 <fsm_manual_run+0x202>
			status = INIT;
 800085e:	4b07      	ldr	r3, [pc, #28]	@ (800087c <fsm_manual_run+0x208>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
		}
		break;
 8000864:	e007      	b.n	8000876 <fsm_manual_run+0x202>
	default:
		break;
 8000866:	bf00      	nop
 8000868:	e006      	b.n	8000878 <fsm_manual_run+0x204>
		break;
 800086a:	bf00      	nop
 800086c:	e004      	b.n	8000878 <fsm_manual_run+0x204>
		break;
 800086e:	bf00      	nop
 8000870:	e002      	b.n	8000878 <fsm_manual_run+0x204>
		break;
 8000872:	bf00      	nop
 8000874:	e000      	b.n	8000878 <fsm_manual_run+0x204>
		break;
 8000876:	bf00      	nop
	}
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000fc 	.word	0x200000fc
 8000880:	20000108 	.word	0x20000108
 8000884:	20000000 	.word	0x20000000
 8000888:	20000100 	.word	0x20000100
 800088c:	20000008 	.word	0x20000008
 8000890:	20000004 	.word	0x20000004
 8000894:	20000104 	.word	0x20000104

08000898 <updateClockBuffer>:
 *      Author: admin
 */
#include"led7_segment.h"
int led_buffer[4] = { 0, 0, 0, 0 };

void updateClockBuffer(int time1,int time2) {
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
	led_buffer[0] = time1 / 10;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a18      	ldr	r2, [pc, #96]	@ (8000908 <updateClockBuffer+0x70>)
 80008a6:	fb82 1203 	smull	r1, r2, r2, r3
 80008aa:	1092      	asrs	r2, r2, #2
 80008ac:	17db      	asrs	r3, r3, #31
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	4a16      	ldr	r2, [pc, #88]	@ (800090c <updateClockBuffer+0x74>)
 80008b2:	6013      	str	r3, [r2, #0]
	led_buffer[1] = time1 % 10;
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <updateClockBuffer+0x70>)
 80008b8:	fb83 2301 	smull	r2, r3, r3, r1
 80008bc:	109a      	asrs	r2, r3, #2
 80008be:	17cb      	asrs	r3, r1, #31
 80008c0:	1ad2      	subs	r2, r2, r3
 80008c2:	4613      	mov	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	1aca      	subs	r2, r1, r3
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <updateClockBuffer+0x74>)
 80008ce:	605a      	str	r2, [r3, #4]
	led_buffer[2] = time2 / 10;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <updateClockBuffer+0x70>)
 80008d4:	fb82 1203 	smull	r1, r2, r2, r3
 80008d8:	1092      	asrs	r2, r2, #2
 80008da:	17db      	asrs	r3, r3, #31
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	4a0b      	ldr	r2, [pc, #44]	@ (800090c <updateClockBuffer+0x74>)
 80008e0:	6093      	str	r3, [r2, #8]
	led_buffer[3] = time2 % 10;
 80008e2:	6839      	ldr	r1, [r7, #0]
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <updateClockBuffer+0x70>)
 80008e6:	fb83 2301 	smull	r2, r3, r3, r1
 80008ea:	109a      	asrs	r2, r3, #2
 80008ec:	17cb      	asrs	r3, r1, #31
 80008ee:	1ad2      	subs	r2, r2, r3
 80008f0:	4613      	mov	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	4413      	add	r3, r2
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	1aca      	subs	r2, r1, r3
 80008fa:	4b04      	ldr	r3, [pc, #16]	@ (800090c <updateClockBuffer+0x74>)
 80008fc:	60da      	str	r2, [r3, #12]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	66666667 	.word	0x66666667
 800090c:	20000114 	.word	0x20000114

08000910 <update7SEG_1>:
void update7SEG_1(int index) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

	switch (index) {
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d003      	beq.n	8000926 <update7SEG_1+0x16>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d012      	beq.n	800094a <update7SEG_1+0x3a>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
		display7SEG_1(led_buffer[1]);
		break;
	default:
		break;
 8000924:	e023      	b.n	800096e <update7SEG_1+0x5e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800092c:	4812      	ldr	r0, [pc, #72]	@ (8000978 <update7SEG_1+0x68>)
 800092e:	f001 f9c4 	bl	8001cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000932:	2201      	movs	r2, #1
 8000934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000938:	480f      	ldr	r0, [pc, #60]	@ (8000978 <update7SEG_1+0x68>)
 800093a:	f001 f9be 	bl	8001cba <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer[0]);
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <update7SEG_1+0x6c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f854 	bl	80009f0 <display7SEG_1>
		break;
 8000948:	e011      	b.n	800096e <update7SEG_1+0x5e>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <update7SEG_1+0x68>)
 8000952:	f001 f9b2 	bl	8001cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800095c:	4806      	ldr	r0, [pc, #24]	@ (8000978 <update7SEG_1+0x68>)
 800095e:	f001 f9ac 	bl	8001cba <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer[1]);
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <update7SEG_1+0x6c>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f842 	bl	80009f0 <display7SEG_1>
		break;
 800096c:	bf00      	nop
	}
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40010800 	.word	0x40010800
 800097c:	20000114 	.word	0x20000114

08000980 <update7SEG_2>:
void update7SEG_2(int index) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

	switch (index) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <update7SEG_2+0x16>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d012      	beq.n	80009ba <update7SEG_2+0x3a>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
		display7SEG_2(led_buffer[3]);
		break;
	default:
		break;
 8000994:	e023      	b.n	80009de <update7SEG_2+0x5e>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099c:	4812      	ldr	r0, [pc, #72]	@ (80009e8 <update7SEG_2+0x68>)
 800099e:	f001 f98c 	bl	8001cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009a8:	480f      	ldr	r0, [pc, #60]	@ (80009e8 <update7SEG_2+0x68>)
 80009aa:	f001 f986 	bl	8001cba <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer[2]);
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <update7SEG_2+0x6c>)
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f9ce 	bl	8000d54 <display7SEG_2>
		break;
 80009b8:	e011      	b.n	80009de <update7SEG_2+0x5e>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009c0:	4809      	ldr	r0, [pc, #36]	@ (80009e8 <update7SEG_2+0x68>)
 80009c2:	f001 f97a 	bl	8001cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009cc:	4806      	ldr	r0, [pc, #24]	@ (80009e8 <update7SEG_2+0x68>)
 80009ce:	f001 f974 	bl	8001cba <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer[3]);
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <update7SEG_2+0x6c>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f9bc 	bl	8000d54 <display7SEG_2>
		break;
 80009dc:	bf00      	nop
	}
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40010800 	.word	0x40010800
 80009ec:	20000114 	.word	0x20000114

080009f0 <display7SEG_1>:
void display7SEG_1(int num) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	switch (num) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b09      	cmp	r3, #9
 80009fc:	f200 8180 	bhi.w	8000d00 <display7SEG_1+0x310>
 8000a00:	a201      	add	r2, pc, #4	@ (adr r2, 8000a08 <display7SEG_1+0x18>)
 8000a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a06:	bf00      	nop
 8000a08:	08000a31 	.word	0x08000a31
 8000a0c:	08000a79 	.word	0x08000a79
 8000a10:	08000ac1 	.word	0x08000ac1
 8000a14:	08000b09 	.word	0x08000b09
 8000a18:	08000b51 	.word	0x08000b51
 8000a1c:	08000b99 	.word	0x08000b99
 8000a20:	08000be1 	.word	0x08000be1
 8000a24:	08000c29 	.word	0x08000c29
 8000a28:	08000c71 	.word	0x08000c71
 8000a2c:	08000cb9 	.word	0x08000cb9
	case 0:
		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2101      	movs	r1, #1
 8000a34:	48c6      	ldr	r0, [pc, #792]	@ (8000d50 <display7SEG_1+0x360>)
 8000a36:	f001 f940 	bl	8001cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	48c4      	ldr	r0, [pc, #784]	@ (8000d50 <display7SEG_1+0x360>)
 8000a40:	f001 f93b 	bl	8001cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2104      	movs	r1, #4
 8000a48:	48c1      	ldr	r0, [pc, #772]	@ (8000d50 <display7SEG_1+0x360>)
 8000a4a:	f001 f936 	bl	8001cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2108      	movs	r1, #8
 8000a52:	48bf      	ldr	r0, [pc, #764]	@ (8000d50 <display7SEG_1+0x360>)
 8000a54:	f001 f931 	bl	8001cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	48bc      	ldr	r0, [pc, #752]	@ (8000d50 <display7SEG_1+0x360>)
 8000a5e:	f001 f92c 	bl	8001cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2120      	movs	r1, #32
 8000a66:	48ba      	ldr	r0, [pc, #744]	@ (8000d50 <display7SEG_1+0x360>)
 8000a68:	f001 f927 	bl	8001cba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2140      	movs	r1, #64	@ 0x40
 8000a70:	48b7      	ldr	r0, [pc, #732]	@ (8000d50 <display7SEG_1+0x360>)
 8000a72:	f001 f922 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000a76:	e167      	b.n	8000d48 <display7SEG_1+0x358>

	case 1:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	48b4      	ldr	r0, [pc, #720]	@ (8000d50 <display7SEG_1+0x360>)
 8000a7e:	f001 f91c 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2108      	movs	r1, #8
 8000a86:	48b2      	ldr	r0, [pc, #712]	@ (8000d50 <display7SEG_1+0x360>)
 8000a88:	f001 f917 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2110      	movs	r1, #16
 8000a90:	48af      	ldr	r0, [pc, #700]	@ (8000d50 <display7SEG_1+0x360>)
 8000a92:	f001 f912 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2120      	movs	r1, #32
 8000a9a:	48ad      	ldr	r0, [pc, #692]	@ (8000d50 <display7SEG_1+0x360>)
 8000a9c:	f001 f90d 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2140      	movs	r1, #64	@ 0x40
 8000aa4:	48aa      	ldr	r0, [pc, #680]	@ (8000d50 <display7SEG_1+0x360>)
 8000aa6:	f001 f908 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2102      	movs	r1, #2
 8000aae:	48a8      	ldr	r0, [pc, #672]	@ (8000d50 <display7SEG_1+0x360>)
 8000ab0:	f001 f903 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	48a5      	ldr	r0, [pc, #660]	@ (8000d50 <display7SEG_1+0x360>)
 8000aba:	f001 f8fe 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000abe:	e143      	b.n	8000d48 <display7SEG_1+0x358>

	case 2:

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	48a2      	ldr	r0, [pc, #648]	@ (8000d50 <display7SEG_1+0x360>)
 8000ac6:	f001 f8f8 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2120      	movs	r1, #32
 8000ace:	48a0      	ldr	r0, [pc, #640]	@ (8000d50 <display7SEG_1+0x360>)
 8000ad0:	f001 f8f3 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	489d      	ldr	r0, [pc, #628]	@ (8000d50 <display7SEG_1+0x360>)
 8000ada:	f001 f8ee 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	489b      	ldr	r0, [pc, #620]	@ (8000d50 <display7SEG_1+0x360>)
 8000ae4:	f001 f8e9 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2108      	movs	r1, #8
 8000aec:	4898      	ldr	r0, [pc, #608]	@ (8000d50 <display7SEG_1+0x360>)
 8000aee:	f001 f8e4 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2110      	movs	r1, #16
 8000af6:	4896      	ldr	r0, [pc, #600]	@ (8000d50 <display7SEG_1+0x360>)
 8000af8:	f001 f8df 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2140      	movs	r1, #64	@ 0x40
 8000b00:	4893      	ldr	r0, [pc, #588]	@ (8000d50 <display7SEG_1+0x360>)
 8000b02:	f001 f8da 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000b06:	e11f      	b.n	8000d48 <display7SEG_1+0x358>

	case 3:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	4890      	ldr	r0, [pc, #576]	@ (8000d50 <display7SEG_1+0x360>)
 8000b0e:	f001 f8d4 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2120      	movs	r1, #32
 8000b16:	488e      	ldr	r0, [pc, #568]	@ (8000d50 <display7SEG_1+0x360>)
 8000b18:	f001 f8cf 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2104      	movs	r1, #4
 8000b20:	488b      	ldr	r0, [pc, #556]	@ (8000d50 <display7SEG_1+0x360>)
 8000b22:	f001 f8ca 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4889      	ldr	r0, [pc, #548]	@ (8000d50 <display7SEG_1+0x360>)
 8000b2c:	f001 f8c5 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2102      	movs	r1, #2
 8000b34:	4886      	ldr	r0, [pc, #536]	@ (8000d50 <display7SEG_1+0x360>)
 8000b36:	f001 f8c0 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	4884      	ldr	r0, [pc, #528]	@ (8000d50 <display7SEG_1+0x360>)
 8000b40:	f001 f8bb 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2140      	movs	r1, #64	@ 0x40
 8000b48:	4881      	ldr	r0, [pc, #516]	@ (8000d50 <display7SEG_1+0x360>)
 8000b4a:	f001 f8b6 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000b4e:	e0fb      	b.n	8000d48 <display7SEG_1+0x358>

	case 4:

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2120      	movs	r1, #32
 8000b54:	487e      	ldr	r0, [pc, #504]	@ (8000d50 <display7SEG_1+0x360>)
 8000b56:	f001 f8b0 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2140      	movs	r1, #64	@ 0x40
 8000b5e:	487c      	ldr	r0, [pc, #496]	@ (8000d50 <display7SEG_1+0x360>)
 8000b60:	f001 f8ab 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2102      	movs	r1, #2
 8000b68:	4879      	ldr	r0, [pc, #484]	@ (8000d50 <display7SEG_1+0x360>)
 8000b6a:	f001 f8a6 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2104      	movs	r1, #4
 8000b72:	4877      	ldr	r0, [pc, #476]	@ (8000d50 <display7SEG_1+0x360>)
 8000b74:	f001 f8a1 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4874      	ldr	r0, [pc, #464]	@ (8000d50 <display7SEG_1+0x360>)
 8000b7e:	f001 f89c 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2108      	movs	r1, #8
 8000b86:	4872      	ldr	r0, [pc, #456]	@ (8000d50 <display7SEG_1+0x360>)
 8000b88:	f001 f897 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2110      	movs	r1, #16
 8000b90:	486f      	ldr	r0, [pc, #444]	@ (8000d50 <display7SEG_1+0x360>)
 8000b92:	f001 f892 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000b96:	e0d7      	b.n	8000d48 <display7SEG_1+0x358>

	case 5:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	486c      	ldr	r0, [pc, #432]	@ (8000d50 <display7SEG_1+0x360>)
 8000b9e:	f001 f88c 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	486a      	ldr	r0, [pc, #424]	@ (8000d50 <display7SEG_1+0x360>)
 8000ba8:	f001 f887 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2120      	movs	r1, #32
 8000bb0:	4867      	ldr	r0, [pc, #412]	@ (8000d50 <display7SEG_1+0x360>)
 8000bb2:	f001 f882 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2140      	movs	r1, #64	@ 0x40
 8000bba:	4865      	ldr	r0, [pc, #404]	@ (8000d50 <display7SEG_1+0x360>)
 8000bbc:	f001 f87d 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	4862      	ldr	r0, [pc, #392]	@ (8000d50 <display7SEG_1+0x360>)
 8000bc6:	f001 f878 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2102      	movs	r1, #2
 8000bce:	4860      	ldr	r0, [pc, #384]	@ (8000d50 <display7SEG_1+0x360>)
 8000bd0:	f001 f873 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	485d      	ldr	r0, [pc, #372]	@ (8000d50 <display7SEG_1+0x360>)
 8000bda:	f001 f86e 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000bde:	e0b3      	b.n	8000d48 <display7SEG_1+0x358>

	case 6:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2110      	movs	r1, #16
 8000be4:	485a      	ldr	r0, [pc, #360]	@ (8000d50 <display7SEG_1+0x360>)
 8000be6:	f001 f868 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2101      	movs	r1, #1
 8000bee:	4858      	ldr	r0, [pc, #352]	@ (8000d50 <display7SEG_1+0x360>)
 8000bf0:	f001 f863 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2108      	movs	r1, #8
 8000bf8:	4855      	ldr	r0, [pc, #340]	@ (8000d50 <display7SEG_1+0x360>)
 8000bfa:	f001 f85e 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2120      	movs	r1, #32
 8000c02:	4853      	ldr	r0, [pc, #332]	@ (8000d50 <display7SEG_1+0x360>)
 8000c04:	f001 f859 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2140      	movs	r1, #64	@ 0x40
 8000c0c:	4850      	ldr	r0, [pc, #320]	@ (8000d50 <display7SEG_1+0x360>)
 8000c0e:	f001 f854 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2104      	movs	r1, #4
 8000c16:	484e      	ldr	r0, [pc, #312]	@ (8000d50 <display7SEG_1+0x360>)
 8000c18:	f001 f84f 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2102      	movs	r1, #2
 8000c20:	484b      	ldr	r0, [pc, #300]	@ (8000d50 <display7SEG_1+0x360>)
 8000c22:	f001 f84a 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000c26:	e08f      	b.n	8000d48 <display7SEG_1+0x358>

	case 7:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	4848      	ldr	r0, [pc, #288]	@ (8000d50 <display7SEG_1+0x360>)
 8000c2e:	f001 f844 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2120      	movs	r1, #32
 8000c36:	4846      	ldr	r0, [pc, #280]	@ (8000d50 <display7SEG_1+0x360>)
 8000c38:	f001 f83f 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2108      	movs	r1, #8
 8000c40:	4843      	ldr	r0, [pc, #268]	@ (8000d50 <display7SEG_1+0x360>)
 8000c42:	f001 f83a 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2140      	movs	r1, #64	@ 0x40
 8000c4a:	4841      	ldr	r0, [pc, #260]	@ (8000d50 <display7SEG_1+0x360>)
 8000c4c:	f001 f835 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2102      	movs	r1, #2
 8000c54:	483e      	ldr	r0, [pc, #248]	@ (8000d50 <display7SEG_1+0x360>)
 8000c56:	f001 f830 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	483c      	ldr	r0, [pc, #240]	@ (8000d50 <display7SEG_1+0x360>)
 8000c60:	f001 f82b 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2104      	movs	r1, #4
 8000c68:	4839      	ldr	r0, [pc, #228]	@ (8000d50 <display7SEG_1+0x360>)
 8000c6a:	f001 f826 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000c6e:	e06b      	b.n	8000d48 <display7SEG_1+0x358>

	case 8:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2110      	movs	r1, #16
 8000c74:	4836      	ldr	r0, [pc, #216]	@ (8000d50 <display7SEG_1+0x360>)
 8000c76:	f001 f820 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	4834      	ldr	r0, [pc, #208]	@ (8000d50 <display7SEG_1+0x360>)
 8000c80:	f001 f81b 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2108      	movs	r1, #8
 8000c88:	4831      	ldr	r0, [pc, #196]	@ (8000d50 <display7SEG_1+0x360>)
 8000c8a:	f001 f816 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2140      	movs	r1, #64	@ 0x40
 8000c92:	482f      	ldr	r0, [pc, #188]	@ (8000d50 <display7SEG_1+0x360>)
 8000c94:	f001 f811 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	482c      	ldr	r0, [pc, #176]	@ (8000d50 <display7SEG_1+0x360>)
 8000c9e:	f001 f80c 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	482a      	ldr	r0, [pc, #168]	@ (8000d50 <display7SEG_1+0x360>)
 8000ca8:	f001 f807 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2104      	movs	r1, #4
 8000cb0:	4827      	ldr	r0, [pc, #156]	@ (8000d50 <display7SEG_1+0x360>)
 8000cb2:	f001 f802 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000cb6:	e047      	b.n	8000d48 <display7SEG_1+0x358>

	case 9:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2110      	movs	r1, #16
 8000cbc:	4824      	ldr	r0, [pc, #144]	@ (8000d50 <display7SEG_1+0x360>)
 8000cbe:	f000 fffc 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	4822      	ldr	r0, [pc, #136]	@ (8000d50 <display7SEG_1+0x360>)
 8000cc8:	f000 fff7 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2102      	movs	r1, #2
 8000cd0:	481f      	ldr	r0, [pc, #124]	@ (8000d50 <display7SEG_1+0x360>)
 8000cd2:	f000 fff2 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2104      	movs	r1, #4
 8000cda:	481d      	ldr	r0, [pc, #116]	@ (8000d50 <display7SEG_1+0x360>)
 8000cdc:	f000 ffed 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	481a      	ldr	r0, [pc, #104]	@ (8000d50 <display7SEG_1+0x360>)
 8000ce6:	f000 ffe8 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2140      	movs	r1, #64	@ 0x40
 8000cee:	4818      	ldr	r0, [pc, #96]	@ (8000d50 <display7SEG_1+0x360>)
 8000cf0:	f000 ffe3 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	4815      	ldr	r0, [pc, #84]	@ (8000d50 <display7SEG_1+0x360>)
 8000cfa:	f000 ffde 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000cfe:	e023      	b.n	8000d48 <display7SEG_1+0x358>

	default:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2101      	movs	r1, #1
 8000d04:	4812      	ldr	r0, [pc, #72]	@ (8000d50 <display7SEG_1+0x360>)
 8000d06:	f000 ffd8 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4810      	ldr	r0, [pc, #64]	@ (8000d50 <display7SEG_1+0x360>)
 8000d10:	f000 ffd3 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2104      	movs	r1, #4
 8000d18:	480d      	ldr	r0, [pc, #52]	@ (8000d50 <display7SEG_1+0x360>)
 8000d1a:	f000 ffce 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2108      	movs	r1, #8
 8000d22:	480b      	ldr	r0, [pc, #44]	@ (8000d50 <display7SEG_1+0x360>)
 8000d24:	f000 ffc9 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	4808      	ldr	r0, [pc, #32]	@ (8000d50 <display7SEG_1+0x360>)
 8000d2e:	f000 ffc4 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2120      	movs	r1, #32
 8000d36:	4806      	ldr	r0, [pc, #24]	@ (8000d50 <display7SEG_1+0x360>)
 8000d38:	f000 ffbf 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2140      	movs	r1, #64	@ 0x40
 8000d40:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <display7SEG_1+0x360>)
 8000d42:	f000 ffba 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000d46:	bf00      	nop
	}

}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40010c00 	.word	0x40010c00

08000d54 <display7SEG_2>:
void display7SEG_2(int num) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b09      	cmp	r3, #9
 8000d60:	f200 81be 	bhi.w	80010e0 <display7SEG_2+0x38c>
 8000d64:	a201      	add	r2, pc, #4	@ (adr r2, 8000d6c <display7SEG_2+0x18>)
 8000d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6a:	bf00      	nop
 8000d6c:	08000d95 	.word	0x08000d95
 8000d70:	08000de9 	.word	0x08000de9
 8000d74:	08000e3d 	.word	0x08000e3d
 8000d78:	08000e91 	.word	0x08000e91
 8000d7c:	08000ee5 	.word	0x08000ee5
 8000d80:	08000f39 	.word	0x08000f39
 8000d84:	08000f8d 	.word	0x08000f8d
 8000d88:	08000fe1 	.word	0x08000fe1
 8000d8c:	08001035 	.word	0x08001035
 8000d90:	08001089 	.word	0x08001089

	case 0:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2180      	movs	r1, #128	@ 0x80
 8000d98:	48d0      	ldr	r0, [pc, #832]	@ (80010dc <display7SEG_2+0x388>)
 8000d9a:	f000 ff8e 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da4:	48cd      	ldr	r0, [pc, #820]	@ (80010dc <display7SEG_2+0x388>)
 8000da6:	f000 ff88 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000db0:	48ca      	ldr	r0, [pc, #808]	@ (80010dc <display7SEG_2+0x388>)
 8000db2:	f000 ff82 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dbc:	48c7      	ldr	r0, [pc, #796]	@ (80010dc <display7SEG_2+0x388>)
 8000dbe:	f000 ff7c 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dc8:	48c4      	ldr	r0, [pc, #784]	@ (80010dc <display7SEG_2+0x388>)
 8000dca:	f000 ff76 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dd4:	48c1      	ldr	r0, [pc, #772]	@ (80010dc <display7SEG_2+0x388>)
 8000dd6:	f000 ff70 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000de0:	48be      	ldr	r0, [pc, #760]	@ (80010dc <display7SEG_2+0x388>)
 8000de2:	f000 ff6a 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000de6:	e1a5      	b.n	8001134 <display7SEG_2+0x3e0>

	case 1:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2180      	movs	r1, #128	@ 0x80
 8000dec:	48bb      	ldr	r0, [pc, #748]	@ (80010dc <display7SEG_2+0x388>)
 8000dee:	f000 ff64 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000df8:	48b8      	ldr	r0, [pc, #736]	@ (80010dc <display7SEG_2+0x388>)
 8000dfa:	f000 ff5e 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e04:	48b5      	ldr	r0, [pc, #724]	@ (80010dc <display7SEG_2+0x388>)
 8000e06:	f000 ff58 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e10:	48b2      	ldr	r0, [pc, #712]	@ (80010dc <display7SEG_2+0x388>)
 8000e12:	f000 ff52 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e1c:	48af      	ldr	r0, [pc, #700]	@ (80010dc <display7SEG_2+0x388>)
 8000e1e:	f000 ff4c 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e28:	48ac      	ldr	r0, [pc, #688]	@ (80010dc <display7SEG_2+0x388>)
 8000e2a:	f000 ff46 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e34:	48a9      	ldr	r0, [pc, #676]	@ (80010dc <display7SEG_2+0x388>)
 8000e36:	f000 ff40 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000e3a:	e17b      	b.n	8001134 <display7SEG_2+0x3e0>

	case 2:

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e42:	48a6      	ldr	r0, [pc, #664]	@ (80010dc <display7SEG_2+0x388>)
 8000e44:	f000 ff39 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e4e:	48a3      	ldr	r0, [pc, #652]	@ (80010dc <display7SEG_2+0x388>)
 8000e50:	f000 ff33 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2180      	movs	r1, #128	@ 0x80
 8000e58:	48a0      	ldr	r0, [pc, #640]	@ (80010dc <display7SEG_2+0x388>)
 8000e5a:	f000 ff2e 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e64:	489d      	ldr	r0, [pc, #628]	@ (80010dc <display7SEG_2+0x388>)
 8000e66:	f000 ff28 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e70:	489a      	ldr	r0, [pc, #616]	@ (80010dc <display7SEG_2+0x388>)
 8000e72:	f000 ff22 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e7c:	4897      	ldr	r0, [pc, #604]	@ (80010dc <display7SEG_2+0x388>)
 8000e7e:	f000 ff1c 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e88:	4894      	ldr	r0, [pc, #592]	@ (80010dc <display7SEG_2+0x388>)
 8000e8a:	f000 ff16 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000e8e:	e151      	b.n	8001134 <display7SEG_2+0x3e0>

	case 3:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e96:	4891      	ldr	r0, [pc, #580]	@ (80010dc <display7SEG_2+0x388>)
 8000e98:	f000 ff0f 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ea2:	488e      	ldr	r0, [pc, #568]	@ (80010dc <display7SEG_2+0x388>)
 8000ea4:	f000 ff09 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eae:	488b      	ldr	r0, [pc, #556]	@ (80010dc <display7SEG_2+0x388>)
 8000eb0:	f000 ff03 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2180      	movs	r1, #128	@ 0x80
 8000eb8:	4888      	ldr	r0, [pc, #544]	@ (80010dc <display7SEG_2+0x388>)
 8000eba:	f000 fefe 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ec4:	4885      	ldr	r0, [pc, #532]	@ (80010dc <display7SEG_2+0x388>)
 8000ec6:	f000 fef8 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ed0:	4882      	ldr	r0, [pc, #520]	@ (80010dc <display7SEG_2+0x388>)
 8000ed2:	f000 fef2 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000edc:	487f      	ldr	r0, [pc, #508]	@ (80010dc <display7SEG_2+0x388>)
 8000ede:	f000 feec 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000ee2:	e127      	b.n	8001134 <display7SEG_2+0x3e0>

	case 4:

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eea:	487c      	ldr	r0, [pc, #496]	@ (80010dc <display7SEG_2+0x388>)
 8000eec:	f000 fee5 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ef6:	4879      	ldr	r0, [pc, #484]	@ (80010dc <display7SEG_2+0x388>)
 8000ef8:	f000 fedf 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f02:	4876      	ldr	r0, [pc, #472]	@ (80010dc <display7SEG_2+0x388>)
 8000f04:	f000 fed9 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f0e:	4873      	ldr	r0, [pc, #460]	@ (80010dc <display7SEG_2+0x388>)
 8000f10:	f000 fed3 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2180      	movs	r1, #128	@ 0x80
 8000f18:	4870      	ldr	r0, [pc, #448]	@ (80010dc <display7SEG_2+0x388>)
 8000f1a:	f000 fece 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f24:	486d      	ldr	r0, [pc, #436]	@ (80010dc <display7SEG_2+0x388>)
 8000f26:	f000 fec8 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f30:	486a      	ldr	r0, [pc, #424]	@ (80010dc <display7SEG_2+0x388>)
 8000f32:	f000 fec2 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000f36:	e0fd      	b.n	8001134 <display7SEG_2+0x3e0>

	case 5:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2180      	movs	r1, #128	@ 0x80
 8000f3c:	4867      	ldr	r0, [pc, #412]	@ (80010dc <display7SEG_2+0x388>)
 8000f3e:	f000 febc 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f48:	4864      	ldr	r0, [pc, #400]	@ (80010dc <display7SEG_2+0x388>)
 8000f4a:	f000 feb6 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f54:	4861      	ldr	r0, [pc, #388]	@ (80010dc <display7SEG_2+0x388>)
 8000f56:	f000 feb0 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f60:	485e      	ldr	r0, [pc, #376]	@ (80010dc <display7SEG_2+0x388>)
 8000f62:	f000 feaa 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f6c:	485b      	ldr	r0, [pc, #364]	@ (80010dc <display7SEG_2+0x388>)
 8000f6e:	f000 fea4 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f78:	4858      	ldr	r0, [pc, #352]	@ (80010dc <display7SEG_2+0x388>)
 8000f7a:	f000 fe9e 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f84:	4855      	ldr	r0, [pc, #340]	@ (80010dc <display7SEG_2+0x388>)
 8000f86:	f000 fe98 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000f8a:	e0d3      	b.n	8001134 <display7SEG_2+0x3e0>

	case 6:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f92:	4852      	ldr	r0, [pc, #328]	@ (80010dc <display7SEG_2+0x388>)
 8000f94:	f000 fe91 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2180      	movs	r1, #128	@ 0x80
 8000f9c:	484f      	ldr	r0, [pc, #316]	@ (80010dc <display7SEG_2+0x388>)
 8000f9e:	f000 fe8c 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fa8:	484c      	ldr	r0, [pc, #304]	@ (80010dc <display7SEG_2+0x388>)
 8000faa:	f000 fe86 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fb4:	4849      	ldr	r0, [pc, #292]	@ (80010dc <display7SEG_2+0x388>)
 8000fb6:	f000 fe80 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc0:	4846      	ldr	r0, [pc, #280]	@ (80010dc <display7SEG_2+0x388>)
 8000fc2:	f000 fe7a 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fcc:	4843      	ldr	r0, [pc, #268]	@ (80010dc <display7SEG_2+0x388>)
 8000fce:	f000 fe74 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fd8:	4840      	ldr	r0, [pc, #256]	@ (80010dc <display7SEG_2+0x388>)
 8000fda:	f000 fe6e 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8000fde:	e0a9      	b.n	8001134 <display7SEG_2+0x3e0>

	case 7:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fe6:	483d      	ldr	r0, [pc, #244]	@ (80010dc <display7SEG_2+0x388>)
 8000fe8:	f000 fe67 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ff2:	483a      	ldr	r0, [pc, #232]	@ (80010dc <display7SEG_2+0x388>)
 8000ff4:	f000 fe61 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ffe:	4837      	ldr	r0, [pc, #220]	@ (80010dc <display7SEG_2+0x388>)
 8001000:	f000 fe5b 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800100a:	4834      	ldr	r0, [pc, #208]	@ (80010dc <display7SEG_2+0x388>)
 800100c:	f000 fe55 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001016:	4831      	ldr	r0, [pc, #196]	@ (80010dc <display7SEG_2+0x388>)
 8001018:	f000 fe4f 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2180      	movs	r1, #128	@ 0x80
 8001020:	482e      	ldr	r0, [pc, #184]	@ (80010dc <display7SEG_2+0x388>)
 8001022:	f000 fe4a 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800102c:	482b      	ldr	r0, [pc, #172]	@ (80010dc <display7SEG_2+0x388>)
 800102e:	f000 fe44 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8001032:	e07f      	b.n	8001134 <display7SEG_2+0x3e0>

	case 8:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800103a:	4828      	ldr	r0, [pc, #160]	@ (80010dc <display7SEG_2+0x388>)
 800103c:	f000 fe3d 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001046:	4825      	ldr	r0, [pc, #148]	@ (80010dc <display7SEG_2+0x388>)
 8001048:	f000 fe37 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001052:	4822      	ldr	r0, [pc, #136]	@ (80010dc <display7SEG_2+0x388>)
 8001054:	f000 fe31 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800105e:	481f      	ldr	r0, [pc, #124]	@ (80010dc <display7SEG_2+0x388>)
 8001060:	f000 fe2b 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2180      	movs	r1, #128	@ 0x80
 8001068:	481c      	ldr	r0, [pc, #112]	@ (80010dc <display7SEG_2+0x388>)
 800106a:	f000 fe26 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001074:	4819      	ldr	r0, [pc, #100]	@ (80010dc <display7SEG_2+0x388>)
 8001076:	f000 fe20 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001080:	4816      	ldr	r0, [pc, #88]	@ (80010dc <display7SEG_2+0x388>)
 8001082:	f000 fe1a 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8001086:	e055      	b.n	8001134 <display7SEG_2+0x3e0>

	case 9:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800108e:	4813      	ldr	r0, [pc, #76]	@ (80010dc <display7SEG_2+0x388>)
 8001090:	f000 fe13 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2180      	movs	r1, #128	@ 0x80
 8001098:	4810      	ldr	r0, [pc, #64]	@ (80010dc <display7SEG_2+0x388>)
 800109a:	f000 fe0e 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a4:	480d      	ldr	r0, [pc, #52]	@ (80010dc <display7SEG_2+0x388>)
 80010a6:	f000 fe08 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b0:	480a      	ldr	r0, [pc, #40]	@ (80010dc <display7SEG_2+0x388>)
 80010b2:	f000 fe02 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010bc:	4807      	ldr	r0, [pc, #28]	@ (80010dc <display7SEG_2+0x388>)
 80010be:	f000 fdfc 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010c8:	4804      	ldr	r0, [pc, #16]	@ (80010dc <display7SEG_2+0x388>)
 80010ca:	f000 fdf6 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010d4:	4801      	ldr	r0, [pc, #4]	@ (80010dc <display7SEG_2+0x388>)
 80010d6:	f000 fdf0 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 80010da:	e02b      	b.n	8001134 <display7SEG_2+0x3e0>
 80010dc:	40010c00 	.word	0x40010c00

	default:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2180      	movs	r1, #128	@ 0x80
 80010e4:	4815      	ldr	r0, [pc, #84]	@ (800113c <display7SEG_2+0x3e8>)
 80010e6:	f000 fde8 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f0:	4812      	ldr	r0, [pc, #72]	@ (800113c <display7SEG_2+0x3e8>)
 80010f2:	f000 fde2 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010fc:	480f      	ldr	r0, [pc, #60]	@ (800113c <display7SEG_2+0x3e8>)
 80010fe:	f000 fddc 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001108:	480c      	ldr	r0, [pc, #48]	@ (800113c <display7SEG_2+0x3e8>)
 800110a:	f000 fdd6 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001114:	4809      	ldr	r0, [pc, #36]	@ (800113c <display7SEG_2+0x3e8>)
 8001116:	f000 fdd0 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001120:	4806      	ldr	r0, [pc, #24]	@ (800113c <display7SEG_2+0x3e8>)
 8001122:	f000 fdca 	bl	8001cba <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800112c:	4803      	ldr	r0, [pc, #12]	@ (800113c <display7SEG_2+0x3e8>)
 800112e:	f000 fdc4 	bl	8001cba <HAL_GPIO_WritePin>

		break;
 8001132:	bf00      	nop
	}

}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40010c00 	.word	0x40010c00

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001144:	f000 fab6 	bl	80016b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001148:	f000 f814 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114c:	f000 f89a 	bl	8001284 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001150:	f000 f84c 	bl	80011ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001154:	4805      	ldr	r0, [pc, #20]	@ (800116c <main+0x2c>)
 8001156:	f001 fa0f 	bl	8002578 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	status = INIT;
 800115a:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <main+0x30>)
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]

	while (1) {
		fsm_manual_run();
 8001160:	f7ff fa88 	bl	8000674 <fsm_manual_run>
		fsm_automatic_run();
 8001164:	f7ff f8cc 	bl	8000300 <fsm_automatic_run>
		fsm_manual_run();
 8001168:	bf00      	nop
 800116a:	e7f9      	b.n	8001160 <main+0x20>
 800116c:	20000124 	.word	0x20000124
 8001170:	200000fc 	.word	0x200000fc

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b090      	sub	sp, #64	@ 0x40
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0318 	add.w	r3, r7, #24
 800117e:	2228      	movs	r2, #40	@ 0x28
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fd84 	bl	8002c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119a:	2301      	movs	r3, #1
 800119c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119e:	2310      	movs	r3, #16
 80011a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fdb6 	bl	8001d1c <HAL_RCC_OscConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011b6:	f000 f8d3 	bl	8001360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ba:	230f      	movs	r3, #15
 80011bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f001 f824 	bl	8002220 <HAL_RCC_ClockConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011de:	f000 f8bf 	bl	8001360 <Error_Handler>
  }
}
 80011e2:	bf00      	nop
 80011e4:	3740      	adds	r7, #64	@ 0x40
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001208:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <MX_TIM2_Init+0x94>)
 800120a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800120e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001210:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <MX_TIM2_Init+0x94>)
 8001212:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001216:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <MX_TIM2_Init+0x94>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800121e:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <MX_TIM2_Init+0x94>)
 8001220:	2209      	movs	r2, #9
 8001222:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <MX_TIM2_Init+0x94>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <MX_TIM2_Init+0x94>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001230:	4813      	ldr	r0, [pc, #76]	@ (8001280 <MX_TIM2_Init+0x94>)
 8001232:	f001 f951 	bl	80024d8 <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800123c:	f000 f890 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001244:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	4619      	mov	r1, r3
 800124c:	480c      	ldr	r0, [pc, #48]	@ (8001280 <MX_TIM2_Init+0x94>)
 800124e:	f001 facf 	bl	80027f0 <HAL_TIM_ConfigClockSource>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001258:	f000 f882 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	@ (8001280 <MX_TIM2_Init+0x94>)
 800126a:	f001 fca7 	bl	8002bbc <HAL_TIMEx_MasterConfigSynchronization>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001274:	f000 f874 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000124 	.word	0x20000124

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b28      	ldr	r3, [pc, #160]	@ (800133c <MX_GPIO_Init+0xb8>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a27      	ldr	r2, [pc, #156]	@ (800133c <MX_GPIO_Init+0xb8>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b25      	ldr	r3, [pc, #148]	@ (800133c <MX_GPIO_Init+0xb8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b22      	ldr	r3, [pc, #136]	@ (800133c <MX_GPIO_Init+0xb8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a21      	ldr	r2, [pc, #132]	@ (800133c <MX_GPIO_Init+0xb8>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <MX_GPIO_Init+0xb8>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_RED_Pin|LED_1_Pin|LED_2_Pin
 80012c8:	2200      	movs	r2, #0
 80012ca:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 80012ce:	481c      	ldr	r0, [pc, #112]	@ (8001340 <MX_GPIO_Init+0xbc>)
 80012d0:	f000 fcf3 	bl	8001cba <HAL_GPIO_WritePin>
                          |LED_3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin|SEG0_2_Pin|SEG0_3_Pin|SEG1_4_Pin
 80012d4:	2200      	movs	r2, #0
 80012d6:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 80012da:	481a      	ldr	r0, [pc, #104]	@ (8001344 <MX_GPIO_Init+0xc0>)
 80012dc:	f000 fced 	bl	8001cba <HAL_GPIO_WritePin>
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|SEG0_4_Pin
                          |SEG0_5_Pin|SEG0_6_Pin|SEG0_7_Pin|SEG1_1_Pin
                          |SEG1_2_Pin|SEG1_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 80012e0:	230e      	movs	r3, #14
 80012e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	4619      	mov	r1, r3
 80012f2:	4813      	ldr	r0, [pc, #76]	@ (8001340 <MX_GPIO_Init+0xbc>)
 80012f4:	f000 fb4e 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_1_Pin LED_2_Pin
                           LED_3_Pin LED_4_Pin LED_5_Pin LED_6_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_1_Pin|LED_2_Pin
 80012f8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80012fc:	60bb      	str	r3, [r7, #8]
                          |LED_3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2302      	movs	r3, #2
 8001308:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4619      	mov	r1, r3
 8001310:	480b      	ldr	r0, [pc, #44]	@ (8001340 <MX_GPIO_Init+0xbc>)
 8001312:	f000 fb3f 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_1_Pin SEG0_2_Pin SEG0_3_Pin SEG1_4_Pin
                           SEG1_5_Pin SEG1_6_Pin SEG1_7_Pin SEG0_4_Pin
                           SEG0_5_Pin SEG0_6_Pin SEG0_7_Pin SEG1_1_Pin
                           SEG1_2_Pin SEG1_3_Pin */
  GPIO_InitStruct.Pin = SEG0_1_Pin|SEG0_2_Pin|SEG0_3_Pin|SEG1_4_Pin
 8001316:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800131a:	60bb      	str	r3, [r7, #8]
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|SEG0_4_Pin
                          |SEG0_5_Pin|SEG0_6_Pin|SEG0_7_Pin|SEG1_1_Pin
                          |SEG1_2_Pin|SEG1_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2302      	movs	r3, #2
 8001326:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	4619      	mov	r1, r3
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_GPIO_Init+0xc0>)
 8001330:	f000 fb30 	bl	8001994 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	40010800 	.word	0x40010800
 8001344:	40010c00 	.word	0x40010c00

08001348 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8001350:	f7fe ff2c 	bl	80001ac <getKeyInput>
	timerRun();
 8001354:	f000 f8ce 	bl	80014f4 <timerRun>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001364:	b672      	cpsid	i
}
 8001366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <Error_Handler+0x8>

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <HAL_MspInit+0x5c>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	4a14      	ldr	r2, [pc, #80]	@ (80013c8 <HAL_MspInit+0x5c>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6193      	str	r3, [r2, #24]
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_MspInit+0x5c>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <HAL_MspInit+0x5c>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a0e      	ldr	r2, [pc, #56]	@ (80013c8 <HAL_MspInit+0x5c>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <HAL_MspInit+0x5c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <HAL_MspInit+0x60>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <HAL_MspInit+0x60>)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010000 	.word	0x40010000

080013d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013e0:	d113      	bne.n	800140a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <HAL_TIM_Base_MspInit+0x44>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001414 <HAL_TIM_Base_MspInit+0x44>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <HAL_TIM_Base_MspInit+0x44>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	201c      	movs	r0, #28
 8001400:	f000 fa91 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001404:	201c      	movs	r0, #28
 8001406:	f000 faaa 	bl	800195e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <NMI_Handler+0x4>

08001420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <MemManage_Handler+0x4>

08001430 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <UsageFault_Handler+0x4>

08001440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 f96a 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <TIM2_IRQHandler+0x10>)
 8001476:	f001 f8cb 	bl	8002610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000124 	.word	0x20000124

08001484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <setTimer>:

#define MAX_COUNTER 10
int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value) {
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value;
 800149a:	4907      	ldr	r1, [pc, #28]	@ (80014b8 <setTimer+0x28>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80014a4:	4a05      	ldr	r2, [pc, #20]	@ (80014bc <setTimer+0x2c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2100      	movs	r1, #0
 80014aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	2000016c 	.word	0x2000016c
 80014bc:	20000194 	.word	0x20000194

080014c0 <isTimerExpired>:
int isTimerExpired(int index) {
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 80014c8:	4a09      	ldr	r2, [pc, #36]	@ (80014f0 <isTimerExpired+0x30>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d106      	bne.n	80014e2 <isTimerExpired+0x22>
		timer_flag[index] = 0;
 80014d4:	4a06      	ldr	r2, [pc, #24]	@ (80014f0 <isTimerExpired+0x30>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2100      	movs	r1, #0
 80014da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <isTimerExpired+0x24>
	}
	return 0;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000194 	.word	0x20000194

080014f4 <timerRun>:
void timerRun() {
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	e01c      	b.n	800153a <timerRun+0x46>
		if (timer_counter[i] > 0) {
 8001500:	4a12      	ldr	r2, [pc, #72]	@ (800154c <timerRun+0x58>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001508:	2b00      	cmp	r3, #0
 800150a:	dd13      	ble.n	8001534 <timerRun+0x40>
			timer_counter[i]--;
 800150c:	4a0f      	ldr	r2, [pc, #60]	@ (800154c <timerRun+0x58>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001514:	1e5a      	subs	r2, r3, #1
 8001516:	490d      	ldr	r1, [pc, #52]	@ (800154c <timerRun+0x58>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 800151e:	4a0b      	ldr	r2, [pc, #44]	@ (800154c <timerRun+0x58>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001526:	2b00      	cmp	r3, #0
 8001528:	dc04      	bgt.n	8001534 <timerRun+0x40>
				timer_flag[i] = 1;
 800152a:	4a09      	ldr	r2, [pc, #36]	@ (8001550 <timerRun+0x5c>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2101      	movs	r1, #1
 8001530:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3301      	adds	r3, #1
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b09      	cmp	r3, #9
 800153e:	dddf      	ble.n	8001500 <timerRun+0xc>
			}
		}
	}


}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	2000016c 	.word	0x2000016c
 8001550:	20000194 	.word	0x20000194

08001554 <turnOn_RED1>:
 *  Created on: Oct 27, 2024
 *      Author: admin
 */

#include"traffic_light.h"
void turnOn_RED1() {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2140      	movs	r1, #64	@ 0x40
 800155c:	4807      	ldr	r0, [pc, #28]	@ (800157c <turnOn_RED1+0x28>)
 800155e:	f000 fbac 	bl	8001cba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001568:	4804      	ldr	r0, [pc, #16]	@ (800157c <turnOn_RED1+0x28>)
 800156a:	f000 fba6 	bl	8001cba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2180      	movs	r1, #128	@ 0x80
 8001572:	4802      	ldr	r0, [pc, #8]	@ (800157c <turnOn_RED1+0x28>)
 8001574:	f000 fba1 	bl	8001cba <HAL_GPIO_WritePin>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40010800 	.word	0x40010800

08001580 <turnOn_GREEN1>:
void turnOn_GREEN1() {
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2140      	movs	r1, #64	@ 0x40
 8001588:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <turnOn_GREEN1+0x28>)
 800158a:	f000 fb96 	bl	8001cba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001594:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <turnOn_GREEN1+0x28>)
 8001596:	f000 fb90 	bl	8001cba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	4802      	ldr	r0, [pc, #8]	@ (80015a8 <turnOn_GREEN1+0x28>)
 80015a0:	f000 fb8b 	bl	8001cba <HAL_GPIO_WritePin>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40010800 	.word	0x40010800

080015ac <turnOn_YELLOW1>:
void turnOn_YELLOW1() {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2140      	movs	r1, #64	@ 0x40
 80015b4:	4807      	ldr	r0, [pc, #28]	@ (80015d4 <turnOn_YELLOW1+0x28>)
 80015b6:	f000 fb80 	bl	8001cba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015c0:	4804      	ldr	r0, [pc, #16]	@ (80015d4 <turnOn_YELLOW1+0x28>)
 80015c2:	f000 fb7a 	bl	8001cba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2180      	movs	r1, #128	@ 0x80
 80015ca:	4802      	ldr	r0, [pc, #8]	@ (80015d4 <turnOn_YELLOW1+0x28>)
 80015cc:	f000 fb75 	bl	8001cba <HAL_GPIO_WritePin>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40010800 	.word	0x40010800

080015d8 <turnOn_RED2>:
void turnOn_RED2() {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015e2:	4808      	ldr	r0, [pc, #32]	@ (8001604 <turnOn_RED2+0x2c>)
 80015e4:	f000 fb69 	bl	8001cba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015ee:	4805      	ldr	r0, [pc, #20]	@ (8001604 <turnOn_RED2+0x2c>)
 80015f0:	f000 fb63 	bl	8001cba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015fa:	4802      	ldr	r0, [pc, #8]	@ (8001604 <turnOn_RED2+0x2c>)
 80015fc:	f000 fb5d 	bl	8001cba <HAL_GPIO_WritePin>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40010800 	.word	0x40010800

08001608 <turnOn_GREEN2>:
void turnOn_GREEN2() {
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001612:	4808      	ldr	r0, [pc, #32]	@ (8001634 <turnOn_GREEN2+0x2c>)
 8001614:	f000 fb51 	bl	8001cba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <turnOn_GREEN2+0x2c>)
 8001620:	f000 fb4b 	bl	8001cba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800162a:	4802      	ldr	r0, [pc, #8]	@ (8001634 <turnOn_GREEN2+0x2c>)
 800162c:	f000 fb45 	bl	8001cba <HAL_GPIO_WritePin>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40010800 	.word	0x40010800

08001638 <turnOn_YELLOW2>:
void turnOn_YELLOW2() {
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001642:	4808      	ldr	r0, [pc, #32]	@ (8001664 <turnOn_YELLOW2+0x2c>)
 8001644:	f000 fb39 	bl	8001cba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <turnOn_YELLOW2+0x2c>)
 8001650:	f000 fb33 	bl	8001cba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800165a:	4802      	ldr	r0, [pc, #8]	@ (8001664 <turnOn_YELLOW2+0x2c>)
 800165c:	f000 fb2d 	bl	8001cba <HAL_GPIO_WritePin>
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40010800 	.word	0x40010800

08001668 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001668:	f7ff ff0c 	bl	8001484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800166c:	480b      	ldr	r0, [pc, #44]	@ (800169c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800166e:	490c      	ldr	r1, [pc, #48]	@ (80016a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001670:	4a0c      	ldr	r2, [pc, #48]	@ (80016a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a09      	ldr	r2, [pc, #36]	@ (80016a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001684:	4c09      	ldr	r4, [pc, #36]	@ (80016ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001692:	f001 fb05 	bl	8002ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001696:	f7ff fd53 	bl	8001140 <main>
  bx lr
 800169a:	4770      	bx	lr
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80016a4:	08002d2c 	.word	0x08002d2c
  ldr r2, =_sbss
 80016a8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80016ac:	200001c0 	.word	0x200001c0

080016b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC1_2_IRQHandler>
	...

080016b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_Init+0x28>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <HAL_Init+0x28>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f923 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	200f      	movs	r0, #15
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fe4c 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40022000 	.word	0x40022000

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f93b 	bl	800197a <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 f903 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	@ (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000000c 	.word	0x2000000c
 8001738:	20000014 	.word	0x20000014
 800173c:	20000010 	.word	0x20000010

08001740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b05      	ldr	r3, [pc, #20]	@ (800175c <HAL_IncTick+0x1c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <HAL_IncTick+0x20>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a03      	ldr	r2, [pc, #12]	@ (8001760 <HAL_IncTick+0x20>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	20000014 	.word	0x20000014
 8001760:	200001bc 	.word	0x200001bc

08001764 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b02      	ldr	r3, [pc, #8]	@ (8001774 <HAL_GetTick+0x10>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	200001bc 	.word	0x200001bc

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	@ (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	@ (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4906      	ldr	r1, [pc, #24]	@ (8001810 <__NVIC_EnableIRQ+0x34>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	@ (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	@ (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	@ 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff90 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	@ (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff2d 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff42 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff90 	bl	8001868 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5f 	bl	8001814 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff35 	bl	80017dc <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa2 	bl	80018cc <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b08b      	sub	sp, #44	@ 0x2c
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	e161      	b.n	8001c6c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019a8:	2201      	movs	r2, #1
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	f040 8150 	bne.w	8001c66 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4a97      	ldr	r2, [pc, #604]	@ (8001c28 <HAL_GPIO_Init+0x294>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d05e      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019d0:	4a95      	ldr	r2, [pc, #596]	@ (8001c28 <HAL_GPIO_Init+0x294>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d875      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019d6:	4a95      	ldr	r2, [pc, #596]	@ (8001c2c <HAL_GPIO_Init+0x298>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d058      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019dc:	4a93      	ldr	r2, [pc, #588]	@ (8001c2c <HAL_GPIO_Init+0x298>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d86f      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019e2:	4a93      	ldr	r2, [pc, #588]	@ (8001c30 <HAL_GPIO_Init+0x29c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d052      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019e8:	4a91      	ldr	r2, [pc, #580]	@ (8001c30 <HAL_GPIO_Init+0x29c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d869      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019ee:	4a91      	ldr	r2, [pc, #580]	@ (8001c34 <HAL_GPIO_Init+0x2a0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d04c      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019f4:	4a8f      	ldr	r2, [pc, #572]	@ (8001c34 <HAL_GPIO_Init+0x2a0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d863      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019fa:	4a8f      	ldr	r2, [pc, #572]	@ (8001c38 <HAL_GPIO_Init+0x2a4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d046      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 8001a00:	4a8d      	ldr	r2, [pc, #564]	@ (8001c38 <HAL_GPIO_Init+0x2a4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d85d      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 8001a06:	2b12      	cmp	r3, #18
 8001a08:	d82a      	bhi.n	8001a60 <HAL_GPIO_Init+0xcc>
 8001a0a:	2b12      	cmp	r3, #18
 8001a0c:	d859      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 8001a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a14 <HAL_GPIO_Init+0x80>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001a8f 	.word	0x08001a8f
 8001a18:	08001a69 	.word	0x08001a69
 8001a1c:	08001a7b 	.word	0x08001a7b
 8001a20:	08001abd 	.word	0x08001abd
 8001a24:	08001ac3 	.word	0x08001ac3
 8001a28:	08001ac3 	.word	0x08001ac3
 8001a2c:	08001ac3 	.word	0x08001ac3
 8001a30:	08001ac3 	.word	0x08001ac3
 8001a34:	08001ac3 	.word	0x08001ac3
 8001a38:	08001ac3 	.word	0x08001ac3
 8001a3c:	08001ac3 	.word	0x08001ac3
 8001a40:	08001ac3 	.word	0x08001ac3
 8001a44:	08001ac3 	.word	0x08001ac3
 8001a48:	08001ac3 	.word	0x08001ac3
 8001a4c:	08001ac3 	.word	0x08001ac3
 8001a50:	08001ac3 	.word	0x08001ac3
 8001a54:	08001ac3 	.word	0x08001ac3
 8001a58:	08001a71 	.word	0x08001a71
 8001a5c:	08001a85 	.word	0x08001a85
 8001a60:	4a76      	ldr	r2, [pc, #472]	@ (8001c3c <HAL_GPIO_Init+0x2a8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a66:	e02c      	b.n	8001ac2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e029      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	3304      	adds	r3, #4
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e024      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	3308      	adds	r3, #8
 8001a80:	623b      	str	r3, [r7, #32]
          break;
 8001a82:	e01f      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	330c      	adds	r3, #12
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	e01a      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a96:	2304      	movs	r3, #4
 8001a98:	623b      	str	r3, [r7, #32]
          break;
 8001a9a:	e013      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	611a      	str	r2, [r3, #16]
          break;
 8001aae:	e009      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	615a      	str	r2, [r3, #20]
          break;
 8001aba:	e003      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
          break;
 8001ac0:	e000      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          break;
 8001ac2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2bff      	cmp	r3, #255	@ 0xff
 8001ac8:	d801      	bhi.n	8001ace <HAL_GPIO_Init+0x13a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	e001      	b.n	8001ad2 <HAL_GPIO_Init+0x13e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2bff      	cmp	r3, #255	@ 0xff
 8001ad8:	d802      	bhi.n	8001ae0 <HAL_GPIO_Init+0x14c>
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	e002      	b.n	8001ae6 <HAL_GPIO_Init+0x152>
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	3b08      	subs	r3, #8
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	210f      	movs	r1, #15
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	401a      	ands	r2, r3
 8001af8:	6a39      	ldr	r1, [r7, #32]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	431a      	orrs	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80a9 	beq.w	8001c66 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b14:	4b4a      	ldr	r3, [pc, #296]	@ (8001c40 <HAL_GPIO_Init+0x2ac>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a49      	ldr	r2, [pc, #292]	@ (8001c40 <HAL_GPIO_Init+0x2ac>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b47      	ldr	r3, [pc, #284]	@ (8001c40 <HAL_GPIO_Init+0x2ac>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b2c:	4a45      	ldr	r2, [pc, #276]	@ (8001c44 <HAL_GPIO_Init+0x2b0>)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	220f      	movs	r2, #15
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a3d      	ldr	r2, [pc, #244]	@ (8001c48 <HAL_GPIO_Init+0x2b4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d00d      	beq.n	8001b74 <HAL_GPIO_Init+0x1e0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c4c <HAL_GPIO_Init+0x2b8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d007      	beq.n	8001b70 <HAL_GPIO_Init+0x1dc>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a3b      	ldr	r2, [pc, #236]	@ (8001c50 <HAL_GPIO_Init+0x2bc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d101      	bne.n	8001b6c <HAL_GPIO_Init+0x1d8>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e004      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e002      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b74:	2300      	movs	r3, #0
 8001b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b78:	f002 0203 	and.w	r2, r2, #3
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	4093      	lsls	r3, r2
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b86:	492f      	ldr	r1, [pc, #188]	@ (8001c44 <HAL_GPIO_Init+0x2b0>)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	492b      	ldr	r1, [pc, #172]	@ (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bae:	4b29      	ldr	r3, [pc, #164]	@ (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	4927      	ldr	r1, [pc, #156]	@ (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc8:	4b22      	ldr	r3, [pc, #136]	@ (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4921      	ldr	r1, [pc, #132]	@ (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60cb      	str	r3, [r1, #12]
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	491d      	ldr	r1, [pc, #116]	@ (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d006      	beq.n	8001bfe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bf0:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	4917      	ldr	r1, [pc, #92]	@ (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	4913      	ldr	r1, [pc, #76]	@ (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d01f      	beq.n	8001c58 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c18:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	490d      	ldr	r1, [pc, #52]	@ (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
 8001c24:	e01f      	b.n	8001c66 <HAL_GPIO_Init+0x2d2>
 8001c26:	bf00      	nop
 8001c28:	10320000 	.word	0x10320000
 8001c2c:	10310000 	.word	0x10310000
 8001c30:	10220000 	.word	0x10220000
 8001c34:	10210000 	.word	0x10210000
 8001c38:	10120000 	.word	0x10120000
 8001c3c:	10110000 	.word	0x10110000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010000 	.word	0x40010000
 8001c48:	40010800 	.word	0x40010800
 8001c4c:	40010c00 	.word	0x40010c00
 8001c50:	40011000 	.word	0x40011000
 8001c54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_GPIO_Init+0x2f4>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	4909      	ldr	r1, [pc, #36]	@ (8001c88 <HAL_GPIO_Init+0x2f4>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	3301      	adds	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	fa22 f303 	lsr.w	r3, r2, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f47f ae96 	bne.w	80019a8 <HAL_GPIO_Init+0x14>
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	372c      	adds	r7, #44	@ 0x2c
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	40010400 	.word	0x40010400

08001c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e001      	b.n	8001cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	807b      	strh	r3, [r7, #2]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cca:	787b      	ldrb	r3, [r7, #1]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd0:	887a      	ldrh	r2, [r7, #2]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cd6:	e003      	b.n	8001ce0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	041a      	lsls	r2, r3, #16
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	611a      	str	r2, [r3, #16]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b085      	sub	sp, #20
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cfc:	887a      	ldrh	r2, [r7, #2]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4013      	ands	r3, r2
 8001d02:	041a      	lsls	r2, r3, #16
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43d9      	mvns	r1, r3
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	400b      	ands	r3, r1
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	611a      	str	r2, [r3, #16]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e272      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8087 	beq.w	8001e4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d3c:	4b92      	ldr	r3, [pc, #584]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d00c      	beq.n	8001d62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d48:	4b8f      	ldr	r3, [pc, #572]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d112      	bne.n	8001d7a <HAL_RCC_OscConfig+0x5e>
 8001d54:	4b8c      	ldr	r3, [pc, #560]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d60:	d10b      	bne.n	8001d7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d62:	4b89      	ldr	r3, [pc, #548]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d06c      	beq.n	8001e48 <HAL_RCC_OscConfig+0x12c>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d168      	bne.n	8001e48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e24c      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x76>
 8001d84:	4b80      	ldr	r3, [pc, #512]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a7f      	ldr	r2, [pc, #508]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	e02e      	b.n	8001df0 <HAL_RCC_OscConfig+0xd4>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x98>
 8001d9a:	4b7b      	ldr	r3, [pc, #492]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a7a      	ldr	r2, [pc, #488]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b78      	ldr	r3, [pc, #480]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a77      	ldr	r2, [pc, #476]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e01d      	b.n	8001df0 <HAL_RCC_OscConfig+0xd4>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xbc>
 8001dbe:	4b72      	ldr	r3, [pc, #456]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a71      	ldr	r2, [pc, #452]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b6f      	ldr	r3, [pc, #444]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a6e      	ldr	r2, [pc, #440]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0xd4>
 8001dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a6a      	ldr	r2, [pc, #424]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b68      	ldr	r3, [pc, #416]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a67      	ldr	r2, [pc, #412]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fcb4 	bl	8001764 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fcb0 	bl	8001764 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	@ 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e200      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	4b5d      	ldr	r3, [pc, #372]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0xe4>
 8001e1e:	e014      	b.n	8001e4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fca0 	bl	8001764 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff fc9c 	bl	8001764 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	@ 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e1ec      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3a:	4b53      	ldr	r3, [pc, #332]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x10c>
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d063      	beq.n	8001f1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e56:	4b4c      	ldr	r3, [pc, #304]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00b      	beq.n	8001e7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e62:	4b49      	ldr	r3, [pc, #292]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d11c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x18c>
 8001e6e:	4b46      	ldr	r3, [pc, #280]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d116      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	4b43      	ldr	r3, [pc, #268]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_RCC_OscConfig+0x176>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e1c0      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b3d      	ldr	r3, [pc, #244]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4939      	ldr	r1, [pc, #228]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	e03a      	b.n	8001f1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb0:	4b36      	ldr	r3, [pc, #216]	@ (8001f8c <HAL_RCC_OscConfig+0x270>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7ff fc55 	bl	8001764 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ebe:	f7ff fc51 	bl	8001764 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e1a1      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001edc:	4b2a      	ldr	r3, [pc, #168]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4927      	ldr	r1, [pc, #156]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
 8001ef0:	e015      	b.n	8001f1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef2:	4b26      	ldr	r3, [pc, #152]	@ (8001f8c <HAL_RCC_OscConfig+0x270>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fc34 	bl	8001764 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f00:	f7ff fc30 	bl	8001764 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e180      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f12:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d03a      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d019      	beq.n	8001f66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f32:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f38:	f7ff fc14 	bl	8001764 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f40:	f7ff fc10 	bl	8001764 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e160      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f52:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f000 fa9c 	bl	800249c <RCC_Delay>
 8001f64:	e01c      	b.n	8001fa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6c:	f7ff fbfa 	bl	8001764 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f72:	e00f      	b.n	8001f94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f74:	f7ff fbf6 	bl	8001764 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d908      	bls.n	8001f94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e146      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	42420000 	.word	0x42420000
 8001f90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f94:	4b92      	ldr	r3, [pc, #584]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1e9      	bne.n	8001f74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80a6 	beq.w	80020fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb2:	4b8b      	ldr	r3, [pc, #556]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10d      	bne.n	8001fda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	4b88      	ldr	r3, [pc, #544]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a87      	ldr	r2, [pc, #540]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	61d3      	str	r3, [r2, #28]
 8001fca:	4b85      	ldr	r3, [pc, #532]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fda:	4b82      	ldr	r3, [pc, #520]	@ (80021e4 <HAL_RCC_OscConfig+0x4c8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d118      	bne.n	8002018 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe6:	4b7f      	ldr	r3, [pc, #508]	@ (80021e4 <HAL_RCC_OscConfig+0x4c8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7e      	ldr	r2, [pc, #504]	@ (80021e4 <HAL_RCC_OscConfig+0x4c8>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fbb7 	bl	8001764 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffa:	f7ff fbb3 	bl	8001764 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b64      	cmp	r3, #100	@ 0x64
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e103      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	4b75      	ldr	r3, [pc, #468]	@ (80021e4 <HAL_RCC_OscConfig+0x4c8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x312>
 8002020:	4b6f      	ldr	r3, [pc, #444]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a6e      	ldr	r2, [pc, #440]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6213      	str	r3, [r2, #32]
 800202c:	e02d      	b.n	800208a <HAL_RCC_OscConfig+0x36e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x334>
 8002036:	4b6a      	ldr	r3, [pc, #424]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a69      	ldr	r2, [pc, #420]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6213      	str	r3, [r2, #32]
 8002042:	4b67      	ldr	r3, [pc, #412]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a66      	ldr	r2, [pc, #408]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	6213      	str	r3, [r2, #32]
 800204e:	e01c      	b.n	800208a <HAL_RCC_OscConfig+0x36e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b05      	cmp	r3, #5
 8002056:	d10c      	bne.n	8002072 <HAL_RCC_OscConfig+0x356>
 8002058:	4b61      	ldr	r3, [pc, #388]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4a60      	ldr	r2, [pc, #384]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	6213      	str	r3, [r2, #32]
 8002064:	4b5e      	ldr	r3, [pc, #376]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a5d      	ldr	r2, [pc, #372]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6213      	str	r3, [r2, #32]
 8002070:	e00b      	b.n	800208a <HAL_RCC_OscConfig+0x36e>
 8002072:	4b5b      	ldr	r3, [pc, #364]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4a5a      	ldr	r2, [pc, #360]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	6213      	str	r3, [r2, #32]
 800207e:	4b58      	ldr	r3, [pc, #352]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4a57      	ldr	r2, [pc, #348]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d015      	beq.n	80020be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002092:	f7ff fb67 	bl	8001764 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002098:	e00a      	b.n	80020b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f7ff fb63 	bl	8001764 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e0b1      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	4b4b      	ldr	r3, [pc, #300]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0ee      	beq.n	800209a <HAL_RCC_OscConfig+0x37e>
 80020bc:	e014      	b.n	80020e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7ff fb51 	bl	8001764 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7ff fb4d 	bl	8001764 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e09b      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020dc:	4b40      	ldr	r3, [pc, #256]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ee      	bne.n	80020c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020e8:	7dfb      	ldrb	r3, [r7, #23]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d105      	bne.n	80020fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ee:	4b3c      	ldr	r3, [pc, #240]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4a3b      	ldr	r2, [pc, #236]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8087 	beq.w	8002212 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002104:	4b36      	ldr	r3, [pc, #216]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b08      	cmp	r3, #8
 800210e:	d061      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d146      	bne.n	80021a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002118:	4b33      	ldr	r3, [pc, #204]	@ (80021e8 <HAL_RCC_OscConfig+0x4cc>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff fb21 	bl	8001764 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002126:	f7ff fb1d 	bl	8001764 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e06d      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002138:	4b29      	ldr	r3, [pc, #164]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800214c:	d108      	bne.n	8002160 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800214e:	4b24      	ldr	r3, [pc, #144]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4921      	ldr	r1, [pc, #132]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002160:	4b1f      	ldr	r3, [pc, #124]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a19      	ldr	r1, [r3, #32]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	430b      	orrs	r3, r1
 8002172:	491b      	ldr	r1, [pc, #108]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002178:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <HAL_RCC_OscConfig+0x4cc>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7ff faf1 	bl	8001764 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002186:	f7ff faed 	bl	8001764 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e03d      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002198:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x46a>
 80021a4:	e035      	b.n	8002212 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a6:	4b10      	ldr	r3, [pc, #64]	@ (80021e8 <HAL_RCC_OscConfig+0x4cc>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fada 	bl	8001764 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7ff fad6 	bl	8001764 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e026      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c6:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x498>
 80021d2:	e01e      	b.n	8002212 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d107      	bne.n	80021ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e019      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40007000 	.word	0x40007000
 80021e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <HAL_RCC_OscConfig+0x500>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d106      	bne.n	800220e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000

08002220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0d0      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002234:	4b6a      	ldr	r3, [pc, #424]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d910      	bls.n	8002264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b67      	ldr	r3, [pc, #412]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 0207 	bic.w	r2, r3, #7
 800224a:	4965      	ldr	r1, [pc, #404]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b63      	ldr	r3, [pc, #396]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0b8      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800227c:	4b59      	ldr	r3, [pc, #356]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a58      	ldr	r2, [pc, #352]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002286:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002294:	4b53      	ldr	r3, [pc, #332]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a52      	ldr	r2, [pc, #328]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800229e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b50      	ldr	r3, [pc, #320]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	494d      	ldr	r1, [pc, #308]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d040      	beq.n	8002340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	4b47      	ldr	r3, [pc, #284]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d115      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e07f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022de:	4b41      	ldr	r3, [pc, #260]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e073      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ee:	4b3d      	ldr	r3, [pc, #244]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e06b      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fe:	4b39      	ldr	r3, [pc, #228]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f023 0203 	bic.w	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4936      	ldr	r1, [pc, #216]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002310:	f7ff fa28 	bl	8001764 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	e00a      	b.n	800232e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7ff fa24 	bl	8001764 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e053      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	4b2d      	ldr	r3, [pc, #180]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 020c 	and.w	r2, r3, #12
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	429a      	cmp	r2, r3
 800233e:	d1eb      	bne.n	8002318 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002340:	4b27      	ldr	r3, [pc, #156]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d210      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b24      	ldr	r3, [pc, #144]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4922      	ldr	r1, [pc, #136]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b20      	ldr	r3, [pc, #128]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e032      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237c:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4916      	ldr	r1, [pc, #88]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800239a:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	490e      	ldr	r1, [pc, #56]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ae:	f000 f821 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	490a      	ldr	r1, [pc, #40]	@ (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	fa22 f303 	lsr.w	r3, r2, r3
 80023c6:	4a09      	ldr	r2, [pc, #36]	@ (80023ec <HAL_RCC_ClockConfig+0x1cc>)
 80023c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ca:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <HAL_RCC_ClockConfig+0x1d0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff f986 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40022000 	.word	0x40022000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08002d00 	.word	0x08002d00
 80023ec:	2000000c 	.word	0x2000000c
 80023f0:	20000010 	.word	0x20000010

080023f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800240e:	4b1e      	ldr	r3, [pc, #120]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x94>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b04      	cmp	r3, #4
 800241c:	d002      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x30>
 800241e:	2b08      	cmp	r3, #8
 8002420:	d003      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0x36>
 8002422:	e027      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002424:	4b19      	ldr	r3, [pc, #100]	@ (800248c <HAL_RCC_GetSysClockFreq+0x98>)
 8002426:	613b      	str	r3, [r7, #16]
      break;
 8002428:	e027      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	0c9b      	lsrs	r3, r3, #18
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	4a17      	ldr	r2, [pc, #92]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002434:	5cd3      	ldrb	r3, [r2, r3]
 8002436:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d010      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002442:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x94>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	0c5b      	lsrs	r3, r3, #17
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	4a11      	ldr	r2, [pc, #68]	@ (8002494 <HAL_RCC_GetSysClockFreq+0xa0>)
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a0d      	ldr	r2, [pc, #52]	@ (800248c <HAL_RCC_GetSysClockFreq+0x98>)
 8002456:	fb03 f202 	mul.w	r2, r3, r2
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	e004      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a0c      	ldr	r2, [pc, #48]	@ (8002498 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002468:	fb02 f303 	mul.w	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	613b      	str	r3, [r7, #16]
      break;
 8002472:	e002      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4b05      	ldr	r3, [pc, #20]	@ (800248c <HAL_RCC_GetSysClockFreq+0x98>)
 8002476:	613b      	str	r3, [r7, #16]
      break;
 8002478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247a:	693b      	ldr	r3, [r7, #16]
}
 800247c:	4618      	mov	r0, r3
 800247e:	371c      	adds	r7, #28
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
 800248c:	007a1200 	.word	0x007a1200
 8002490:	08002d10 	.word	0x08002d10
 8002494:	08002d20 	.word	0x08002d20
 8002498:	003d0900 	.word	0x003d0900

0800249c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024a4:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <RCC_Delay+0x34>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <RCC_Delay+0x38>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	0a5b      	lsrs	r3, r3, #9
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024b8:	bf00      	nop
  }
  while (Delay --);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1e5a      	subs	r2, r3, #1
 80024be:	60fa      	str	r2, [r7, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f9      	bne.n	80024b8 <RCC_Delay+0x1c>
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	2000000c 	.word	0x2000000c
 80024d4:	10624dd3 	.word	0x10624dd3

080024d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e041      	b.n	800256e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7fe ff66 	bl	80013d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3304      	adds	r3, #4
 8002514:	4619      	mov	r1, r3
 8002516:	4610      	mov	r0, r2
 8002518:	f000 fa56 	bl	80029c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d001      	beq.n	8002590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e035      	b.n	80025fc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a16      	ldr	r2, [pc, #88]	@ (8002608 <HAL_TIM_Base_Start_IT+0x90>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d009      	beq.n	80025c6 <HAL_TIM_Base_Start_IT+0x4e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ba:	d004      	beq.n	80025c6 <HAL_TIM_Base_Start_IT+0x4e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a12      	ldr	r2, [pc, #72]	@ (800260c <HAL_TIM_Base_Start_IT+0x94>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d111      	bne.n	80025ea <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b06      	cmp	r3, #6
 80025d6:	d010      	beq.n	80025fa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e8:	e007      	b.n	80025fa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40012c00 	.word	0x40012c00
 800260c:	40000400 	.word	0x40000400

08002610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d020      	beq.n	8002674 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01b      	beq.n	8002674 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0202 	mvn.w	r2, #2
 8002644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f998 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 8002660:	e005      	b.n	800266e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f98b 	bl	800297e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f99a 	bl	80029a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d020      	beq.n	80026c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01b      	beq.n	80026c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0204 	mvn.w	r2, #4
 8002690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2202      	movs	r2, #2
 8002696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f972 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 80026ac:	e005      	b.n	80026ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f965 	bl	800297e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f974 	bl	80029a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d020      	beq.n	800270c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01b      	beq.n	800270c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0208 	mvn.w	r2, #8
 80026dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2204      	movs	r2, #4
 80026e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f94c 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 80026f8:	e005      	b.n	8002706 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f93f 	bl	800297e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f94e 	bl	80029a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	d020      	beq.n	8002758 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01b      	beq.n	8002758 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0210 	mvn.w	r2, #16
 8002728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2208      	movs	r2, #8
 800272e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f926 	bl	8002990 <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f919 	bl	800297e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f928 	bl	80029a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00c      	beq.n	800277c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0201 	mvn.w	r2, #1
 8002774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7fe fde6 	bl	8001348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00c      	beq.n	80027a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fa6f 	bl	8002c7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00c      	beq.n	80027c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f8f8 	bl	80029b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00c      	beq.n	80027e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0220 	mvn.w	r2, #32
 80027e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fa42 	bl	8002c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_TIM_ConfigClockSource+0x1c>
 8002808:	2302      	movs	r3, #2
 800280a:	e0b4      	b.n	8002976 <HAL_TIM_ConfigClockSource+0x186>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800282a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002832:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002844:	d03e      	beq.n	80028c4 <HAL_TIM_ConfigClockSource+0xd4>
 8002846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800284a:	f200 8087 	bhi.w	800295c <HAL_TIM_ConfigClockSource+0x16c>
 800284e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002852:	f000 8086 	beq.w	8002962 <HAL_TIM_ConfigClockSource+0x172>
 8002856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800285a:	d87f      	bhi.n	800295c <HAL_TIM_ConfigClockSource+0x16c>
 800285c:	2b70      	cmp	r3, #112	@ 0x70
 800285e:	d01a      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0xa6>
 8002860:	2b70      	cmp	r3, #112	@ 0x70
 8002862:	d87b      	bhi.n	800295c <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b60      	cmp	r3, #96	@ 0x60
 8002866:	d050      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x11a>
 8002868:	2b60      	cmp	r3, #96	@ 0x60
 800286a:	d877      	bhi.n	800295c <HAL_TIM_ConfigClockSource+0x16c>
 800286c:	2b50      	cmp	r3, #80	@ 0x50
 800286e:	d03c      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0xfa>
 8002870:	2b50      	cmp	r3, #80	@ 0x50
 8002872:	d873      	bhi.n	800295c <HAL_TIM_ConfigClockSource+0x16c>
 8002874:	2b40      	cmp	r3, #64	@ 0x40
 8002876:	d058      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x13a>
 8002878:	2b40      	cmp	r3, #64	@ 0x40
 800287a:	d86f      	bhi.n	800295c <HAL_TIM_ConfigClockSource+0x16c>
 800287c:	2b30      	cmp	r3, #48	@ 0x30
 800287e:	d064      	beq.n	800294a <HAL_TIM_ConfigClockSource+0x15a>
 8002880:	2b30      	cmp	r3, #48	@ 0x30
 8002882:	d86b      	bhi.n	800295c <HAL_TIM_ConfigClockSource+0x16c>
 8002884:	2b20      	cmp	r3, #32
 8002886:	d060      	beq.n	800294a <HAL_TIM_ConfigClockSource+0x15a>
 8002888:	2b20      	cmp	r3, #32
 800288a:	d867      	bhi.n	800295c <HAL_TIM_ConfigClockSource+0x16c>
 800288c:	2b00      	cmp	r3, #0
 800288e:	d05c      	beq.n	800294a <HAL_TIM_ConfigClockSource+0x15a>
 8002890:	2b10      	cmp	r3, #16
 8002892:	d05a      	beq.n	800294a <HAL_TIM_ConfigClockSource+0x15a>
 8002894:	e062      	b.n	800295c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028a6:	f000 f96a 	bl	8002b7e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	609a      	str	r2, [r3, #8]
      break;
 80028c2:	e04f      	b.n	8002964 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028d4:	f000 f953 	bl	8002b7e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028e6:	609a      	str	r2, [r3, #8]
      break;
 80028e8:	e03c      	b.n	8002964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f6:	461a      	mov	r2, r3
 80028f8:	f000 f8ca 	bl	8002a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2150      	movs	r1, #80	@ 0x50
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f921 	bl	8002b4a <TIM_ITRx_SetConfig>
      break;
 8002908:	e02c      	b.n	8002964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002916:	461a      	mov	r2, r3
 8002918:	f000 f8e8 	bl	8002aec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2160      	movs	r1, #96	@ 0x60
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f911 	bl	8002b4a <TIM_ITRx_SetConfig>
      break;
 8002928:	e01c      	b.n	8002964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002936:	461a      	mov	r2, r3
 8002938:	f000 f8aa 	bl	8002a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2140      	movs	r1, #64	@ 0x40
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f901 	bl	8002b4a <TIM_ITRx_SetConfig>
      break;
 8002948:	e00c      	b.n	8002964 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f000 f8f8 	bl	8002b4a <TIM_ITRx_SetConfig>
      break;
 800295a:	e003      	b.n	8002964 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
      break;
 8002960:	e000      	b.n	8002964 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
	...

080029c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a2b      	ldr	r2, [pc, #172]	@ (8002a88 <TIM_Base_SetConfig+0xc0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d007      	beq.n	80029f0 <TIM_Base_SetConfig+0x28>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e6:	d003      	beq.n	80029f0 <TIM_Base_SetConfig+0x28>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a28      	ldr	r2, [pc, #160]	@ (8002a8c <TIM_Base_SetConfig+0xc4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d108      	bne.n	8002a02 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a20      	ldr	r2, [pc, #128]	@ (8002a88 <TIM_Base_SetConfig+0xc0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <TIM_Base_SetConfig+0x52>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a10:	d003      	beq.n	8002a1a <TIM_Base_SetConfig+0x52>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	@ (8002a8c <TIM_Base_SetConfig+0xc4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d108      	bne.n	8002a2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a0d      	ldr	r2, [pc, #52]	@ (8002a88 <TIM_Base_SetConfig+0xc0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d103      	bne.n	8002a60 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f023 0201 	bic.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	611a      	str	r2, [r3, #16]
  }
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40000400 	.word	0x40000400

08002a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	f023 0201 	bic.w	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f023 030a 	bic.w	r3, r3, #10
 8002acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	621a      	str	r2, [r3, #32]
}
 8002ae2:	bf00      	nop
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f023 0210 	bic.w	r2, r3, #16
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	031b      	lsls	r3, r3, #12
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	621a      	str	r2, [r3, #32]
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f043 0307 	orr.w	r3, r3, #7
 8002b6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	609a      	str	r2, [r3, #8]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b087      	sub	sp, #28
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	021a      	lsls	r2, r3, #8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	609a      	str	r2, [r3, #8]
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e041      	b.n	8002c58 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a14      	ldr	r2, [pc, #80]	@ (8002c64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d009      	beq.n	8002c2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c20:	d004      	beq.n	8002c2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a10      	ldr	r2, [pc, #64]	@ (8002c68 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d10c      	bne.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40000400 	.word	0x40000400

08002c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <memset>:
 8002c90:	4603      	mov	r3, r0
 8002c92:	4402      	add	r2, r0
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d100      	bne.n	8002c9a <memset+0xa>
 8002c98:	4770      	bx	lr
 8002c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c9e:	e7f9      	b.n	8002c94 <memset+0x4>

08002ca0 <__libc_init_array>:
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	2600      	movs	r6, #0
 8002ca4:	4d0c      	ldr	r5, [pc, #48]	@ (8002cd8 <__libc_init_array+0x38>)
 8002ca6:	4c0d      	ldr	r4, [pc, #52]	@ (8002cdc <__libc_init_array+0x3c>)
 8002ca8:	1b64      	subs	r4, r4, r5
 8002caa:	10a4      	asrs	r4, r4, #2
 8002cac:	42a6      	cmp	r6, r4
 8002cae:	d109      	bne.n	8002cc4 <__libc_init_array+0x24>
 8002cb0:	f000 f81a 	bl	8002ce8 <_init>
 8002cb4:	2600      	movs	r6, #0
 8002cb6:	4d0a      	ldr	r5, [pc, #40]	@ (8002ce0 <__libc_init_array+0x40>)
 8002cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ce4 <__libc_init_array+0x44>)
 8002cba:	1b64      	subs	r4, r4, r5
 8002cbc:	10a4      	asrs	r4, r4, #2
 8002cbe:	42a6      	cmp	r6, r4
 8002cc0:	d105      	bne.n	8002cce <__libc_init_array+0x2e>
 8002cc2:	bd70      	pop	{r4, r5, r6, pc}
 8002cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc8:	4798      	blx	r3
 8002cca:	3601      	adds	r6, #1
 8002ccc:	e7ee      	b.n	8002cac <__libc_init_array+0xc>
 8002cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd2:	4798      	blx	r3
 8002cd4:	3601      	adds	r6, #1
 8002cd6:	e7f2      	b.n	8002cbe <__libc_init_array+0x1e>
 8002cd8:	08002d24 	.word	0x08002d24
 8002cdc:	08002d24 	.word	0x08002d24
 8002ce0:	08002d24 	.word	0x08002d24
 8002ce4:	08002d28 	.word	0x08002d28

08002ce8 <_init>:
 8002ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cea:	bf00      	nop
 8002cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cee:	bc08      	pop	{r3}
 8002cf0:	469e      	mov	lr, r3
 8002cf2:	4770      	bx	lr

08002cf4 <_fini>:
 8002cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf6:	bf00      	nop
 8002cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfa:	bc08      	pop	{r3}
 8002cfc:	469e      	mov	lr, r3
 8002cfe:	4770      	bx	lr
