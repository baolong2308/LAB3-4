
LAB3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c64  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d70  08002d70  00003d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d94  08002d94  00004018  2**0
                  CONTENTS
  4 .ARM          00000000  08002d94  08002d94  00004018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d94  08002d94  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d94  08002d94  00003d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d98  08002d98  00003d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002d9c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000018  08002db4  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08002db4  000041c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008877  00000000  00000000  00004041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d2c  00000000  00000000  0000c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0000e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000800  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173bf  00000000  00000000  0000f890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d86a  00000000  00000000  00026c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082691  00000000  00000000  000344b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6b4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002938  00000000  00000000  000b6b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000b94c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d58 	.word	0x08002d58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002d58 	.word	0x08002d58

0800014c <isButtonPressed>:
int KeyReg1[MAX_BUTTON] = { NORMAL_STATE };
int KeyReg2[MAX_BUTTON] = { NORMAL_STATE };
int KeyReg3[MAX_BUTTON] = { NORMAL_STATE }; // trạng thái ổn định trước đó
int button_flag[MAX_BUTTON];

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000d4 	.word	0x200000d4

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a06      	ldr	r2, [pc, #24]	@ (80001a4 <subKeyProcess+0x24>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000192:	2110      	movs	r1, #16
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <subKeyProcess+0x28>)
 8000196:	f001 fde0 	bl	8001d5a <HAL_GPIO_TogglePin>
}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	200000d4 	.word	0x200000d4
 80001a8:	40010800 	.word	0x40010800

080001ac <getKeyInput>:

void getKeyInput() {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
	KeyReg0[0] = KeyReg1[0];
 80001b2:	4b36      	ldr	r3, [pc, #216]	@ (800028c <getKeyInput+0xe0>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a36      	ldr	r2, [pc, #216]	@ (8000290 <getKeyInput+0xe4>)
 80001b8:	6013      	str	r3, [r2, #0]
	KeyReg1[0] = KeyReg2[0];
 80001ba:	4b36      	ldr	r3, [pc, #216]	@ (8000294 <getKeyInput+0xe8>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a33      	ldr	r2, [pc, #204]	@ (800028c <getKeyInput+0xe0>)
 80001c0:	6013      	str	r3, [r2, #0]
	KeyReg2[0] = HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin);
 80001c2:	2102      	movs	r1, #2
 80001c4:	4834      	ldr	r0, [pc, #208]	@ (8000298 <getKeyInput+0xec>)
 80001c6:	f001 fd99 	bl	8001cfc <HAL_GPIO_ReadPin>
 80001ca:	4603      	mov	r3, r0
 80001cc:	461a      	mov	r2, r3
 80001ce:	4b31      	ldr	r3, [pc, #196]	@ (8000294 <getKeyInput+0xe8>)
 80001d0:	601a      	str	r2, [r3, #0]

	KeyReg0[1] = KeyReg1[1];
 80001d2:	4b2e      	ldr	r3, [pc, #184]	@ (800028c <getKeyInput+0xe0>)
 80001d4:	685b      	ldr	r3, [r3, #4]
 80001d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000290 <getKeyInput+0xe4>)
 80001d8:	6053      	str	r3, [r2, #4]
	KeyReg1[1] = KeyReg2[1];
 80001da:	4b2e      	ldr	r3, [pc, #184]	@ (8000294 <getKeyInput+0xe8>)
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	4a2b      	ldr	r2, [pc, #172]	@ (800028c <getKeyInput+0xe0>)
 80001e0:	6053      	str	r3, [r2, #4]
	KeyReg2[1] = HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin);
 80001e2:	2104      	movs	r1, #4
 80001e4:	482c      	ldr	r0, [pc, #176]	@ (8000298 <getKeyInput+0xec>)
 80001e6:	f001 fd89 	bl	8001cfc <HAL_GPIO_ReadPin>
 80001ea:	4603      	mov	r3, r0
 80001ec:	461a      	mov	r2, r3
 80001ee:	4b29      	ldr	r3, [pc, #164]	@ (8000294 <getKeyInput+0xe8>)
 80001f0:	605a      	str	r2, [r3, #4]

	KeyReg0[2] = KeyReg1[2];
 80001f2:	4b26      	ldr	r3, [pc, #152]	@ (800028c <getKeyInput+0xe0>)
 80001f4:	689b      	ldr	r3, [r3, #8]
 80001f6:	4a26      	ldr	r2, [pc, #152]	@ (8000290 <getKeyInput+0xe4>)
 80001f8:	6093      	str	r3, [r2, #8]
	KeyReg1[2] = KeyReg2[2];
 80001fa:	4b26      	ldr	r3, [pc, #152]	@ (8000294 <getKeyInput+0xe8>)
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	4a23      	ldr	r2, [pc, #140]	@ (800028c <getKeyInput+0xe0>)
 8000200:	6093      	str	r3, [r2, #8]
	KeyReg2[2] = HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin);
 8000202:	2108      	movs	r1, #8
 8000204:	4824      	ldr	r0, [pc, #144]	@ (8000298 <getKeyInput+0xec>)
 8000206:	f001 fd79 	bl	8001cfc <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	461a      	mov	r2, r3
 800020e:	4b21      	ldr	r3, [pc, #132]	@ (8000294 <getKeyInput+0xe8>)
 8000210:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < MAX_BUTTON; i++) {
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	e031      	b.n	800027c <getKeyInput+0xd0>
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) { // xử lý ổn định button
 8000218:	4a1d      	ldr	r2, [pc, #116]	@ (8000290 <getKeyInput+0xe4>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	491a      	ldr	r1, [pc, #104]	@ (800028c <getKeyInput+0xe0>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d124      	bne.n	8000276 <getKeyInput+0xca>
 800022c:	4a17      	ldr	r2, [pc, #92]	@ (800028c <getKeyInput+0xe0>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	4917      	ldr	r1, [pc, #92]	@ (8000294 <getKeyInput+0xe8>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d11a      	bne.n	8000276 <getKeyInput+0xca>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000240:	4a16      	ldr	r2, [pc, #88]	@ (800029c <getKeyInput+0xf0>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	4912      	ldr	r1, [pc, #72]	@ (8000294 <getKeyInput+0xe8>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000250:	429a      	cmp	r2, r3
 8000252:	d010      	beq.n	8000276 <getKeyInput+0xca>
				KeyReg3[i] = KeyReg2[i];
 8000254:	4a0f      	ldr	r2, [pc, #60]	@ (8000294 <getKeyInput+0xe8>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <getKeyInput+0xf0>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg2[i] == PRESSED_STATE) { // nhấn thả
 8000264:	4a0b      	ldr	r2, [pc, #44]	@ (8000294 <getKeyInput+0xe8>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d102      	bne.n	8000276 <getKeyInput+0xca>
					//TODO
					subKeyProcess(i);
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f7ff ff85 	bl	8000180 <subKeyProcess>
	for (int i = 0; i < MAX_BUTTON; i++) {
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	3301      	adds	r3, #1
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b09      	cmp	r3, #9
 8000280:	ddca      	ble.n	8000218 <getKeyInput+0x6c>
			 KeyReg3[i] = NORMAL_STATE;	// Luôn để Key3 != Key2
			 }
			 }*/
		}
	}
}
 8000282:	bf00      	nop
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	2000005c 	.word	0x2000005c
 8000290:	20000034 	.word	0x20000034
 8000294:	20000084 	.word	0x20000084
 8000298:	40010800 	.word	0x40010800
 800029c:	200000ac 	.word	0x200000ac

080002a0 <scanLEDs>:
 *      Author: admin
 */

#include"fsm_automatic.h"
#include"led7_segment.h"
void scanLEDs(int time_1, int time_2) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	updateClockBuffer(time_1, time_2);
 80002aa:	6839      	ldr	r1, [r7, #0]
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f000 fb01 	bl	80008b4 <updateClockBuffer>
	update7SEG_2(index_led_2++ % 2);
 80002b2:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <scanLEDs+0x58>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	1c5a      	adds	r2, r3, #1
 80002b8:	490f      	ldr	r1, [pc, #60]	@ (80002f8 <scanLEDs+0x58>)
 80002ba:	600a      	str	r2, [r1, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	bfb8      	it	lt
 80002c4:	425b      	neglt	r3, r3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fb68 	bl	800099c <update7SEG_2>
	update7SEG_1(index_led_1++ % 2);
 80002cc:	4b0b      	ldr	r3, [pc, #44]	@ (80002fc <scanLEDs+0x5c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	490a      	ldr	r1, [pc, #40]	@ (80002fc <scanLEDs+0x5c>)
 80002d4:	600a      	str	r2, [r1, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	f003 0301 	and.w	r3, r3, #1
 80002dc:	bfb8      	it	lt
 80002de:	425b      	neglt	r3, r3
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fb23 	bl	800092c <update7SEG_1>
	setTimer(3, 25);
 80002e6:	2119      	movs	r1, #25
 80002e8:	2003      	movs	r0, #3
 80002ea:	f001 f8e1 	bl	80014b0 <setTimer>
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000110 	.word	0x20000110
 80002fc:	2000010c 	.word	0x2000010c

08000300 <fsm_automatic_run>:

void fsm_automatic_run() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0

	if (isTimerExpired(0) == 1) {
 8000304:	2000      	movs	r0, #0
 8000306:	f001 f8eb 	bl	80014e0 <isTimerExpired>
 800030a:	4603      	mov	r3, r0
 800030c:	2b01      	cmp	r3, #1
 800030e:	d107      	bne.n	8000320 <fsm_automatic_run+0x20>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000310:	2120      	movs	r1, #32
 8000312:	489d      	ldr	r0, [pc, #628]	@ (8000588 <fsm_automatic_run+0x288>)
 8000314:	f001 fd21 	bl	8001d5a <HAL_GPIO_TogglePin>
		setTimer(0, 100);
 8000318:	2164      	movs	r1, #100	@ 0x64
 800031a:	2000      	movs	r0, #0
 800031c:	f001 f8c8 	bl	80014b0 <setTimer>
	}

	switch (status) {
 8000320:	4b9a      	ldr	r3, [pc, #616]	@ (800058c <fsm_automatic_run+0x28c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	3b01      	subs	r3, #1
 8000326:	2b04      	cmp	r3, #4
 8000328:	f200 818d 	bhi.w	8000646 <fsm_automatic_run+0x346>
 800032c:	a201      	add	r2, pc, #4	@ (adr r2, 8000334 <fsm_automatic_run+0x34>)
 800032e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000332:	bf00      	nop
 8000334:	08000349 	.word	0x08000349
 8000338:	08000399 	.word	0x08000399
 800033c:	0800044f 	.word	0x0800044f
 8000340:	080004ef 	.word	0x080004ef
 8000344:	080005a9 	.word	0x080005a9
	case INIT:
		turnOff_LED();
 8000348:	f001 f914 	bl	8001574 <turnOff_LED>
		temp = 0;
 800034c:	4b90      	ldr	r3, [pc, #576]	@ (8000590 <fsm_automatic_run+0x290>)
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
		status = RED_GREEN;
 8000352:	4b8e      	ldr	r3, [pc, #568]	@ (800058c <fsm_automatic_run+0x28c>)
 8000354:	2202      	movs	r2, #2
 8000356:	601a      	str	r2, [r3, #0]
		time_1 = TIME_GREEN - 1;
 8000358:	4b8e      	ldr	r3, [pc, #568]	@ (8000594 <fsm_automatic_run+0x294>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	3b01      	subs	r3, #1
 800035e:	4a8e      	ldr	r2, [pc, #568]	@ (8000598 <fsm_automatic_run+0x298>)
 8000360:	6013      	str	r3, [r2, #0]
		time_2 = TIME_RED - 1;
 8000362:	4b8e      	ldr	r3, [pc, #568]	@ (800059c <fsm_automatic_run+0x29c>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	3b01      	subs	r3, #1
 8000368:	4a8d      	ldr	r2, [pc, #564]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 800036a:	6013      	str	r3, [r2, #0]
		setTimer(0, 100); //timer DOT
 800036c:	2164      	movs	r1, #100	@ 0x64
 800036e:	2000      	movs	r0, #0
 8000370:	f001 f89e 	bl	80014b0 <setTimer>
		setTimer(1, TIME_GREEN * 100);
 8000374:	4b87      	ldr	r3, [pc, #540]	@ (8000594 <fsm_automatic_run+0x294>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2264      	movs	r2, #100	@ 0x64
 800037a:	fb02 f303 	mul.w	r3, r2, r3
 800037e:	4619      	mov	r1, r3
 8000380:	2001      	movs	r0, #1
 8000382:	f001 f895 	bl	80014b0 <setTimer>
		setTimer(2, 100); // timer second
 8000386:	2164      	movs	r1, #100	@ 0x64
 8000388:	2002      	movs	r0, #2
 800038a:	f001 f891 	bl	80014b0 <setTimer>
		setTimer(3, 1); // timer scan
 800038e:	2101      	movs	r1, #1
 8000390:	2003      	movs	r0, #3
 8000392:	f001 f88d 	bl	80014b0 <setTimer>
		break;
 8000396:	e15f      	b.n	8000658 <fsm_automatic_run+0x358>
	case RED_GREEN:
		turnOn_RED1();
 8000398:	f001 f914 	bl	80015c4 <turnOn_RED1>
		turnOn_GREEN2();
 800039c:	f001 f96c 	bl	8001678 <turnOn_GREEN2>
		if (isTimerExpired(3) == 1) {
 80003a0:	2003      	movs	r0, #3
 80003a2:	f001 f89d 	bl	80014e0 <isTimerExpired>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d107      	bne.n	80003bc <fsm_automatic_run+0xbc>

			scanLEDs( time_1, time_2);
 80003ac:	4b7a      	ldr	r3, [pc, #488]	@ (8000598 <fsm_automatic_run+0x298>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a7b      	ldr	r2, [pc, #492]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 80003b2:	6812      	ldr	r2, [r2, #0]
 80003b4:	4611      	mov	r1, r2
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ff72 	bl	80002a0 <scanLEDs>
		}
		if (isTimerExpired(2) == 1) {
 80003bc:	2002      	movs	r0, #2
 80003be:	f001 f88f 	bl	80014e0 <isTimerExpired>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d10d      	bne.n	80003e4 <fsm_automatic_run+0xe4>

			time_1--;
 80003c8:	4b73      	ldr	r3, [pc, #460]	@ (8000598 <fsm_automatic_run+0x298>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	3b01      	subs	r3, #1
 80003ce:	4a72      	ldr	r2, [pc, #456]	@ (8000598 <fsm_automatic_run+0x298>)
 80003d0:	6013      	str	r3, [r2, #0]
			time_2--;
 80003d2:	4b73      	ldr	r3, [pc, #460]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	4a71      	ldr	r2, [pc, #452]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 80003da:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 80003dc:	2164      	movs	r1, #100	@ 0x64
 80003de:	2002      	movs	r0, #2
 80003e0:	f001 f866 	bl	80014b0 <setTimer>

		}

		if (isTimerExpired(1) == 1) {
 80003e4:	2001      	movs	r0, #1
 80003e6:	f001 f87b 	bl	80014e0 <isTimerExpired>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d110      	bne.n	8000412 <fsm_automatic_run+0x112>
			status = RED_YELLOW;
 80003f0:	4b66      	ldr	r3, [pc, #408]	@ (800058c <fsm_automatic_run+0x28c>)
 80003f2:	2203      	movs	r2, #3
 80003f4:	601a      	str	r2, [r3, #0]
			time_1 = TIME_YELLOW - 1;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	4a66      	ldr	r2, [pc, #408]	@ (8000598 <fsm_automatic_run+0x298>)
 80003fe:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_YELLOW * 100);
 8000400:	4b68      	ldr	r3, [pc, #416]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2264      	movs	r2, #100	@ 0x64
 8000406:	fb02 f303 	mul.w	r3, r2, r3
 800040a:	4619      	mov	r1, r3
 800040c:	2001      	movs	r0, #1
 800040e:	f001 f84f 	bl	80014b0 <setTimer>

		}
		if (isTimerExpired(3) == 1) {
 8000412:	2003      	movs	r0, #3
 8000414:	f001 f864 	bl	80014e0 <isTimerExpired>
 8000418:	4603      	mov	r3, r0
 800041a:	2b01      	cmp	r3, #1
 800041c:	d107      	bne.n	800042e <fsm_automatic_run+0x12e>
			scanLEDs(time_1, time_2);
 800041e:	4b5e      	ldr	r3, [pc, #376]	@ (8000598 <fsm_automatic_run+0x298>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a5f      	ldr	r2, [pc, #380]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 8000424:	6812      	ldr	r2, [r2, #0]
 8000426:	4611      	mov	r1, r2
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ff39 	bl	80002a0 <scanLEDs>
		}
		if (isButtonPressed(0) == 1) {
 800042e:	2000      	movs	r0, #0
 8000430:	f7ff fe8c 	bl	800014c <isButtonPressed>
 8000434:	4603      	mov	r3, r0
 8000436:	2b01      	cmp	r3, #1
 8000438:	f040 8107 	bne.w	800064a <fsm_automatic_run+0x34a>
			status = MAN_RED;
 800043c:	4b53      	ldr	r3, [pc, #332]	@ (800058c <fsm_automatic_run+0x28c>)
 800043e:	220c      	movs	r2, #12
 8000440:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 8000442:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000446:	2001      	movs	r0, #1
 8000448:	f001 f832 	bl	80014b0 <setTimer>
		}

		break;
 800044c:	e0fd      	b.n	800064a <fsm_automatic_run+0x34a>
	case RED_YELLOW:
		turnOn_YELLOW2();
 800044e:	f001 f92b 	bl	80016a8 <turnOn_YELLOW2>

		if (isTimerExpired(2) == 1) {
 8000452:	2002      	movs	r0, #2
 8000454:	f001 f844 	bl	80014e0 <isTimerExpired>
 8000458:	4603      	mov	r3, r0
 800045a:	2b01      	cmp	r3, #1
 800045c:	d10d      	bne.n	800047a <fsm_automatic_run+0x17a>

			time_1--;
 800045e:	4b4e      	ldr	r3, [pc, #312]	@ (8000598 <fsm_automatic_run+0x298>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	3b01      	subs	r3, #1
 8000464:	4a4c      	ldr	r2, [pc, #304]	@ (8000598 <fsm_automatic_run+0x298>)
 8000466:	6013      	str	r3, [r2, #0]

			time_2--;
 8000468:	4b4d      	ldr	r3, [pc, #308]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	3b01      	subs	r3, #1
 800046e:	4a4c      	ldr	r2, [pc, #304]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 8000470:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 8000472:	2164      	movs	r1, #100	@ 0x64
 8000474:	2002      	movs	r0, #2
 8000476:	f001 f81b 	bl	80014b0 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 800047a:	2001      	movs	r0, #1
 800047c:	f001 f830 	bl	80014e0 <isTimerExpired>
 8000480:	4603      	mov	r3, r0
 8000482:	2b01      	cmp	r3, #1
 8000484:	d115      	bne.n	80004b2 <fsm_automatic_run+0x1b2>
			status = GREEN_RED;
 8000486:	4b41      	ldr	r3, [pc, #260]	@ (800058c <fsm_automatic_run+0x28c>)
 8000488:	2204      	movs	r2, #4
 800048a:	601a      	str	r2, [r3, #0]
			time_1 = TIME_RED - 1;
 800048c:	4b43      	ldr	r3, [pc, #268]	@ (800059c <fsm_automatic_run+0x29c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3b01      	subs	r3, #1
 8000492:	4a41      	ldr	r2, [pc, #260]	@ (8000598 <fsm_automatic_run+0x298>)
 8000494:	6013      	str	r3, [r2, #0]
			time_2 = TIME_GREEN - 1;
 8000496:	4b3f      	ldr	r3, [pc, #252]	@ (8000594 <fsm_automatic_run+0x294>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	3b01      	subs	r3, #1
 800049c:	4a40      	ldr	r2, [pc, #256]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 800049e:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_GREEN * 100);
 80004a0:	4b3c      	ldr	r3, [pc, #240]	@ (8000594 <fsm_automatic_run+0x294>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2264      	movs	r2, #100	@ 0x64
 80004a6:	fb02 f303 	mul.w	r3, r2, r3
 80004aa:	4619      	mov	r1, r3
 80004ac:	2001      	movs	r0, #1
 80004ae:	f000 ffff 	bl	80014b0 <setTimer>

		}
		if (isTimerExpired(3) == 1) {
 80004b2:	2003      	movs	r0, #3
 80004b4:	f001 f814 	bl	80014e0 <isTimerExpired>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d107      	bne.n	80004ce <fsm_automatic_run+0x1ce>
			scanLEDs(time_1, time_2);
 80004be:	4b36      	ldr	r3, [pc, #216]	@ (8000598 <fsm_automatic_run+0x298>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a37      	ldr	r2, [pc, #220]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 80004c4:	6812      	ldr	r2, [r2, #0]
 80004c6:	4611      	mov	r1, r2
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fee9 	bl	80002a0 <scanLEDs>
		}
		if (isButtonPressed(0) == 1) {
 80004ce:	2000      	movs	r0, #0
 80004d0:	f7ff fe3c 	bl	800014c <isButtonPressed>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	f040 80b9 	bne.w	800064e <fsm_automatic_run+0x34e>
			status = MAN_RED;
 80004dc:	4b2b      	ldr	r3, [pc, #172]	@ (800058c <fsm_automatic_run+0x28c>)
 80004de:	220c      	movs	r2, #12
 80004e0:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 80004e2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 ffe2 	bl	80014b0 <setTimer>
		}

		break;
 80004ec:	e0af      	b.n	800064e <fsm_automatic_run+0x34e>
	case GREEN_RED:
		turnOn_GREEN1();
 80004ee:	f001 f87f 	bl	80015f0 <turnOn_GREEN1>
		turnOn_RED2();
 80004f2:	f001 f8a9 	bl	8001648 <turnOn_RED2>

		if (isTimerExpired(2) == 1) {
 80004f6:	2002      	movs	r0, #2
 80004f8:	f000 fff2 	bl	80014e0 <isTimerExpired>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d10d      	bne.n	800051e <fsm_automatic_run+0x21e>
			time_1--;
 8000502:	4b25      	ldr	r3, [pc, #148]	@ (8000598 <fsm_automatic_run+0x298>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	3b01      	subs	r3, #1
 8000508:	4a23      	ldr	r2, [pc, #140]	@ (8000598 <fsm_automatic_run+0x298>)
 800050a:	6013      	str	r3, [r2, #0]

			time_2--;
 800050c:	4b24      	ldr	r3, [pc, #144]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3b01      	subs	r3, #1
 8000512:	4a23      	ldr	r2, [pc, #140]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 8000514:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 8000516:	2164      	movs	r1, #100	@ 0x64
 8000518:	2002      	movs	r0, #2
 800051a:	f000 ffc9 	bl	80014b0 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 800051e:	2001      	movs	r0, #1
 8000520:	f000 ffde 	bl	80014e0 <isTimerExpired>
 8000524:	4603      	mov	r3, r0
 8000526:	2b01      	cmp	r3, #1
 8000528:	d110      	bne.n	800054c <fsm_automatic_run+0x24c>
			status = YELLOW_RED;
 800052a:	4b18      	ldr	r3, [pc, #96]	@ (800058c <fsm_automatic_run+0x28c>)
 800052c:	2205      	movs	r2, #5
 800052e:	601a      	str	r2, [r3, #0]
			time_2 = TIME_YELLOW - 1;
 8000530:	4b1c      	ldr	r3, [pc, #112]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3b01      	subs	r3, #1
 8000536:	4a1a      	ldr	r2, [pc, #104]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 8000538:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_YELLOW * 100);
 800053a:	4b1a      	ldr	r3, [pc, #104]	@ (80005a4 <fsm_automatic_run+0x2a4>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2264      	movs	r2, #100	@ 0x64
 8000540:	fb02 f303 	mul.w	r3, r2, r3
 8000544:	4619      	mov	r1, r3
 8000546:	2001      	movs	r0, #1
 8000548:	f000 ffb2 	bl	80014b0 <setTimer>

		}
		if (isTimerExpired(3) == 1) {
 800054c:	2003      	movs	r0, #3
 800054e:	f000 ffc7 	bl	80014e0 <isTimerExpired>
 8000552:	4603      	mov	r3, r0
 8000554:	2b01      	cmp	r3, #1
 8000556:	d107      	bne.n	8000568 <fsm_automatic_run+0x268>
			scanLEDs(time_1, time_2);
 8000558:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <fsm_automatic_run+0x298>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a10      	ldr	r2, [pc, #64]	@ (80005a0 <fsm_automatic_run+0x2a0>)
 800055e:	6812      	ldr	r2, [r2, #0]
 8000560:	4611      	mov	r1, r2
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff fe9c 	bl	80002a0 <scanLEDs>
		}
		if (isButtonPressed(0) == 1) {
 8000568:	2000      	movs	r0, #0
 800056a:	f7ff fdef 	bl	800014c <isButtonPressed>
 800056e:	4603      	mov	r3, r0
 8000570:	2b01      	cmp	r3, #1
 8000572:	d16e      	bne.n	8000652 <fsm_automatic_run+0x352>
			status = MAN_RED;
 8000574:	4b05      	ldr	r3, [pc, #20]	@ (800058c <fsm_automatic_run+0x28c>)
 8000576:	220c      	movs	r2, #12
 8000578:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 800057a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800057e:	2001      	movs	r0, #1
 8000580:	f000 ff96 	bl	80014b0 <setTimer>
		}

		break;
 8000584:	e065      	b.n	8000652 <fsm_automatic_run+0x352>
 8000586:	bf00      	nop
 8000588:	40010800 	.word	0x40010800
 800058c:	200000fc 	.word	0x200000fc
 8000590:	20000108 	.word	0x20000108
 8000594:	20000008 	.word	0x20000008
 8000598:	20000100 	.word	0x20000100
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000104 	.word	0x20000104
 80005a4:	20000004 	.word	0x20000004
	case YELLOW_RED:
		turnOn_YELLOW1();
 80005a8:	f001 f838 	bl	800161c <turnOn_YELLOW1>

		if (isTimerExpired(2) == 1) {
 80005ac:	2002      	movs	r0, #2
 80005ae:	f000 ff97 	bl	80014e0 <isTimerExpired>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d10d      	bne.n	80005d4 <fsm_automatic_run+0x2d4>

			time_1--;
 80005b8:	4b28      	ldr	r3, [pc, #160]	@ (800065c <fsm_automatic_run+0x35c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3b01      	subs	r3, #1
 80005be:	4a27      	ldr	r2, [pc, #156]	@ (800065c <fsm_automatic_run+0x35c>)
 80005c0:	6013      	str	r3, [r2, #0]

			time_2--;
 80005c2:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <fsm_automatic_run+0x360>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3b01      	subs	r3, #1
 80005c8:	4a25      	ldr	r2, [pc, #148]	@ (8000660 <fsm_automatic_run+0x360>)
 80005ca:	6013      	str	r3, [r2, #0]
			setTimer(2, 100);
 80005cc:	2164      	movs	r1, #100	@ 0x64
 80005ce:	2002      	movs	r0, #2
 80005d0:	f000 ff6e 	bl	80014b0 <setTimer>
		}

		if (isTimerExpired(1) == 1) {
 80005d4:	2001      	movs	r0, #1
 80005d6:	f000 ff83 	bl	80014e0 <isTimerExpired>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d115      	bne.n	800060c <fsm_automatic_run+0x30c>
			status = RED_GREEN;
 80005e0:	4b20      	ldr	r3, [pc, #128]	@ (8000664 <fsm_automatic_run+0x364>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	601a      	str	r2, [r3, #0]
			time_1 = TIME_GREEN - 1;
 80005e6:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <fsm_automatic_run+0x368>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	4a1b      	ldr	r2, [pc, #108]	@ (800065c <fsm_automatic_run+0x35c>)
 80005ee:	6013      	str	r3, [r2, #0]
			time_2 = TIME_RED - 1;
 80005f0:	4b1e      	ldr	r3, [pc, #120]	@ (800066c <fsm_automatic_run+0x36c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000660 <fsm_automatic_run+0x360>)
 80005f8:	6013      	str	r3, [r2, #0]
			setTimer(1, TIME_GREEN * 100);
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <fsm_automatic_run+0x368>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2264      	movs	r2, #100	@ 0x64
 8000600:	fb02 f303 	mul.w	r3, r2, r3
 8000604:	4619      	mov	r1, r3
 8000606:	2001      	movs	r0, #1
 8000608:	f000 ff52 	bl	80014b0 <setTimer>

		}
		if (isTimerExpired(3) == 1) {
 800060c:	2003      	movs	r0, #3
 800060e:	f000 ff67 	bl	80014e0 <isTimerExpired>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d107      	bne.n	8000628 <fsm_automatic_run+0x328>
			scanLEDs(time_1, time_2);
 8000618:	4b10      	ldr	r3, [pc, #64]	@ (800065c <fsm_automatic_run+0x35c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a10      	ldr	r2, [pc, #64]	@ (8000660 <fsm_automatic_run+0x360>)
 800061e:	6812      	ldr	r2, [r2, #0]
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fe3c 	bl	80002a0 <scanLEDs>
		}
		if (isButtonPressed(0) == 1) {
 8000628:	2000      	movs	r0, #0
 800062a:	f7ff fd8f 	bl	800014c <isButtonPressed>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d110      	bne.n	8000656 <fsm_automatic_run+0x356>
			status = MAN_RED;
 8000634:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <fsm_automatic_run+0x364>)
 8000636:	220c      	movs	r2, #12
 8000638:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 800063a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800063e:	2001      	movs	r0, #1
 8000640:	f000 ff36 	bl	80014b0 <setTimer>
		}
		break;
 8000644:	e007      	b.n	8000656 <fsm_automatic_run+0x356>
	default:
		break;
 8000646:	bf00      	nop
 8000648:	e006      	b.n	8000658 <fsm_automatic_run+0x358>
		break;
 800064a:	bf00      	nop
 800064c:	e004      	b.n	8000658 <fsm_automatic_run+0x358>
		break;
 800064e:	bf00      	nop
 8000650:	e002      	b.n	8000658 <fsm_automatic_run+0x358>
		break;
 8000652:	bf00      	nop
 8000654:	e000      	b.n	8000658 <fsm_automatic_run+0x358>
		break;
 8000656:	bf00      	nop
	}
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000100 	.word	0x20000100
 8000660:	20000104 	.word	0x20000104
 8000664:	200000fc 	.word	0x200000fc
 8000668:	20000008 	.word	0x20000008
 800066c:	20000000 	.word	0x20000000

08000670 <fsm_manual_run>:
 *      Author: admin
 */

#include"fsm_manual.h"

void fsm_manual_run() {
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	switch (status) {
 8000674:	4b85      	ldr	r3, [pc, #532]	@ (800088c <fsm_manual_run+0x21c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b0e      	cmp	r3, #14
 800067a:	f000 80b0 	beq.w	80007de <fsm_manual_run+0x16e>
 800067e:	2b0e      	cmp	r3, #14
 8000680:	f300 80fa 	bgt.w	8000878 <fsm_manual_run+0x208>
 8000684:	2b0c      	cmp	r3, #12
 8000686:	d002      	beq.n	800068e <fsm_manual_run+0x1e>
 8000688:	2b0d      	cmp	r3, #13
 800068a:	d056      	beq.n	800073a <fsm_manual_run+0xca>
			TIME_YELLOW = temp;
			time_1 = temp;
		}
		break;
	default:
		break;
 800068c:	e0f4      	b.n	8000878 <fsm_manual_run+0x208>
		turnOn_RED1();
 800068e:	f000 ff99 	bl	80015c4 <turnOn_RED1>
		turnOn_RED2();
 8000692:	f000 ffd9 	bl	8001648 <turnOn_RED2>
		time_2 = 2;
 8000696:	4b7e      	ldr	r3, [pc, #504]	@ (8000890 <fsm_manual_run+0x220>)
 8000698:	2202      	movs	r2, #2
 800069a:	601a      	str	r2, [r3, #0]
		if (isTimerExpired(1) == 1) {
 800069c:	2001      	movs	r0, #1
 800069e:	f000 ff1f 	bl	80014e0 <isTimerExpired>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d10b      	bne.n	80006c0 <fsm_manual_run+0x50>
			status = RED_GREEN;
 80006a8:	4b78      	ldr	r3, [pc, #480]	@ (800088c <fsm_manual_run+0x21c>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	601a      	str	r2, [r3, #0]
			setTimer(1, TIME_GREEN * 100);
 80006ae:	4b79      	ldr	r3, [pc, #484]	@ (8000894 <fsm_manual_run+0x224>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2264      	movs	r2, #100	@ 0x64
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	4619      	mov	r1, r3
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 fef8 	bl	80014b0 <setTimer>
		if (isButtonPressed(0) == 1) {
 80006c0:	2000      	movs	r0, #0
 80006c2:	f7ff fd43 	bl	800014c <isButtonPressed>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d10a      	bne.n	80006e2 <fsm_manual_run+0x72>
			status = MAN_YELLOW;
 80006cc:	4b6f      	ldr	r3, [pc, #444]	@ (800088c <fsm_manual_run+0x21c>)
 80006ce:	220e      	movs	r2, #14
 80006d0:	601a      	str	r2, [r3, #0]
			temp = 0;
 80006d2:	4b71      	ldr	r3, [pc, #452]	@ (8000898 <fsm_manual_run+0x228>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 80006d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 fee7 	bl	80014b0 <setTimer>
		if (isTimerExpired(3) == 1) {
 80006e2:	2003      	movs	r0, #3
 80006e4:	f000 fefc 	bl	80014e0 <isTimerExpired>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d105      	bne.n	80006fa <fsm_manual_run+0x8a>
			scanLEDs(temp,2);
 80006ee:	4b6a      	ldr	r3, [pc, #424]	@ (8000898 <fsm_manual_run+0x228>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2102      	movs	r1, #2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fdd3 	bl	80002a0 <scanLEDs>
		if (isButtonPressed(1) == 1) {
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff fd26 	bl	800014c <isButtonPressed>
 8000700:	4603      	mov	r3, r0
 8000702:	2b01      	cmp	r3, #1
 8000704:	d109      	bne.n	800071a <fsm_manual_run+0xaa>
			temp++;
 8000706:	4b64      	ldr	r3, [pc, #400]	@ (8000898 <fsm_manual_run+0x228>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	4a62      	ldr	r2, [pc, #392]	@ (8000898 <fsm_manual_run+0x228>)
 800070e:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8000710:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000714:	2001      	movs	r0, #1
 8000716:	f000 fecb 	bl	80014b0 <setTimer>
		if (isButtonPressed(2) == 1) {
 800071a:	2002      	movs	r0, #2
 800071c:	f7ff fd16 	bl	800014c <isButtonPressed>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	f040 80aa 	bne.w	800087c <fsm_manual_run+0x20c>
			TIME_RED = temp;
 8000728:	4b5b      	ldr	r3, [pc, #364]	@ (8000898 <fsm_manual_run+0x228>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a5b      	ldr	r2, [pc, #364]	@ (800089c <fsm_manual_run+0x22c>)
 800072e:	6013      	str	r3, [r2, #0]
			time_1 = temp;
 8000730:	4b59      	ldr	r3, [pc, #356]	@ (8000898 <fsm_manual_run+0x228>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a5a      	ldr	r2, [pc, #360]	@ (80008a0 <fsm_manual_run+0x230>)
 8000736:	6013      	str	r3, [r2, #0]
		break;
 8000738:	e0a0      	b.n	800087c <fsm_manual_run+0x20c>
		turnOn_GREEN1();
 800073a:	f000 ff59 	bl	80015f0 <turnOn_GREEN1>
		turnOn_GREEN2();
 800073e:	f000 ff9b 	bl	8001678 <turnOn_GREEN2>
		time_2 = 4;
 8000742:	4b53      	ldr	r3, [pc, #332]	@ (8000890 <fsm_manual_run+0x220>)
 8000744:	2204      	movs	r2, #4
 8000746:	601a      	str	r2, [r3, #0]
		if (isTimerExpired(1) == 1) {
 8000748:	2001      	movs	r0, #1
 800074a:	f000 fec9 	bl	80014e0 <isTimerExpired>
 800074e:	4603      	mov	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	d10b      	bne.n	800076c <fsm_manual_run+0xfc>
			status = RED_GREEN;
 8000754:	4b4d      	ldr	r3, [pc, #308]	@ (800088c <fsm_manual_run+0x21c>)
 8000756:	2202      	movs	r2, #2
 8000758:	601a      	str	r2, [r3, #0]
			setTimer(1, TIME_GREEN * 100);
 800075a:	4b4e      	ldr	r3, [pc, #312]	@ (8000894 <fsm_manual_run+0x224>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2264      	movs	r2, #100	@ 0x64
 8000760:	fb02 f303 	mul.w	r3, r2, r3
 8000764:	4619      	mov	r1, r3
 8000766:	2001      	movs	r0, #1
 8000768:	f000 fea2 	bl	80014b0 <setTimer>
		if (isTimerExpired(3) == 1) {
 800076c:	2003      	movs	r0, #3
 800076e:	f000 feb7 	bl	80014e0 <isTimerExpired>
 8000772:	4603      	mov	r3, r0
 8000774:	2b01      	cmp	r3, #1
 8000776:	d105      	bne.n	8000784 <fsm_manual_run+0x114>
			scanLEDs(temp,4);
 8000778:	4b47      	ldr	r3, [pc, #284]	@ (8000898 <fsm_manual_run+0x228>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2104      	movs	r1, #4
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fd8e 	bl	80002a0 <scanLEDs>
		if (isButtonPressed(0) == 1) {
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff fce1 	bl	800014c <isButtonPressed>
 800078a:	4603      	mov	r3, r0
 800078c:	2b01      	cmp	r3, #1
 800078e:	d107      	bne.n	80007a0 <fsm_manual_run+0x130>
			status = INIT;
 8000790:	4b3e      	ldr	r3, [pc, #248]	@ (800088c <fsm_manual_run+0x21c>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 8000796:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800079a:	2001      	movs	r0, #1
 800079c:	f000 fe88 	bl	80014b0 <setTimer>
		if (isButtonPressed(1) == 1) {
 80007a0:	2001      	movs	r0, #1
 80007a2:	f7ff fcd3 	bl	800014c <isButtonPressed>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d109      	bne.n	80007c0 <fsm_manual_run+0x150>
			temp++;
 80007ac:	4b3a      	ldr	r3, [pc, #232]	@ (8000898 <fsm_manual_run+0x228>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	4a39      	ldr	r2, [pc, #228]	@ (8000898 <fsm_manual_run+0x228>)
 80007b4:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 80007b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 fe78 	bl	80014b0 <setTimer>
		if (isButtonPressed(2) == 1) {
 80007c0:	2002      	movs	r0, #2
 80007c2:	f7ff fcc3 	bl	800014c <isButtonPressed>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d159      	bne.n	8000880 <fsm_manual_run+0x210>
			TIME_GREEN = temp;
 80007cc:	4b32      	ldr	r3, [pc, #200]	@ (8000898 <fsm_manual_run+0x228>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a30      	ldr	r2, [pc, #192]	@ (8000894 <fsm_manual_run+0x224>)
 80007d2:	6013      	str	r3, [r2, #0]
			time_1 = temp;
 80007d4:	4b30      	ldr	r3, [pc, #192]	@ (8000898 <fsm_manual_run+0x228>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a31      	ldr	r2, [pc, #196]	@ (80008a0 <fsm_manual_run+0x230>)
 80007da:	6013      	str	r3, [r2, #0]
		break;
 80007dc:	e050      	b.n	8000880 <fsm_manual_run+0x210>
		turnOn_YELLOW1();
 80007de:	f000 ff1d 	bl	800161c <turnOn_YELLOW1>
		turnOn_YELLOW2();
 80007e2:	f000 ff61 	bl	80016a8 <turnOn_YELLOW2>
		if (isTimerExpired(1) == 1) {
 80007e6:	2001      	movs	r0, #1
 80007e8:	f000 fe7a 	bl	80014e0 <isTimerExpired>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d10b      	bne.n	800080a <fsm_manual_run+0x19a>
			status = RED_GREEN;
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <fsm_manual_run+0x21c>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	601a      	str	r2, [r3, #0]
			setTimer(1, TIME_GREEN * 100);
 80007f8:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <fsm_manual_run+0x224>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2264      	movs	r2, #100	@ 0x64
 80007fe:	fb02 f303 	mul.w	r3, r2, r3
 8000802:	4619      	mov	r1, r3
 8000804:	2001      	movs	r0, #1
 8000806:	f000 fe53 	bl	80014b0 <setTimer>
		if (isTimerExpired(3) == 1) {
 800080a:	2003      	movs	r0, #3
 800080c:	f000 fe68 	bl	80014e0 <isTimerExpired>
 8000810:	4603      	mov	r3, r0
 8000812:	2b01      	cmp	r3, #1
 8000814:	d105      	bne.n	8000822 <fsm_manual_run+0x1b2>
			scanLEDs(temp,3);
 8000816:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <fsm_manual_run+0x228>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2103      	movs	r1, #3
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fd3f 	bl	80002a0 <scanLEDs>
		if (isButtonPressed(0) == 1) {
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fc92 	bl	800014c <isButtonPressed>
 8000828:	4603      	mov	r3, r0
 800082a:	2b01      	cmp	r3, #1
 800082c:	d105      	bne.n	800083a <fsm_manual_run+0x1ca>
			status = MAN_GREEN;
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <fsm_manual_run+0x21c>)
 8000830:	220d      	movs	r2, #13
 8000832:	601a      	str	r2, [r3, #0]
			temp = 0;
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <fsm_manual_run+0x228>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(1) == 1) {
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff fc86 	bl	800014c <isButtonPressed>
 8000840:	4603      	mov	r3, r0
 8000842:	2b01      	cmp	r3, #1
 8000844:	d109      	bne.n	800085a <fsm_manual_run+0x1ea>
			temp++;
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <fsm_manual_run+0x228>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <fsm_manual_run+0x228>)
 800084e:	6013      	str	r3, [r2, #0]
			setTimer(1, 1000);
 8000850:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000854:	2001      	movs	r0, #1
 8000856:	f000 fe2b 	bl	80014b0 <setTimer>
		if (isButtonPressed(2) == 1) {
 800085a:	2002      	movs	r0, #2
 800085c:	f7ff fc76 	bl	800014c <isButtonPressed>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d10e      	bne.n	8000884 <fsm_manual_run+0x214>
			TIME_YELLOW = temp;
 8000866:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <fsm_manual_run+0x228>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <fsm_manual_run+0x234>)
 800086c:	6013      	str	r3, [r2, #0]
			time_1 = temp;
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <fsm_manual_run+0x228>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a0b      	ldr	r2, [pc, #44]	@ (80008a0 <fsm_manual_run+0x230>)
 8000874:	6013      	str	r3, [r2, #0]
		break;
 8000876:	e005      	b.n	8000884 <fsm_manual_run+0x214>
		break;
 8000878:	bf00      	nop
 800087a:	e004      	b.n	8000886 <fsm_manual_run+0x216>
		break;
 800087c:	bf00      	nop
 800087e:	e002      	b.n	8000886 <fsm_manual_run+0x216>
		break;
 8000880:	bf00      	nop
 8000882:	e000      	b.n	8000886 <fsm_manual_run+0x216>
		break;
 8000884:	bf00      	nop
	}
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000fc 	.word	0x200000fc
 8000890:	20000104 	.word	0x20000104
 8000894:	20000008 	.word	0x20000008
 8000898:	20000108 	.word	0x20000108
 800089c:	20000000 	.word	0x20000000
 80008a0:	20000100 	.word	0x20000100
 80008a4:	20000004 	.word	0x20000004

080008a8 <fsm_setting>:
 *  Created on: Oct 27, 2024
 *      Author: admin
 */
#include"fsm_setting.h"
int counter=0;
void fsm_setting(){
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <updateClockBuffer>:
 *      Author: admin
 */
#include"led7_segment.h"
int led_buffer[4] = { 0, 0, 0, 0 };

void updateClockBuffer(int time1,int time2) {
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	led_buffer[0] = time1 / 10;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a18      	ldr	r2, [pc, #96]	@ (8000924 <updateClockBuffer+0x70>)
 80008c2:	fb82 1203 	smull	r1, r2, r2, r3
 80008c6:	1092      	asrs	r2, r2, #2
 80008c8:	17db      	asrs	r3, r3, #31
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	4a16      	ldr	r2, [pc, #88]	@ (8000928 <updateClockBuffer+0x74>)
 80008ce:	6013      	str	r3, [r2, #0]
	led_buffer[1] = time1 % 10;
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <updateClockBuffer+0x70>)
 80008d4:	fb83 2301 	smull	r2, r3, r3, r1
 80008d8:	109a      	asrs	r2, r3, #2
 80008da:	17cb      	asrs	r3, r1, #31
 80008dc:	1ad2      	subs	r2, r2, r3
 80008de:	4613      	mov	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4413      	add	r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	1aca      	subs	r2, r1, r3
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <updateClockBuffer+0x74>)
 80008ea:	605a      	str	r2, [r3, #4]
	led_buffer[2] = time2 / 10;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <updateClockBuffer+0x70>)
 80008f0:	fb82 1203 	smull	r1, r2, r2, r3
 80008f4:	1092      	asrs	r2, r2, #2
 80008f6:	17db      	asrs	r3, r3, #31
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000928 <updateClockBuffer+0x74>)
 80008fc:	6093      	str	r3, [r2, #8]
	led_buffer[3] = time2 % 10;
 80008fe:	6839      	ldr	r1, [r7, #0]
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <updateClockBuffer+0x70>)
 8000902:	fb83 2301 	smull	r2, r3, r3, r1
 8000906:	109a      	asrs	r2, r3, #2
 8000908:	17cb      	asrs	r3, r1, #31
 800090a:	1ad2      	subs	r2, r2, r3
 800090c:	4613      	mov	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	1aca      	subs	r2, r1, r3
 8000916:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <updateClockBuffer+0x74>)
 8000918:	60da      	str	r2, [r3, #12]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	66666667 	.word	0x66666667
 8000928:	20000114 	.word	0x20000114

0800092c <update7SEG_1>:
void update7SEG_1(int index) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

	switch (index) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d003      	beq.n	8000942 <update7SEG_1+0x16>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d012      	beq.n	8000966 <update7SEG_1+0x3a>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
		display7SEG_1(led_buffer[1]);
		break;
	default:
		break;
 8000940:	e023      	b.n	800098a <update7SEG_1+0x5e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000948:	4812      	ldr	r0, [pc, #72]	@ (8000994 <update7SEG_1+0x68>)
 800094a:	f001 f9ee 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000954:	480f      	ldr	r0, [pc, #60]	@ (8000994 <update7SEG_1+0x68>)
 8000956:	f001 f9e8 	bl	8001d2a <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer[0]);
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <update7SEG_1+0x6c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f854 	bl	8000a0c <display7SEG_1>
		break;
 8000964:	e011      	b.n	800098a <update7SEG_1+0x5e>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800096c:	4809      	ldr	r0, [pc, #36]	@ (8000994 <update7SEG_1+0x68>)
 800096e:	f001 f9dc 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000978:	4806      	ldr	r0, [pc, #24]	@ (8000994 <update7SEG_1+0x68>)
 800097a:	f001 f9d6 	bl	8001d2a <HAL_GPIO_WritePin>
		display7SEG_1(led_buffer[1]);
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <update7SEG_1+0x6c>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f842 	bl	8000a0c <display7SEG_1>
		break;
 8000988:	bf00      	nop
	}
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40010800 	.word	0x40010800
 8000998:	20000114 	.word	0x20000114

0800099c <update7SEG_2>:
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
}
void update7SEG_2(int index) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

	switch (index) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <update7SEG_2+0x16>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d012      	beq.n	80009d6 <update7SEG_2+0x3a>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
		display7SEG_2(led_buffer[3]);
		break;
	default:
		break;
 80009b0:	e023      	b.n	80009fa <update7SEG_2+0x5e>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b8:	4812      	ldr	r0, [pc, #72]	@ (8000a04 <update7SEG_2+0x68>)
 80009ba:	f001 f9b6 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009c4:	480f      	ldr	r0, [pc, #60]	@ (8000a04 <update7SEG_2+0x68>)
 80009c6:	f001 f9b0 	bl	8001d2a <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer[2]);
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <update7SEG_2+0x6c>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f9ce 	bl	8000d70 <display7SEG_2>
		break;
 80009d4:	e011      	b.n	80009fa <update7SEG_2+0x5e>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009dc:	4809      	ldr	r0, [pc, #36]	@ (8000a04 <update7SEG_2+0x68>)
 80009de:	f001 f9a4 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e8:	4806      	ldr	r0, [pc, #24]	@ (8000a04 <update7SEG_2+0x68>)
 80009ea:	f001 f99e 	bl	8001d2a <HAL_GPIO_WritePin>
		display7SEG_2(led_buffer[3]);
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <update7SEG_2+0x6c>)
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f9bc 	bl	8000d70 <display7SEG_2>
		break;
 80009f8:	bf00      	nop
	}
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40010800 	.word	0x40010800
 8000a08:	20000114 	.word	0x20000114

08000a0c <display7SEG_1>:
void display7SEG_1(int num) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b09      	cmp	r3, #9
 8000a18:	f200 8180 	bhi.w	8000d1c <display7SEG_1+0x310>
 8000a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000a24 <display7SEG_1+0x18>)
 8000a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a22:	bf00      	nop
 8000a24:	08000a4d 	.word	0x08000a4d
 8000a28:	08000a95 	.word	0x08000a95
 8000a2c:	08000add 	.word	0x08000add
 8000a30:	08000b25 	.word	0x08000b25
 8000a34:	08000b6d 	.word	0x08000b6d
 8000a38:	08000bb5 	.word	0x08000bb5
 8000a3c:	08000bfd 	.word	0x08000bfd
 8000a40:	08000c45 	.word	0x08000c45
 8000a44:	08000c8d 	.word	0x08000c8d
 8000a48:	08000cd5 	.word	0x08000cd5
	case 0:
		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2101      	movs	r1, #1
 8000a50:	48c6      	ldr	r0, [pc, #792]	@ (8000d6c <display7SEG_1+0x360>)
 8000a52:	f001 f96a 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2102      	movs	r1, #2
 8000a5a:	48c4      	ldr	r0, [pc, #784]	@ (8000d6c <display7SEG_1+0x360>)
 8000a5c:	f001 f965 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2104      	movs	r1, #4
 8000a64:	48c1      	ldr	r0, [pc, #772]	@ (8000d6c <display7SEG_1+0x360>)
 8000a66:	f001 f960 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2108      	movs	r1, #8
 8000a6e:	48bf      	ldr	r0, [pc, #764]	@ (8000d6c <display7SEG_1+0x360>)
 8000a70:	f001 f95b 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2110      	movs	r1, #16
 8000a78:	48bc      	ldr	r0, [pc, #752]	@ (8000d6c <display7SEG_1+0x360>)
 8000a7a:	f001 f956 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2120      	movs	r1, #32
 8000a82:	48ba      	ldr	r0, [pc, #744]	@ (8000d6c <display7SEG_1+0x360>)
 8000a84:	f001 f951 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2140      	movs	r1, #64	@ 0x40
 8000a8c:	48b7      	ldr	r0, [pc, #732]	@ (8000d6c <display7SEG_1+0x360>)
 8000a8e:	f001 f94c 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000a92:	e167      	b.n	8000d64 <display7SEG_1+0x358>

	case 1:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2101      	movs	r1, #1
 8000a98:	48b4      	ldr	r0, [pc, #720]	@ (8000d6c <display7SEG_1+0x360>)
 8000a9a:	f001 f946 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2108      	movs	r1, #8
 8000aa2:	48b2      	ldr	r0, [pc, #712]	@ (8000d6c <display7SEG_1+0x360>)
 8000aa4:	f001 f941 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2110      	movs	r1, #16
 8000aac:	48af      	ldr	r0, [pc, #700]	@ (8000d6c <display7SEG_1+0x360>)
 8000aae:	f001 f93c 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	48ad      	ldr	r0, [pc, #692]	@ (8000d6c <display7SEG_1+0x360>)
 8000ab8:	f001 f937 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2140      	movs	r1, #64	@ 0x40
 8000ac0:	48aa      	ldr	r0, [pc, #680]	@ (8000d6c <display7SEG_1+0x360>)
 8000ac2:	f001 f932 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2102      	movs	r1, #2
 8000aca:	48a8      	ldr	r0, [pc, #672]	@ (8000d6c <display7SEG_1+0x360>)
 8000acc:	f001 f92d 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	48a5      	ldr	r0, [pc, #660]	@ (8000d6c <display7SEG_1+0x360>)
 8000ad6:	f001 f928 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000ada:	e143      	b.n	8000d64 <display7SEG_1+0x358>

	case 2:

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2104      	movs	r1, #4
 8000ae0:	48a2      	ldr	r0, [pc, #648]	@ (8000d6c <display7SEG_1+0x360>)
 8000ae2:	f001 f922 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2120      	movs	r1, #32
 8000aea:	48a0      	ldr	r0, [pc, #640]	@ (8000d6c <display7SEG_1+0x360>)
 8000aec:	f001 f91d 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2101      	movs	r1, #1
 8000af4:	489d      	ldr	r0, [pc, #628]	@ (8000d6c <display7SEG_1+0x360>)
 8000af6:	f001 f918 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2102      	movs	r1, #2
 8000afe:	489b      	ldr	r0, [pc, #620]	@ (8000d6c <display7SEG_1+0x360>)
 8000b00:	f001 f913 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2108      	movs	r1, #8
 8000b08:	4898      	ldr	r0, [pc, #608]	@ (8000d6c <display7SEG_1+0x360>)
 8000b0a:	f001 f90e 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2110      	movs	r1, #16
 8000b12:	4896      	ldr	r0, [pc, #600]	@ (8000d6c <display7SEG_1+0x360>)
 8000b14:	f001 f909 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2140      	movs	r1, #64	@ 0x40
 8000b1c:	4893      	ldr	r0, [pc, #588]	@ (8000d6c <display7SEG_1+0x360>)
 8000b1e:	f001 f904 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000b22:	e11f      	b.n	8000d64 <display7SEG_1+0x358>

	case 3:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2110      	movs	r1, #16
 8000b28:	4890      	ldr	r0, [pc, #576]	@ (8000d6c <display7SEG_1+0x360>)
 8000b2a:	f001 f8fe 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2120      	movs	r1, #32
 8000b32:	488e      	ldr	r0, [pc, #568]	@ (8000d6c <display7SEG_1+0x360>)
 8000b34:	f001 f8f9 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	488b      	ldr	r0, [pc, #556]	@ (8000d6c <display7SEG_1+0x360>)
 8000b3e:	f001 f8f4 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2101      	movs	r1, #1
 8000b46:	4889      	ldr	r0, [pc, #548]	@ (8000d6c <display7SEG_1+0x360>)
 8000b48:	f001 f8ef 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4886      	ldr	r0, [pc, #536]	@ (8000d6c <display7SEG_1+0x360>)
 8000b52:	f001 f8ea 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2108      	movs	r1, #8
 8000b5a:	4884      	ldr	r0, [pc, #528]	@ (8000d6c <display7SEG_1+0x360>)
 8000b5c:	f001 f8e5 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2140      	movs	r1, #64	@ 0x40
 8000b64:	4881      	ldr	r0, [pc, #516]	@ (8000d6c <display7SEG_1+0x360>)
 8000b66:	f001 f8e0 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000b6a:	e0fb      	b.n	8000d64 <display7SEG_1+0x358>

	case 4:

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2120      	movs	r1, #32
 8000b70:	487e      	ldr	r0, [pc, #504]	@ (8000d6c <display7SEG_1+0x360>)
 8000b72:	f001 f8da 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2140      	movs	r1, #64	@ 0x40
 8000b7a:	487c      	ldr	r0, [pc, #496]	@ (8000d6c <display7SEG_1+0x360>)
 8000b7c:	f001 f8d5 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2102      	movs	r1, #2
 8000b84:	4879      	ldr	r0, [pc, #484]	@ (8000d6c <display7SEG_1+0x360>)
 8000b86:	f001 f8d0 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	4877      	ldr	r0, [pc, #476]	@ (8000d6c <display7SEG_1+0x360>)
 8000b90:	f001 f8cb 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2101      	movs	r1, #1
 8000b98:	4874      	ldr	r0, [pc, #464]	@ (8000d6c <display7SEG_1+0x360>)
 8000b9a:	f001 f8c6 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	4872      	ldr	r0, [pc, #456]	@ (8000d6c <display7SEG_1+0x360>)
 8000ba4:	f001 f8c1 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2110      	movs	r1, #16
 8000bac:	486f      	ldr	r0, [pc, #444]	@ (8000d6c <display7SEG_1+0x360>)
 8000bae:	f001 f8bc 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000bb2:	e0d7      	b.n	8000d64 <display7SEG_1+0x358>

	case 5:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	486c      	ldr	r0, [pc, #432]	@ (8000d6c <display7SEG_1+0x360>)
 8000bba:	f001 f8b6 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	486a      	ldr	r0, [pc, #424]	@ (8000d6c <display7SEG_1+0x360>)
 8000bc4:	f001 f8b1 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2120      	movs	r1, #32
 8000bcc:	4867      	ldr	r0, [pc, #412]	@ (8000d6c <display7SEG_1+0x360>)
 8000bce:	f001 f8ac 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2140      	movs	r1, #64	@ 0x40
 8000bd6:	4865      	ldr	r0, [pc, #404]	@ (8000d6c <display7SEG_1+0x360>)
 8000bd8:	f001 f8a7 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2104      	movs	r1, #4
 8000be0:	4862      	ldr	r0, [pc, #392]	@ (8000d6c <display7SEG_1+0x360>)
 8000be2:	f001 f8a2 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2102      	movs	r1, #2
 8000bea:	4860      	ldr	r0, [pc, #384]	@ (8000d6c <display7SEG_1+0x360>)
 8000bec:	f001 f89d 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	485d      	ldr	r0, [pc, #372]	@ (8000d6c <display7SEG_1+0x360>)
 8000bf6:	f001 f898 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000bfa:	e0b3      	b.n	8000d64 <display7SEG_1+0x358>

	case 6:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2110      	movs	r1, #16
 8000c00:	485a      	ldr	r0, [pc, #360]	@ (8000d6c <display7SEG_1+0x360>)
 8000c02:	f001 f892 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4858      	ldr	r0, [pc, #352]	@ (8000d6c <display7SEG_1+0x360>)
 8000c0c:	f001 f88d 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2108      	movs	r1, #8
 8000c14:	4855      	ldr	r0, [pc, #340]	@ (8000d6c <display7SEG_1+0x360>)
 8000c16:	f001 f888 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	4853      	ldr	r0, [pc, #332]	@ (8000d6c <display7SEG_1+0x360>)
 8000c20:	f001 f883 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2140      	movs	r1, #64	@ 0x40
 8000c28:	4850      	ldr	r0, [pc, #320]	@ (8000d6c <display7SEG_1+0x360>)
 8000c2a:	f001 f87e 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2104      	movs	r1, #4
 8000c32:	484e      	ldr	r0, [pc, #312]	@ (8000d6c <display7SEG_1+0x360>)
 8000c34:	f001 f879 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	484b      	ldr	r0, [pc, #300]	@ (8000d6c <display7SEG_1+0x360>)
 8000c3e:	f001 f874 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000c42:	e08f      	b.n	8000d64 <display7SEG_1+0x358>

	case 7:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2110      	movs	r1, #16
 8000c48:	4848      	ldr	r0, [pc, #288]	@ (8000d6c <display7SEG_1+0x360>)
 8000c4a:	f001 f86e 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2120      	movs	r1, #32
 8000c52:	4846      	ldr	r0, [pc, #280]	@ (8000d6c <display7SEG_1+0x360>)
 8000c54:	f001 f869 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2108      	movs	r1, #8
 8000c5c:	4843      	ldr	r0, [pc, #268]	@ (8000d6c <display7SEG_1+0x360>)
 8000c5e:	f001 f864 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2140      	movs	r1, #64	@ 0x40
 8000c66:	4841      	ldr	r0, [pc, #260]	@ (8000d6c <display7SEG_1+0x360>)
 8000c68:	f001 f85f 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2102      	movs	r1, #2
 8000c70:	483e      	ldr	r0, [pc, #248]	@ (8000d6c <display7SEG_1+0x360>)
 8000c72:	f001 f85a 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2101      	movs	r1, #1
 8000c7a:	483c      	ldr	r0, [pc, #240]	@ (8000d6c <display7SEG_1+0x360>)
 8000c7c:	f001 f855 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2104      	movs	r1, #4
 8000c84:	4839      	ldr	r0, [pc, #228]	@ (8000d6c <display7SEG_1+0x360>)
 8000c86:	f001 f850 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000c8a:	e06b      	b.n	8000d64 <display7SEG_1+0x358>

	case 8:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2110      	movs	r1, #16
 8000c90:	4836      	ldr	r0, [pc, #216]	@ (8000d6c <display7SEG_1+0x360>)
 8000c92:	f001 f84a 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2120      	movs	r1, #32
 8000c9a:	4834      	ldr	r0, [pc, #208]	@ (8000d6c <display7SEG_1+0x360>)
 8000c9c:	f001 f845 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	4831      	ldr	r0, [pc, #196]	@ (8000d6c <display7SEG_1+0x360>)
 8000ca6:	f001 f840 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2140      	movs	r1, #64	@ 0x40
 8000cae:	482f      	ldr	r0, [pc, #188]	@ (8000d6c <display7SEG_1+0x360>)
 8000cb0:	f001 f83b 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	482c      	ldr	r0, [pc, #176]	@ (8000d6c <display7SEG_1+0x360>)
 8000cba:	f001 f836 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	482a      	ldr	r0, [pc, #168]	@ (8000d6c <display7SEG_1+0x360>)
 8000cc4:	f001 f831 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2104      	movs	r1, #4
 8000ccc:	4827      	ldr	r0, [pc, #156]	@ (8000d6c <display7SEG_1+0x360>)
 8000cce:	f001 f82c 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000cd2:	e047      	b.n	8000d64 <display7SEG_1+0x358>

	case 9:

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2110      	movs	r1, #16
 8000cd8:	4824      	ldr	r0, [pc, #144]	@ (8000d6c <display7SEG_1+0x360>)
 8000cda:	f001 f826 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4822      	ldr	r0, [pc, #136]	@ (8000d6c <display7SEG_1+0x360>)
 8000ce4:	f001 f821 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2102      	movs	r1, #2
 8000cec:	481f      	ldr	r0, [pc, #124]	@ (8000d6c <display7SEG_1+0x360>)
 8000cee:	f001 f81c 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2104      	movs	r1, #4
 8000cf6:	481d      	ldr	r0, [pc, #116]	@ (8000d6c <display7SEG_1+0x360>)
 8000cf8:	f001 f817 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2108      	movs	r1, #8
 8000d00:	481a      	ldr	r0, [pc, #104]	@ (8000d6c <display7SEG_1+0x360>)
 8000d02:	f001 f812 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2140      	movs	r1, #64	@ 0x40
 8000d0a:	4818      	ldr	r0, [pc, #96]	@ (8000d6c <display7SEG_1+0x360>)
 8000d0c:	f001 f80d 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2120      	movs	r1, #32
 8000d14:	4815      	ldr	r0, [pc, #84]	@ (8000d6c <display7SEG_1+0x360>)
 8000d16:	f001 f808 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000d1a:	e023      	b.n	8000d64 <display7SEG_1+0x358>

	default:

		HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4812      	ldr	r0, [pc, #72]	@ (8000d6c <display7SEG_1+0x360>)
 8000d22:	f001 f802 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_2_GPIO_Port, SEG0_2_Pin, SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2102      	movs	r1, #2
 8000d2a:	4810      	ldr	r0, [pc, #64]	@ (8000d6c <display7SEG_1+0x360>)
 8000d2c:	f000 fffd 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_3_GPIO_Port, SEG0_3_Pin, SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2104      	movs	r1, #4
 8000d34:	480d      	ldr	r0, [pc, #52]	@ (8000d6c <display7SEG_1+0x360>)
 8000d36:	f000 fff8 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_4_GPIO_Port, SEG0_4_Pin, SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	480b      	ldr	r0, [pc, #44]	@ (8000d6c <display7SEG_1+0x360>)
 8000d40:	f000 fff3 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_5_GPIO_Port, SEG0_5_Pin, SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2110      	movs	r1, #16
 8000d48:	4808      	ldr	r0, [pc, #32]	@ (8000d6c <display7SEG_1+0x360>)
 8000d4a:	f000 ffee 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_6_GPIO_Port, SEG0_6_Pin, SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2120      	movs	r1, #32
 8000d52:	4806      	ldr	r0, [pc, #24]	@ (8000d6c <display7SEG_1+0x360>)
 8000d54:	f000 ffe9 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG0_7_GPIO_Port, SEG0_7_Pin, SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2140      	movs	r1, #64	@ 0x40
 8000d5c:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <display7SEG_1+0x360>)
 8000d5e:	f000 ffe4 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000d62:	bf00      	nop
	}

}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40010c00 	.word	0x40010c00

08000d70 <display7SEG_2>:
void display7SEG_2(int num) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b09      	cmp	r3, #9
 8000d7c:	f200 81be 	bhi.w	80010fc <display7SEG_2+0x38c>
 8000d80:	a201      	add	r2, pc, #4	@ (adr r2, 8000d88 <display7SEG_2+0x18>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	08000db1 	.word	0x08000db1
 8000d8c:	08000e05 	.word	0x08000e05
 8000d90:	08000e59 	.word	0x08000e59
 8000d94:	08000ead 	.word	0x08000ead
 8000d98:	08000f01 	.word	0x08000f01
 8000d9c:	08000f55 	.word	0x08000f55
 8000da0:	08000fa9 	.word	0x08000fa9
 8000da4:	08000ffd 	.word	0x08000ffd
 8000da8:	08001051 	.word	0x08001051
 8000dac:	080010a5 	.word	0x080010a5

	case 0:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2180      	movs	r1, #128	@ 0x80
 8000db4:	48d0      	ldr	r0, [pc, #832]	@ (80010f8 <display7SEG_2+0x388>)
 8000db6:	f000 ffb8 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc0:	48cd      	ldr	r0, [pc, #820]	@ (80010f8 <display7SEG_2+0x388>)
 8000dc2:	f000 ffb2 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dcc:	48ca      	ldr	r0, [pc, #808]	@ (80010f8 <display7SEG_2+0x388>)
 8000dce:	f000 ffac 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dd8:	48c7      	ldr	r0, [pc, #796]	@ (80010f8 <display7SEG_2+0x388>)
 8000dda:	f000 ffa6 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000de4:	48c4      	ldr	r0, [pc, #784]	@ (80010f8 <display7SEG_2+0x388>)
 8000de6:	f000 ffa0 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000df0:	48c1      	ldr	r0, [pc, #772]	@ (80010f8 <display7SEG_2+0x388>)
 8000df2:	f000 ff9a 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dfc:	48be      	ldr	r0, [pc, #760]	@ (80010f8 <display7SEG_2+0x388>)
 8000dfe:	f000 ff94 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000e02:	e1a5      	b.n	8001150 <display7SEG_2+0x3e0>

	case 1:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2180      	movs	r1, #128	@ 0x80
 8000e08:	48bb      	ldr	r0, [pc, #748]	@ (80010f8 <display7SEG_2+0x388>)
 8000e0a:	f000 ff8e 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e14:	48b8      	ldr	r0, [pc, #736]	@ (80010f8 <display7SEG_2+0x388>)
 8000e16:	f000 ff88 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e20:	48b5      	ldr	r0, [pc, #724]	@ (80010f8 <display7SEG_2+0x388>)
 8000e22:	f000 ff82 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e2c:	48b2      	ldr	r0, [pc, #712]	@ (80010f8 <display7SEG_2+0x388>)
 8000e2e:	f000 ff7c 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e38:	48af      	ldr	r0, [pc, #700]	@ (80010f8 <display7SEG_2+0x388>)
 8000e3a:	f000 ff76 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e44:	48ac      	ldr	r0, [pc, #688]	@ (80010f8 <display7SEG_2+0x388>)
 8000e46:	f000 ff70 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e50:	48a9      	ldr	r0, [pc, #676]	@ (80010f8 <display7SEG_2+0x388>)
 8000e52:	f000 ff6a 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000e56:	e17b      	b.n	8001150 <display7SEG_2+0x3e0>

	case 2:

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e5e:	48a6      	ldr	r0, [pc, #664]	@ (80010f8 <display7SEG_2+0x388>)
 8000e60:	f000 ff63 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e6a:	48a3      	ldr	r0, [pc, #652]	@ (80010f8 <display7SEG_2+0x388>)
 8000e6c:	f000 ff5d 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2180      	movs	r1, #128	@ 0x80
 8000e74:	48a0      	ldr	r0, [pc, #640]	@ (80010f8 <display7SEG_2+0x388>)
 8000e76:	f000 ff58 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e80:	489d      	ldr	r0, [pc, #628]	@ (80010f8 <display7SEG_2+0x388>)
 8000e82:	f000 ff52 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e8c:	489a      	ldr	r0, [pc, #616]	@ (80010f8 <display7SEG_2+0x388>)
 8000e8e:	f000 ff4c 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e98:	4897      	ldr	r0, [pc, #604]	@ (80010f8 <display7SEG_2+0x388>)
 8000e9a:	f000 ff46 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ea4:	4894      	ldr	r0, [pc, #592]	@ (80010f8 <display7SEG_2+0x388>)
 8000ea6:	f000 ff40 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000eaa:	e151      	b.n	8001150 <display7SEG_2+0x3e0>

	case 3:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eb2:	4891      	ldr	r0, [pc, #580]	@ (80010f8 <display7SEG_2+0x388>)
 8000eb4:	f000 ff39 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ebe:	488e      	ldr	r0, [pc, #568]	@ (80010f8 <display7SEG_2+0x388>)
 8000ec0:	f000 ff33 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eca:	488b      	ldr	r0, [pc, #556]	@ (80010f8 <display7SEG_2+0x388>)
 8000ecc:	f000 ff2d 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2180      	movs	r1, #128	@ 0x80
 8000ed4:	4888      	ldr	r0, [pc, #544]	@ (80010f8 <display7SEG_2+0x388>)
 8000ed6:	f000 ff28 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ee0:	4885      	ldr	r0, [pc, #532]	@ (80010f8 <display7SEG_2+0x388>)
 8000ee2:	f000 ff22 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000eec:	4882      	ldr	r0, [pc, #520]	@ (80010f8 <display7SEG_2+0x388>)
 8000eee:	f000 ff1c 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ef8:	487f      	ldr	r0, [pc, #508]	@ (80010f8 <display7SEG_2+0x388>)
 8000efa:	f000 ff16 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000efe:	e127      	b.n	8001150 <display7SEG_2+0x3e0>

	case 4:

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f06:	487c      	ldr	r0, [pc, #496]	@ (80010f8 <display7SEG_2+0x388>)
 8000f08:	f000 ff0f 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f12:	4879      	ldr	r0, [pc, #484]	@ (80010f8 <display7SEG_2+0x388>)
 8000f14:	f000 ff09 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f1e:	4876      	ldr	r0, [pc, #472]	@ (80010f8 <display7SEG_2+0x388>)
 8000f20:	f000 ff03 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f2a:	4873      	ldr	r0, [pc, #460]	@ (80010f8 <display7SEG_2+0x388>)
 8000f2c:	f000 fefd 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2180      	movs	r1, #128	@ 0x80
 8000f34:	4870      	ldr	r0, [pc, #448]	@ (80010f8 <display7SEG_2+0x388>)
 8000f36:	f000 fef8 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f40:	486d      	ldr	r0, [pc, #436]	@ (80010f8 <display7SEG_2+0x388>)
 8000f42:	f000 fef2 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f4c:	486a      	ldr	r0, [pc, #424]	@ (80010f8 <display7SEG_2+0x388>)
 8000f4e:	f000 feec 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000f52:	e0fd      	b.n	8001150 <display7SEG_2+0x3e0>

	case 5:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2180      	movs	r1, #128	@ 0x80
 8000f58:	4867      	ldr	r0, [pc, #412]	@ (80010f8 <display7SEG_2+0x388>)
 8000f5a:	f000 fee6 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f64:	4864      	ldr	r0, [pc, #400]	@ (80010f8 <display7SEG_2+0x388>)
 8000f66:	f000 fee0 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f70:	4861      	ldr	r0, [pc, #388]	@ (80010f8 <display7SEG_2+0x388>)
 8000f72:	f000 feda 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f7c:	485e      	ldr	r0, [pc, #376]	@ (80010f8 <display7SEG_2+0x388>)
 8000f7e:	f000 fed4 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f88:	485b      	ldr	r0, [pc, #364]	@ (80010f8 <display7SEG_2+0x388>)
 8000f8a:	f000 fece 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f94:	4858      	ldr	r0, [pc, #352]	@ (80010f8 <display7SEG_2+0x388>)
 8000f96:	f000 fec8 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fa0:	4855      	ldr	r0, [pc, #340]	@ (80010f8 <display7SEG_2+0x388>)
 8000fa2:	f000 fec2 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000fa6:	e0d3      	b.n	8001150 <display7SEG_2+0x3e0>

	case 6:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fae:	4852      	ldr	r0, [pc, #328]	@ (80010f8 <display7SEG_2+0x388>)
 8000fb0:	f000 febb 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2180      	movs	r1, #128	@ 0x80
 8000fb8:	484f      	ldr	r0, [pc, #316]	@ (80010f8 <display7SEG_2+0x388>)
 8000fba:	f000 feb6 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fc4:	484c      	ldr	r0, [pc, #304]	@ (80010f8 <display7SEG_2+0x388>)
 8000fc6:	f000 feb0 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fd0:	4849      	ldr	r0, [pc, #292]	@ (80010f8 <display7SEG_2+0x388>)
 8000fd2:	f000 feaa 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fdc:	4846      	ldr	r0, [pc, #280]	@ (80010f8 <display7SEG_2+0x388>)
 8000fde:	f000 fea4 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fe8:	4843      	ldr	r0, [pc, #268]	@ (80010f8 <display7SEG_2+0x388>)
 8000fea:	f000 fe9e 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ff4:	4840      	ldr	r0, [pc, #256]	@ (80010f8 <display7SEG_2+0x388>)
 8000ff6:	f000 fe98 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 8000ffa:	e0a9      	b.n	8001150 <display7SEG_2+0x3e0>

	case 7:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001002:	483d      	ldr	r0, [pc, #244]	@ (80010f8 <display7SEG_2+0x388>)
 8001004:	f000 fe91 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800100e:	483a      	ldr	r0, [pc, #232]	@ (80010f8 <display7SEG_2+0x388>)
 8001010:	f000 fe8b 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800101a:	4837      	ldr	r0, [pc, #220]	@ (80010f8 <display7SEG_2+0x388>)
 800101c:	f000 fe85 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001026:	4834      	ldr	r0, [pc, #208]	@ (80010f8 <display7SEG_2+0x388>)
 8001028:	f000 fe7f 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001032:	4831      	ldr	r0, [pc, #196]	@ (80010f8 <display7SEG_2+0x388>)
 8001034:	f000 fe79 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2180      	movs	r1, #128	@ 0x80
 800103c:	482e      	ldr	r0, [pc, #184]	@ (80010f8 <display7SEG_2+0x388>)
 800103e:	f000 fe74 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001048:	482b      	ldr	r0, [pc, #172]	@ (80010f8 <display7SEG_2+0x388>)
 800104a:	f000 fe6e 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 800104e:	e07f      	b.n	8001150 <display7SEG_2+0x3e0>

	case 8:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001056:	4828      	ldr	r0, [pc, #160]	@ (80010f8 <display7SEG_2+0x388>)
 8001058:	f000 fe67 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001062:	4825      	ldr	r0, [pc, #148]	@ (80010f8 <display7SEG_2+0x388>)
 8001064:	f000 fe61 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106e:	4822      	ldr	r0, [pc, #136]	@ (80010f8 <display7SEG_2+0x388>)
 8001070:	f000 fe5b 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800107a:	481f      	ldr	r0, [pc, #124]	@ (80010f8 <display7SEG_2+0x388>)
 800107c:	f000 fe55 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2180      	movs	r1, #128	@ 0x80
 8001084:	481c      	ldr	r0, [pc, #112]	@ (80010f8 <display7SEG_2+0x388>)
 8001086:	f000 fe50 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001090:	4819      	ldr	r0, [pc, #100]	@ (80010f8 <display7SEG_2+0x388>)
 8001092:	f000 fe4a 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800109c:	4816      	ldr	r0, [pc, #88]	@ (80010f8 <display7SEG_2+0x388>)
 800109e:	f000 fe44 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 80010a2:	e055      	b.n	8001150 <display7SEG_2+0x3e0>

	case 9:

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010aa:	4813      	ldr	r0, [pc, #76]	@ (80010f8 <display7SEG_2+0x388>)
 80010ac:	f000 fe3d 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2180      	movs	r1, #128	@ 0x80
 80010b4:	4810      	ldr	r0, [pc, #64]	@ (80010f8 <display7SEG_2+0x388>)
 80010b6:	f000 fe38 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010c0:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <display7SEG_2+0x388>)
 80010c2:	f000 fe32 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010cc:	480a      	ldr	r0, [pc, #40]	@ (80010f8 <display7SEG_2+0x388>)
 80010ce:	f000 fe2c 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010d8:	4807      	ldr	r0, [pc, #28]	@ (80010f8 <display7SEG_2+0x388>)
 80010da:	f000 fe26 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010e4:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <display7SEG_2+0x388>)
 80010e6:	f000 fe20 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f0:	4801      	ldr	r0, [pc, #4]	@ (80010f8 <display7SEG_2+0x388>)
 80010f2:	f000 fe1a 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 80010f6:	e02b      	b.n	8001150 <display7SEG_2+0x3e0>
 80010f8:	40010c00 	.word	0x40010c00

	default:

		HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2180      	movs	r1, #128	@ 0x80
 8001100:	4815      	ldr	r0, [pc, #84]	@ (8001158 <display7SEG_2+0x3e8>)
 8001102:	f000 fe12 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_2_GPIO_Port, SEG1_2_Pin, SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800110c:	4812      	ldr	r0, [pc, #72]	@ (8001158 <display7SEG_2+0x3e8>)
 800110e:	f000 fe0c 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_3_GPIO_Port, SEG1_3_Pin, SET);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001118:	480f      	ldr	r0, [pc, #60]	@ (8001158 <display7SEG_2+0x3e8>)
 800111a:	f000 fe06 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_4_GPIO_Port, SEG1_4_Pin, SET);
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <display7SEG_2+0x3e8>)
 8001126:	f000 fe00 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, SET);
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001130:	4809      	ldr	r0, [pc, #36]	@ (8001158 <display7SEG_2+0x3e8>)
 8001132:	f000 fdfa 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800113c:	4806      	ldr	r0, [pc, #24]	@ (8001158 <display7SEG_2+0x3e8>)
 800113e:	f000 fdf4 	bl	8001d2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SEG1_7_GPIO_Port, SEG1_7_Pin, SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001148:	4803      	ldr	r0, [pc, #12]	@ (8001158 <display7SEG_2+0x3e8>)
 800114a:	f000 fdee 	bl	8001d2a <HAL_GPIO_WritePin>

		break;
 800114e:	bf00      	nop
	}

}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40010c00 	.word	0x40010c00

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001160:	f000 fae0 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001164:	f000 f816 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001168:	f000 f89c 	bl	80012a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800116c:	f000 f84e 	bl	800120c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001170:	4806      	ldr	r0, [pc, #24]	@ (800118c <main+0x30>)
 8001172:	f001 fa39 	bl	80025e8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	status = INIT;
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <main+0x34>)
 8001178:	2201      	movs	r2, #1
 800117a:	601a      	str	r2, [r3, #0]

	while (1) {

		fsm_manual_run();
 800117c:	f7ff fa78 	bl	8000670 <fsm_manual_run>
		fsm_automatic_run();
 8001180:	f7ff f8be 	bl	8000300 <fsm_automatic_run>
		fsm_setting();
 8001184:	f7ff fb90 	bl	80008a8 <fsm_setting>
		fsm_manual_run();
 8001188:	bf00      	nop
 800118a:	e7f7      	b.n	800117c <main+0x20>
 800118c:	20000124 	.word	0x20000124
 8001190:	200000fc 	.word	0x200000fc

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b090      	sub	sp, #64	@ 0x40
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0318 	add.w	r3, r7, #24
 800119e:	2228      	movs	r2, #40	@ 0x28
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fdac 	bl	8002d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ba:	2301      	movs	r3, #1
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011be:	2310      	movs	r3, #16
 80011c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fdde 	bl	8001d8c <HAL_RCC_OscConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011d6:	f000 f8d3 	bl	8001380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011da:	230f      	movs	r3, #15
 80011dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 f84c 	bl	8002290 <HAL_RCC_ClockConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011fe:	f000 f8bf 	bl	8001380 <Error_Handler>
  }
}
 8001202:	bf00      	nop
 8001204:	3740      	adds	r7, #64	@ 0x40
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	463b      	mov	r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <MX_TIM2_Init+0x94>)
 800122a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800122e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001230:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <MX_TIM2_Init+0x94>)
 8001232:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001236:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <MX_TIM2_Init+0x94>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800123e:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <MX_TIM2_Init+0x94>)
 8001240:	2209      	movs	r2, #9
 8001242:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <MX_TIM2_Init+0x94>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <MX_TIM2_Init+0x94>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001250:	4813      	ldr	r0, [pc, #76]	@ (80012a0 <MX_TIM2_Init+0x94>)
 8001252:	f001 f979 	bl	8002548 <HAL_TIM_Base_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800125c:	f000 f890 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001264:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	4619      	mov	r1, r3
 800126c:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <MX_TIM2_Init+0x94>)
 800126e:	f001 faf7 	bl	8002860 <HAL_TIM_ConfigClockSource>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001278:	f000 f882 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <MX_TIM2_Init+0x94>)
 800128a:	f001 fccf 	bl	8002c2c <HAL_TIMEx_MasterConfigSynchronization>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001294:	f000 f874 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000124 	.word	0x20000124

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b28      	ldr	r3, [pc, #160]	@ (800135c <MX_GPIO_Init+0xb8>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a27      	ldr	r2, [pc, #156]	@ (800135c <MX_GPIO_Init+0xb8>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b25      	ldr	r3, [pc, #148]	@ (800135c <MX_GPIO_Init+0xb8>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	4b22      	ldr	r3, [pc, #136]	@ (800135c <MX_GPIO_Init+0xb8>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a21      	ldr	r2, [pc, #132]	@ (800135c <MX_GPIO_Init+0xb8>)
 80012d6:	f043 0308 	orr.w	r3, r3, #8
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <MX_GPIO_Init+0xb8>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_RED_Pin|LED_1_Pin|LED_2_Pin
 80012e8:	2200      	movs	r2, #0
 80012ea:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 80012ee:	481c      	ldr	r0, [pc, #112]	@ (8001360 <MX_GPIO_Init+0xbc>)
 80012f0:	f000 fd1b 	bl	8001d2a <HAL_GPIO_WritePin>
                          |LED_3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin|SEG0_2_Pin|SEG0_3_Pin|SEG1_4_Pin
 80012f4:	2200      	movs	r2, #0
 80012f6:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 80012fa:	481a      	ldr	r0, [pc, #104]	@ (8001364 <MX_GPIO_Init+0xc0>)
 80012fc:	f000 fd15 	bl	8001d2a <HAL_GPIO_WritePin>
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|SEG0_4_Pin
                          |SEG0_5_Pin|SEG0_6_Pin|SEG0_7_Pin|SEG1_1_Pin
                          |SEG1_2_Pin|SEG1_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 8001300:	230e      	movs	r3, #14
 8001302:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	4619      	mov	r1, r3
 8001312:	4813      	ldr	r0, [pc, #76]	@ (8001360 <MX_GPIO_Init+0xbc>)
 8001314:	f000 fb76 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_1_Pin LED_2_Pin
                           LED_3_Pin LED_4_Pin LED_5_Pin LED_6_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_1_Pin|LED_2_Pin
 8001318:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800131c:	60bb      	str	r3, [r7, #8]
                          |LED_3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2302      	movs	r3, #2
 8001328:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4619      	mov	r1, r3
 8001330:	480b      	ldr	r0, [pc, #44]	@ (8001360 <MX_GPIO_Init+0xbc>)
 8001332:	f000 fb67 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_1_Pin SEG0_2_Pin SEG0_3_Pin SEG1_4_Pin
                           SEG1_5_Pin SEG1_6_Pin SEG1_7_Pin SEG0_4_Pin
                           SEG0_5_Pin SEG0_6_Pin SEG0_7_Pin SEG1_1_Pin
                           SEG1_2_Pin SEG1_3_Pin */
  GPIO_InitStruct.Pin = SEG0_1_Pin|SEG0_2_Pin|SEG0_3_Pin|SEG1_4_Pin
 8001336:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800133a:	60bb      	str	r3, [r7, #8]
                          |SEG1_5_Pin|SEG1_6_Pin|SEG1_7_Pin|SEG0_4_Pin
                          |SEG0_5_Pin|SEG0_6_Pin|SEG0_7_Pin|SEG1_1_Pin
                          |SEG1_2_Pin|SEG1_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2302      	movs	r3, #2
 8001346:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	@ (8001364 <MX_GPIO_Init+0xc0>)
 8001350:	f000 fb58 	bl	8001a04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001354:	bf00      	nop
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40021000 	.word	0x40021000
 8001360:	40010800 	.word	0x40010800
 8001364:	40010c00 	.word	0x40010c00

08001368 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8001370:	f7fe ff1c 	bl	80001ac <getKeyInput>
	timerRun();
 8001374:	f000 f8ce 	bl	8001514 <timerRun>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <Error_Handler+0x8>

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <HAL_MspInit+0x5c>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	4a14      	ldr	r2, [pc, #80]	@ (80013e8 <HAL_MspInit+0x5c>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6193      	str	r3, [r2, #24]
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <HAL_MspInit+0x5c>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <HAL_MspInit+0x5c>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4a0e      	ldr	r2, [pc, #56]	@ (80013e8 <HAL_MspInit+0x5c>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	61d3      	str	r3, [r2, #28]
 80013b6:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <HAL_MspInit+0x5c>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <HAL_MspInit+0x60>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <HAL_MspInit+0x60>)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010000 	.word	0x40010000

080013f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001400:	d113      	bne.n	800142a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001402:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <HAL_TIM_Base_MspInit+0x44>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a0b      	ldr	r2, [pc, #44]	@ (8001434 <HAL_TIM_Base_MspInit+0x44>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <HAL_TIM_Base_MspInit+0x44>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	201c      	movs	r0, #28
 8001420:	f000 fab9 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001424:	201c      	movs	r0, #28
 8001426:	f000 fad2 	bl	80019ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <NMI_Handler+0x4>

08001440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <MemManage_Handler+0x4>

08001450 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <UsageFault_Handler+0x4>

08001460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001488:	f000 f992 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <TIM2_IRQHandler+0x10>)
 8001496:	f001 f8f3 	bl	8002680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000124 	.word	0x20000124

080014a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <setTimer>:

#define MAX_COUNTER 10
int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value) {
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value;
 80014ba:	4907      	ldr	r1, [pc, #28]	@ (80014d8 <setTimer+0x28>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80014c4:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <setTimer+0x2c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2100      	movs	r1, #0
 80014ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	2000016c 	.word	0x2000016c
 80014dc:	20000194 	.word	0x20000194

080014e0 <isTimerExpired>:
int isTimerExpired(int index) {
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 80014e8:	4a09      	ldr	r2, [pc, #36]	@ (8001510 <isTimerExpired+0x30>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d106      	bne.n	8001502 <isTimerExpired+0x22>
		timer_flag[index] = 0;
 80014f4:	4a06      	ldr	r2, [pc, #24]	@ (8001510 <isTimerExpired+0x30>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2100      	movs	r1, #0
 80014fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <isTimerExpired+0x24>
	}
	return 0;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000194 	.word	0x20000194

08001514 <timerRun>:
void timerRun() {
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++) {
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	e01c      	b.n	800155a <timerRun+0x46>
		if (timer_counter[i] > 0) {
 8001520:	4a12      	ldr	r2, [pc, #72]	@ (800156c <timerRun+0x58>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	2b00      	cmp	r3, #0
 800152a:	dd13      	ble.n	8001554 <timerRun+0x40>
			timer_counter[i]--;
 800152c:	4a0f      	ldr	r2, [pc, #60]	@ (800156c <timerRun+0x58>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	1e5a      	subs	r2, r3, #1
 8001536:	490d      	ldr	r1, [pc, #52]	@ (800156c <timerRun+0x58>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 800153e:	4a0b      	ldr	r2, [pc, #44]	@ (800156c <timerRun+0x58>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	2b00      	cmp	r3, #0
 8001548:	dc04      	bgt.n	8001554 <timerRun+0x40>
				timer_flag[i] = 1;
 800154a:	4a09      	ldr	r2, [pc, #36]	@ (8001570 <timerRun+0x5c>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2101      	movs	r1, #1
 8001550:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++) {
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3301      	adds	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b09      	cmp	r3, #9
 800155e:	dddf      	ble.n	8001520 <timerRun+0xc>
			}
		}
	}


}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	2000016c 	.word	0x2000016c
 8001570:	20000194 	.word	0x20000194

08001574 <turnOff_LED>:
 *  Created on: Oct 27, 2024
 *      Author: admin
 */

#include"traffic_light.h"
void turnOff_LED() {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2140      	movs	r1, #64	@ 0x40
 800157c:	4810      	ldr	r0, [pc, #64]	@ (80015c0 <turnOff_LED+0x4c>)
 800157e:	f000 fbd4 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001588:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <turnOff_LED+0x4c>)
 800158a:	f000 fbce 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2180      	movs	r1, #128	@ 0x80
 8001592:	480b      	ldr	r0, [pc, #44]	@ (80015c0 <turnOff_LED+0x4c>)
 8001594:	f000 fbc9 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800159e:	4808      	ldr	r0, [pc, #32]	@ (80015c0 <turnOff_LED+0x4c>)
 80015a0:	f000 fbc3 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015aa:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <turnOff_LED+0x4c>)
 80015ac:	f000 fbbd 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015b6:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <turnOff_LED+0x4c>)
 80015b8:	f000 fbb7 	bl	8001d2a <HAL_GPIO_WritePin>
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40010800 	.word	0x40010800

080015c4 <turnOn_RED1>:
void turnOn_RED1() {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2140      	movs	r1, #64	@ 0x40
 80015cc:	4807      	ldr	r0, [pc, #28]	@ (80015ec <turnOn_RED1+0x28>)
 80015ce:	f000 fbac 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015d8:	4804      	ldr	r0, [pc, #16]	@ (80015ec <turnOn_RED1+0x28>)
 80015da:	f000 fba6 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2180      	movs	r1, #128	@ 0x80
 80015e2:	4802      	ldr	r0, [pc, #8]	@ (80015ec <turnOn_RED1+0x28>)
 80015e4:	f000 fba1 	bl	8001d2a <HAL_GPIO_WritePin>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40010800 	.word	0x40010800

080015f0 <turnOn_GREEN1>:
void turnOn_GREEN1() {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2140      	movs	r1, #64	@ 0x40
 80015f8:	4807      	ldr	r0, [pc, #28]	@ (8001618 <turnOn_GREEN1+0x28>)
 80015fa:	f000 fb96 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001604:	4804      	ldr	r0, [pc, #16]	@ (8001618 <turnOn_GREEN1+0x28>)
 8001606:	f000 fb90 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2180      	movs	r1, #128	@ 0x80
 800160e:	4802      	ldr	r0, [pc, #8]	@ (8001618 <turnOn_GREEN1+0x28>)
 8001610:	f000 fb8b 	bl	8001d2a <HAL_GPIO_WritePin>
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40010800 	.word	0x40010800

0800161c <turnOn_YELLOW1>:
void turnOn_YELLOW1() {
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2140      	movs	r1, #64	@ 0x40
 8001624:	4807      	ldr	r0, [pc, #28]	@ (8001644 <turnOn_YELLOW1+0x28>)
 8001626:	f000 fb80 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001630:	4804      	ldr	r0, [pc, #16]	@ (8001644 <turnOn_YELLOW1+0x28>)
 8001632:	f000 fb7a 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001636:	2201      	movs	r2, #1
 8001638:	2180      	movs	r1, #128	@ 0x80
 800163a:	4802      	ldr	r0, [pc, #8]	@ (8001644 <turnOn_YELLOW1+0x28>)
 800163c:	f000 fb75 	bl	8001d2a <HAL_GPIO_WritePin>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40010800 	.word	0x40010800

08001648 <turnOn_RED2>:
void turnOn_RED2() {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001652:	4808      	ldr	r0, [pc, #32]	@ (8001674 <turnOn_RED2+0x2c>)
 8001654:	f000 fb69 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800165e:	4805      	ldr	r0, [pc, #20]	@ (8001674 <turnOn_RED2+0x2c>)
 8001660:	f000 fb63 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800166a:	4802      	ldr	r0, [pc, #8]	@ (8001674 <turnOn_RED2+0x2c>)
 800166c:	f000 fb5d 	bl	8001d2a <HAL_GPIO_WritePin>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40010800 	.word	0x40010800

08001678 <turnOn_GREEN2>:
void turnOn_GREEN2() {
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001682:	4808      	ldr	r0, [pc, #32]	@ (80016a4 <turnOn_GREEN2+0x2c>)
 8001684:	f000 fb51 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <turnOn_GREEN2+0x2c>)
 8001690:	f000 fb4b 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800169a:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <turnOn_GREEN2+0x2c>)
 800169c:	f000 fb45 	bl	8001d2a <HAL_GPIO_WritePin>
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40010800 	.word	0x40010800

080016a8 <turnOn_YELLOW2>:
void turnOn_YELLOW2() {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016b2:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <turnOn_YELLOW2+0x2c>)
 80016b4:	f000 fb39 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <turnOn_YELLOW2+0x2c>)
 80016c0:	f000 fb33 	bl	8001d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ca:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <turnOn_YELLOW2+0x2c>)
 80016cc:	f000 fb2d 	bl	8001d2a <HAL_GPIO_WritePin>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40010800 	.word	0x40010800

080016d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d8:	f7ff fee4 	bl	80014a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016dc:	480b      	ldr	r0, [pc, #44]	@ (800170c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016de:	490c      	ldr	r1, [pc, #48]	@ (8001710 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001714 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a09      	ldr	r2, [pc, #36]	@ (8001718 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016f4:	4c09      	ldr	r4, [pc, #36]	@ (800171c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001702:	f001 fb05 	bl	8002d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001706:	f7ff fd29 	bl	800115c <main>
  bx lr
 800170a:	4770      	bx	lr
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001714:	08002d9c 	.word	0x08002d9c
  ldr r2, =_sbss
 8001718:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800171c:	200001c0 	.word	0x200001c0

08001720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC1_2_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <HAL_Init+0x28>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_Init+0x28>)
 800172e:	f043 0310 	orr.w	r3, r3, #16
 8001732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f923 	bl	8001980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	200f      	movs	r0, #15
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fe24 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40022000 	.word	0x40022000

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f93b 	bl	80019ea <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f903 	bl	8001996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	@ (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000000c 	.word	0x2000000c
 80017a8:	20000014 	.word	0x20000014
 80017ac:	20000010 	.word	0x20000010

080017b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_IncTick+0x1c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <HAL_IncTick+0x20>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a03      	ldr	r2, [pc, #12]	@ (80017d0 <HAL_IncTick+0x20>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	20000014 	.word	0x20000014
 80017d0:	200001bc 	.word	0x200001bc

080017d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b02      	ldr	r3, [pc, #8]	@ (80017e4 <HAL_GetTick+0x10>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	200001bc 	.word	0x200001bc

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	@ (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4906      	ldr	r1, [pc, #24]	@ (8001880 <__NVIC_EnableIRQ+0x34>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	@ (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	@ (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	@ 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	@ 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800194c:	d301      	bcc.n	8001952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194e:	2301      	movs	r3, #1
 8001950:	e00f      	b.n	8001972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001952:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <SysTick_Config+0x40>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195a:	210f      	movs	r1, #15
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f7ff ff90 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <SysTick_Config+0x40>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	4b04      	ldr	r3, [pc, #16]	@ (800197c <SysTick_Config+0x40>)
 800196c:	2207      	movs	r2, #7
 800196e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	e000e010 	.word	0xe000e010

08001980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff2d 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a8:	f7ff ff42 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7ff ff90 	bl	80018d8 <NVIC_EncodePriority>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff5f 	bl	8001884 <__NVIC_SetPriority>
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff35 	bl	800184c <__NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffa2 	bl	800193c <SysTick_Config>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b08b      	sub	sp, #44	@ 0x2c
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a16:	e161      	b.n	8001cdc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	f040 8150 	bne.w	8001cd6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a97      	ldr	r2, [pc, #604]	@ (8001c98 <HAL_GPIO_Init+0x294>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d05e      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a40:	4a95      	ldr	r2, [pc, #596]	@ (8001c98 <HAL_GPIO_Init+0x294>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d875      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a46:	4a95      	ldr	r2, [pc, #596]	@ (8001c9c <HAL_GPIO_Init+0x298>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d058      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a4c:	4a93      	ldr	r2, [pc, #588]	@ (8001c9c <HAL_GPIO_Init+0x298>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d86f      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a52:	4a93      	ldr	r2, [pc, #588]	@ (8001ca0 <HAL_GPIO_Init+0x29c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d052      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a58:	4a91      	ldr	r2, [pc, #580]	@ (8001ca0 <HAL_GPIO_Init+0x29c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d869      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a5e:	4a91      	ldr	r2, [pc, #580]	@ (8001ca4 <HAL_GPIO_Init+0x2a0>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d04c      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a64:	4a8f      	ldr	r2, [pc, #572]	@ (8001ca4 <HAL_GPIO_Init+0x2a0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d863      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a6a:	4a8f      	ldr	r2, [pc, #572]	@ (8001ca8 <HAL_GPIO_Init+0x2a4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d046      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a70:	4a8d      	ldr	r2, [pc, #564]	@ (8001ca8 <HAL_GPIO_Init+0x2a4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d85d      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a76:	2b12      	cmp	r3, #18
 8001a78:	d82a      	bhi.n	8001ad0 <HAL_GPIO_Init+0xcc>
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d859      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a84 <HAL_GPIO_Init+0x80>)
 8001a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a84:	08001aff 	.word	0x08001aff
 8001a88:	08001ad9 	.word	0x08001ad9
 8001a8c:	08001aeb 	.word	0x08001aeb
 8001a90:	08001b2d 	.word	0x08001b2d
 8001a94:	08001b33 	.word	0x08001b33
 8001a98:	08001b33 	.word	0x08001b33
 8001a9c:	08001b33 	.word	0x08001b33
 8001aa0:	08001b33 	.word	0x08001b33
 8001aa4:	08001b33 	.word	0x08001b33
 8001aa8:	08001b33 	.word	0x08001b33
 8001aac:	08001b33 	.word	0x08001b33
 8001ab0:	08001b33 	.word	0x08001b33
 8001ab4:	08001b33 	.word	0x08001b33
 8001ab8:	08001b33 	.word	0x08001b33
 8001abc:	08001b33 	.word	0x08001b33
 8001ac0:	08001b33 	.word	0x08001b33
 8001ac4:	08001b33 	.word	0x08001b33
 8001ac8:	08001ae1 	.word	0x08001ae1
 8001acc:	08001af5 	.word	0x08001af5
 8001ad0:	4a76      	ldr	r2, [pc, #472]	@ (8001cac <HAL_GPIO_Init+0x2a8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ad6:	e02c      	b.n	8001b32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	623b      	str	r3, [r7, #32]
          break;
 8001ade:	e029      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e024      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	3308      	adds	r3, #8
 8001af0:	623b      	str	r3, [r7, #32]
          break;
 8001af2:	e01f      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	330c      	adds	r3, #12
 8001afa:	623b      	str	r3, [r7, #32]
          break;
 8001afc:	e01a      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d102      	bne.n	8001b0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b06:	2304      	movs	r3, #4
 8001b08:	623b      	str	r3, [r7, #32]
          break;
 8001b0a:	e013      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d105      	bne.n	8001b20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b14:	2308      	movs	r3, #8
 8001b16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	611a      	str	r2, [r3, #16]
          break;
 8001b1e:	e009      	b.n	8001b34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b20:	2308      	movs	r3, #8
 8001b22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	615a      	str	r2, [r3, #20]
          break;
 8001b2a:	e003      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
          break;
 8001b30:	e000      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          break;
 8001b32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2bff      	cmp	r3, #255	@ 0xff
 8001b38:	d801      	bhi.n	8001b3e <HAL_GPIO_Init+0x13a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	e001      	b.n	8001b42 <HAL_GPIO_Init+0x13e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
 8001b42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2bff      	cmp	r3, #255	@ 0xff
 8001b48:	d802      	bhi.n	8001b50 <HAL_GPIO_Init+0x14c>
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	e002      	b.n	8001b56 <HAL_GPIO_Init+0x152>
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	3b08      	subs	r3, #8
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	210f      	movs	r1, #15
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	401a      	ands	r2, r3
 8001b68:	6a39      	ldr	r1, [r7, #32]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	431a      	orrs	r2, r3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80a9 	beq.w	8001cd6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b84:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb0 <HAL_GPIO_Init+0x2ac>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a49      	ldr	r2, [pc, #292]	@ (8001cb0 <HAL_GPIO_Init+0x2ac>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b47      	ldr	r3, [pc, #284]	@ (8001cb0 <HAL_GPIO_Init+0x2ac>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b9c:	4a45      	ldr	r2, [pc, #276]	@ (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a3d      	ldr	r2, [pc, #244]	@ (8001cb8 <HAL_GPIO_Init+0x2b4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00d      	beq.n	8001be4 <HAL_GPIO_Init+0x1e0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a3c      	ldr	r2, [pc, #240]	@ (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d007      	beq.n	8001be0 <HAL_GPIO_Init+0x1dc>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a3b      	ldr	r2, [pc, #236]	@ (8001cc0 <HAL_GPIO_Init+0x2bc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_GPIO_Init+0x1d8>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e004      	b.n	8001be6 <HAL_GPIO_Init+0x1e2>
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e002      	b.n	8001be6 <HAL_GPIO_Init+0x1e2>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_GPIO_Init+0x1e2>
 8001be4:	2300      	movs	r3, #0
 8001be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be8:	f002 0203 	and.w	r2, r2, #3
 8001bec:	0092      	lsls	r2, r2, #2
 8001bee:	4093      	lsls	r3, r2
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bf6:	492f      	ldr	r1, [pc, #188]	@ (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c10:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	492b      	ldr	r1, [pc, #172]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	608b      	str	r3, [r1, #8]
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c1e:	4b29      	ldr	r3, [pc, #164]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4927      	ldr	r1, [pc, #156]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c38:	4b22      	ldr	r3, [pc, #136]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	4921      	ldr	r1, [pc, #132]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c46:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	491d      	ldr	r1, [pc, #116]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c60:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	4917      	ldr	r1, [pc, #92]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4913      	ldr	r1, [pc, #76]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01f      	beq.n	8001cc8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c88:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	490d      	ldr	r1, [pc, #52]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
 8001c94:	e01f      	b.n	8001cd6 <HAL_GPIO_Init+0x2d2>
 8001c96:	bf00      	nop
 8001c98:	10320000 	.word	0x10320000
 8001c9c:	10310000 	.word	0x10310000
 8001ca0:	10220000 	.word	0x10220000
 8001ca4:	10210000 	.word	0x10210000
 8001ca8:	10120000 	.word	0x10120000
 8001cac:	10110000 	.word	0x10110000
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010000 	.word	0x40010000
 8001cb8:	40010800 	.word	0x40010800
 8001cbc:	40010c00 	.word	0x40010c00
 8001cc0:	40011000 	.word	0x40011000
 8001cc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <HAL_GPIO_Init+0x2f4>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	4909      	ldr	r1, [pc, #36]	@ (8001cf8 <HAL_GPIO_Init+0x2f4>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	3301      	adds	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f47f ae96 	bne.w	8001a18 <HAL_GPIO_Init+0x14>
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	372c      	adds	r7, #44	@ 0x2c
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	40010400 	.word	0x40010400

08001cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	887b      	ldrh	r3, [r7, #2]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	e001      	b.n	8001d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	807b      	strh	r3, [r7, #2]
 8001d36:	4613      	mov	r3, r2
 8001d38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d3a:	787b      	ldrb	r3, [r7, #1]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d40:	887a      	ldrh	r2, [r7, #2]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d46:	e003      	b.n	8001d50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	041a      	lsls	r2, r3, #16
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	611a      	str	r2, [r3, #16]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d6c:	887a      	ldrh	r2, [r7, #2]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4013      	ands	r3, r2
 8001d72:	041a      	lsls	r2, r3, #16
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	400b      	ands	r3, r1
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e272      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8087 	beq.w	8001eba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dac:	4b92      	ldr	r3, [pc, #584]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d00c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db8:	4b8f      	ldr	r3, [pc, #572]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d112      	bne.n	8001dea <HAL_RCC_OscConfig+0x5e>
 8001dc4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd0:	d10b      	bne.n	8001dea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd2:	4b89      	ldr	r3, [pc, #548]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d06c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x12c>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d168      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e24c      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x76>
 8001df4:	4b80      	ldr	r3, [pc, #512]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e02e      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x98>
 8001e0a:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a7a      	ldr	r2, [pc, #488]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b78      	ldr	r3, [pc, #480]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a77      	ldr	r2, [pc, #476]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e01d      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0xbc>
 8001e2e:	4b72      	ldr	r3, [pc, #456]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a71      	ldr	r2, [pc, #452]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e00b      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e48:	4b6b      	ldr	r3, [pc, #428]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b68      	ldr	r3, [pc, #416]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a67      	ldr	r2, [pc, #412]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fcb4 	bl	80017d4 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff fcb0 	bl	80017d4 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	@ 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e200      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b5d      	ldr	r3, [pc, #372]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0xe4>
 8001e8e:	e014      	b.n	8001eba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fca0 	bl	80017d4 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff fc9c 	bl	80017d4 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	@ 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e1ec      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	4b53      	ldr	r3, [pc, #332]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x10c>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d063      	beq.n	8001f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00b      	beq.n	8001eea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ed2:	4b49      	ldr	r3, [pc, #292]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d11c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x18c>
 8001ede:	4b46      	ldr	r3, [pc, #280]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d116      	bne.n	8001f18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	4b43      	ldr	r3, [pc, #268]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_RCC_OscConfig+0x176>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d001      	beq.n	8001f02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e1c0      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f02:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4939      	ldr	r1, [pc, #228]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f16:	e03a      	b.n	8001f8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f20:	4b36      	ldr	r3, [pc, #216]	@ (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff fc55 	bl	80017d4 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7ff fc51 	bl	80017d4 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e1a1      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4927      	ldr	r1, [pc, #156]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
 8001f60:	e015      	b.n	8001f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f62:	4b26      	ldr	r3, [pc, #152]	@ (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff fc34 	bl	80017d4 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f70:	f7ff fc30 	bl	80017d4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e180      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d03a      	beq.n	8002010 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d019      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa2:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <HAL_RCC_OscConfig+0x274>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fc14 	bl	80017d4 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7ff fc10 	bl	80017d4 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e160      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f000 fa9c 	bl	800250c <RCC_Delay>
 8001fd4:	e01c      	b.n	8002010 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fbfa 	bl	80017d4 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe2:	e00f      	b.n	8002004 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fbf6 	bl	80017d4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d908      	bls.n	8002004 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e146      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	42420000 	.word	0x42420000
 8002000:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002004:	4b92      	ldr	r3, [pc, #584]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1e9      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80a6 	beq.w	800216a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002022:	4b8b      	ldr	r3, [pc, #556]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10d      	bne.n	800204a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b88      	ldr	r3, [pc, #544]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a87      	ldr	r2, [pc, #540]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002038:	61d3      	str	r3, [r2, #28]
 800203a:	4b85      	ldr	r3, [pc, #532]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002046:	2301      	movs	r3, #1
 8002048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	4b82      	ldr	r3, [pc, #520]	@ (8002254 <HAL_RCC_OscConfig+0x4c8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d118      	bne.n	8002088 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002056:	4b7f      	ldr	r3, [pc, #508]	@ (8002254 <HAL_RCC_OscConfig+0x4c8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a7e      	ldr	r2, [pc, #504]	@ (8002254 <HAL_RCC_OscConfig+0x4c8>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002062:	f7ff fbb7 	bl	80017d4 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206a:	f7ff fbb3 	bl	80017d4 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b64      	cmp	r3, #100	@ 0x64
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e103      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	4b75      	ldr	r3, [pc, #468]	@ (8002254 <HAL_RCC_OscConfig+0x4c8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x312>
 8002090:	4b6f      	ldr	r3, [pc, #444]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a6e      	ldr	r2, [pc, #440]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e02d      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x334>
 80020a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a69      	ldr	r2, [pc, #420]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6213      	str	r3, [r2, #32]
 80020b2:	4b67      	ldr	r3, [pc, #412]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4a66      	ldr	r2, [pc, #408]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	6213      	str	r3, [r2, #32]
 80020be:	e01c      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d10c      	bne.n	80020e2 <HAL_RCC_OscConfig+0x356>
 80020c8:	4b61      	ldr	r3, [pc, #388]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a60      	ldr	r2, [pc, #384]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	6213      	str	r3, [r2, #32]
 80020d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	e00b      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 80020e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	4b58      	ldr	r3, [pc, #352]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a57      	ldr	r2, [pc, #348]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d015      	beq.n	800212e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7ff fb67 	bl	80017d4 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7ff fb63 	bl	80017d4 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e0b1      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	4b4b      	ldr	r3, [pc, #300]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ee      	beq.n	800210a <HAL_RCC_OscConfig+0x37e>
 800212c:	e014      	b.n	8002158 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7ff fb51 	bl	80017d4 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7ff fb4d 	bl	80017d4 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e09b      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	4b40      	ldr	r3, [pc, #256]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ee      	bne.n	8002136 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d105      	bne.n	800216a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215e:	4b3c      	ldr	r3, [pc, #240]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4a3b      	ldr	r2, [pc, #236]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002168:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8087 	beq.w	8002282 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002174:	4b36      	ldr	r3, [pc, #216]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d061      	beq.n	8002244 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d146      	bne.n	8002216 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002188:	4b33      	ldr	r3, [pc, #204]	@ (8002258 <HAL_RCC_OscConfig+0x4cc>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7ff fb21 	bl	80017d4 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002196:	f7ff fb1d 	bl	80017d4 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e06d      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a8:	4b29      	ldr	r3, [pc, #164]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021bc:	d108      	bne.n	80021d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021be:	4b24      	ldr	r3, [pc, #144]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	4921      	ldr	r1, [pc, #132]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a19      	ldr	r1, [r3, #32]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	430b      	orrs	r3, r1
 80021e2:	491b      	ldr	r1, [pc, #108]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7ff faf1 	bl	80017d4 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f6:	f7ff faed 	bl	80017d4 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e03d      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002208:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x46a>
 8002214:	e035      	b.n	8002282 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <HAL_RCC_OscConfig+0x4cc>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7ff fada 	bl	80017d4 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7ff fad6 	bl	80017d4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e026      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x498>
 8002242:	e01e      	b.n	8002282 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d107      	bne.n	800225c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e019      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
 8002250:	40021000 	.word	0x40021000
 8002254:	40007000 	.word	0x40007000
 8002258:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800225c:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <HAL_RCC_OscConfig+0x500>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	429a      	cmp	r2, r3
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000

08002290 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0d0      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d910      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b67      	ldr	r3, [pc, #412]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4965      	ldr	r1, [pc, #404]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b63      	ldr	r3, [pc, #396]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0b8      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ec:	4b59      	ldr	r3, [pc, #356]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4a58      	ldr	r2, [pc, #352]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002304:	4b53      	ldr	r3, [pc, #332]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a52      	ldr	r2, [pc, #328]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800230e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002310:	4b50      	ldr	r3, [pc, #320]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	494d      	ldr	r1, [pc, #308]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d040      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b47      	ldr	r3, [pc, #284]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d115      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e07f      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	4b41      	ldr	r3, [pc, #260]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e073      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235e:	4b3d      	ldr	r3, [pc, #244]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e06b      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236e:	4b39      	ldr	r3, [pc, #228]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f023 0203 	bic.w	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4936      	ldr	r1, [pc, #216]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002380:	f7ff fa28 	bl	80017d4 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	e00a      	b.n	800239e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7ff fa24 	bl	80017d4 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e053      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	4b2d      	ldr	r3, [pc, #180]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 020c 	and.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1eb      	bne.n	8002388 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b0:	4b27      	ldr	r3, [pc, #156]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d210      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 0207 	bic.w	r2, r3, #7
 80023c6:	4922      	ldr	r1, [pc, #136]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e032      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ec:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4916      	ldr	r1, [pc, #88]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	490e      	ldr	r1, [pc, #56]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800241e:	f000 f821 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8002422:	4602      	mov	r2, r0
 8002424:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	490a      	ldr	r1, [pc, #40]	@ (8002458 <HAL_RCC_ClockConfig+0x1c8>)
 8002430:	5ccb      	ldrb	r3, [r1, r3]
 8002432:	fa22 f303 	lsr.w	r3, r2, r3
 8002436:	4a09      	ldr	r2, [pc, #36]	@ (800245c <HAL_RCC_ClockConfig+0x1cc>)
 8002438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800243a:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <HAL_RCC_ClockConfig+0x1d0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f986 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40022000 	.word	0x40022000
 8002454:	40021000 	.word	0x40021000
 8002458:	08002d70 	.word	0x08002d70
 800245c:	2000000c 	.word	0x2000000c
 8002460:	20000010 	.word	0x20000010

08002464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800247e:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d002      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x30>
 800248e:	2b08      	cmp	r3, #8
 8002490:	d003      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x36>
 8002492:	e027      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002494:	4b19      	ldr	r3, [pc, #100]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002496:	613b      	str	r3, [r7, #16]
      break;
 8002498:	e027      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	0c9b      	lsrs	r3, r3, #18
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	4a17      	ldr	r2, [pc, #92]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024a4:	5cd3      	ldrb	r3, [r2, r3]
 80024a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d010      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024b2:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0c5b      	lsrs	r3, r3, #17
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	4a11      	ldr	r2, [pc, #68]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a0d      	ldr	r2, [pc, #52]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 80024c6:	fb03 f202 	mul.w	r2, r3, r2
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	e004      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002508 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024d8:	fb02 f303 	mul.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	613b      	str	r3, [r7, #16]
      break;
 80024e2:	e002      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e4:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 80024e6:	613b      	str	r3, [r7, #16]
      break;
 80024e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ea:	693b      	ldr	r3, [r7, #16]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	007a1200 	.word	0x007a1200
 8002500:	08002d80 	.word	0x08002d80
 8002504:	08002d90 	.word	0x08002d90
 8002508:	003d0900 	.word	0x003d0900

0800250c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002514:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <RCC_Delay+0x34>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <RCC_Delay+0x38>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	0a5b      	lsrs	r3, r3, #9
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002528:	bf00      	nop
  }
  while (Delay --);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1e5a      	subs	r2, r3, #1
 800252e:	60fa      	str	r2, [r7, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f9      	bne.n	8002528 <RCC_Delay+0x1c>
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	2000000c 	.word	0x2000000c
 8002544:	10624dd3 	.word	0x10624dd3

08002548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e041      	b.n	80025de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe ff3e 	bl	80013f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3304      	adds	r3, #4
 8002584:	4619      	mov	r1, r3
 8002586:	4610      	mov	r0, r2
 8002588:	f000 fa56 	bl	8002a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d001      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e035      	b.n	800266c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a16      	ldr	r2, [pc, #88]	@ (8002678 <HAL_TIM_Base_Start_IT+0x90>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d009      	beq.n	8002636 <HAL_TIM_Base_Start_IT+0x4e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800262a:	d004      	beq.n	8002636 <HAL_TIM_Base_Start_IT+0x4e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a12      	ldr	r2, [pc, #72]	@ (800267c <HAL_TIM_Base_Start_IT+0x94>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d111      	bne.n	800265a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b06      	cmp	r3, #6
 8002646:	d010      	beq.n	800266a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002658:	e007      	b.n	800266a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40012c00 	.word	0x40012c00
 800267c:	40000400 	.word	0x40000400

08002680 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d020      	beq.n	80026e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01b      	beq.n	80026e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0202 	mvn.w	r2, #2
 80026b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f998 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f98b 	bl	80029ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f99a 	bl	8002a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d020      	beq.n	8002730 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01b      	beq.n	8002730 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0204 	mvn.w	r2, #4
 8002700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f972 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 800271c:	e005      	b.n	800272a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f965 	bl	80029ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f974 	bl	8002a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d020      	beq.n	800277c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01b      	beq.n	800277c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0208 	mvn.w	r2, #8
 800274c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2204      	movs	r2, #4
 8002752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f94c 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 8002768:	e005      	b.n	8002776 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f93f 	bl	80029ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f94e 	bl	8002a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	d020      	beq.n	80027c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01b      	beq.n	80027c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0210 	mvn.w	r2, #16
 8002798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2208      	movs	r2, #8
 800279e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f926 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 80027b4:	e005      	b.n	80027c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f919 	bl	80029ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f928 	bl	8002a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00c      	beq.n	80027ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0201 	mvn.w	r2, #1
 80027e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fe fdbe 	bl	8001368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00c      	beq.n	8002810 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fa6f 	bl	8002cee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00c      	beq.n	8002834 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d007      	beq.n	8002834 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800282c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8f8 	bl	8002a24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00c      	beq.n	8002858 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0220 	mvn.w	r2, #32
 8002850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fa42 	bl	8002cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_TIM_ConfigClockSource+0x1c>
 8002878:	2302      	movs	r3, #2
 800287a:	e0b4      	b.n	80029e6 <HAL_TIM_ConfigClockSource+0x186>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800289a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028b4:	d03e      	beq.n	8002934 <HAL_TIM_ConfigClockSource+0xd4>
 80028b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028ba:	f200 8087 	bhi.w	80029cc <HAL_TIM_ConfigClockSource+0x16c>
 80028be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028c2:	f000 8086 	beq.w	80029d2 <HAL_TIM_ConfigClockSource+0x172>
 80028c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ca:	d87f      	bhi.n	80029cc <HAL_TIM_ConfigClockSource+0x16c>
 80028cc:	2b70      	cmp	r3, #112	@ 0x70
 80028ce:	d01a      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0xa6>
 80028d0:	2b70      	cmp	r3, #112	@ 0x70
 80028d2:	d87b      	bhi.n	80029cc <HAL_TIM_ConfigClockSource+0x16c>
 80028d4:	2b60      	cmp	r3, #96	@ 0x60
 80028d6:	d050      	beq.n	800297a <HAL_TIM_ConfigClockSource+0x11a>
 80028d8:	2b60      	cmp	r3, #96	@ 0x60
 80028da:	d877      	bhi.n	80029cc <HAL_TIM_ConfigClockSource+0x16c>
 80028dc:	2b50      	cmp	r3, #80	@ 0x50
 80028de:	d03c      	beq.n	800295a <HAL_TIM_ConfigClockSource+0xfa>
 80028e0:	2b50      	cmp	r3, #80	@ 0x50
 80028e2:	d873      	bhi.n	80029cc <HAL_TIM_ConfigClockSource+0x16c>
 80028e4:	2b40      	cmp	r3, #64	@ 0x40
 80028e6:	d058      	beq.n	800299a <HAL_TIM_ConfigClockSource+0x13a>
 80028e8:	2b40      	cmp	r3, #64	@ 0x40
 80028ea:	d86f      	bhi.n	80029cc <HAL_TIM_ConfigClockSource+0x16c>
 80028ec:	2b30      	cmp	r3, #48	@ 0x30
 80028ee:	d064      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0x15a>
 80028f0:	2b30      	cmp	r3, #48	@ 0x30
 80028f2:	d86b      	bhi.n	80029cc <HAL_TIM_ConfigClockSource+0x16c>
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d060      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0x15a>
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d867      	bhi.n	80029cc <HAL_TIM_ConfigClockSource+0x16c>
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d05c      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0x15a>
 8002900:	2b10      	cmp	r3, #16
 8002902:	d05a      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0x15a>
 8002904:	e062      	b.n	80029cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002916:	f000 f96a 	bl	8002bee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002928:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	609a      	str	r2, [r3, #8]
      break;
 8002932:	e04f      	b.n	80029d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002944:	f000 f953 	bl	8002bee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002956:	609a      	str	r2, [r3, #8]
      break;
 8002958:	e03c      	b.n	80029d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002966:	461a      	mov	r2, r3
 8002968:	f000 f8ca 	bl	8002b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2150      	movs	r1, #80	@ 0x50
 8002972:	4618      	mov	r0, r3
 8002974:	f000 f921 	bl	8002bba <TIM_ITRx_SetConfig>
      break;
 8002978:	e02c      	b.n	80029d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002986:	461a      	mov	r2, r3
 8002988:	f000 f8e8 	bl	8002b5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2160      	movs	r1, #96	@ 0x60
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f911 	bl	8002bba <TIM_ITRx_SetConfig>
      break;
 8002998:	e01c      	b.n	80029d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029a6:	461a      	mov	r2, r3
 80029a8:	f000 f8aa 	bl	8002b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2140      	movs	r1, #64	@ 0x40
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f901 	bl	8002bba <TIM_ITRx_SetConfig>
      break;
 80029b8:	e00c      	b.n	80029d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4619      	mov	r1, r3
 80029c4:	4610      	mov	r0, r2
 80029c6:	f000 f8f8 	bl	8002bba <TIM_ITRx_SetConfig>
      break;
 80029ca:	e003      	b.n	80029d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      break;
 80029d0:	e000      	b.n	80029d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
	...

08002a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a2b      	ldr	r2, [pc, #172]	@ (8002af8 <TIM_Base_SetConfig+0xc0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d007      	beq.n	8002a60 <TIM_Base_SetConfig+0x28>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a56:	d003      	beq.n	8002a60 <TIM_Base_SetConfig+0x28>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a28      	ldr	r2, [pc, #160]	@ (8002afc <TIM_Base_SetConfig+0xc4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d108      	bne.n	8002a72 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a20      	ldr	r2, [pc, #128]	@ (8002af8 <TIM_Base_SetConfig+0xc0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <TIM_Base_SetConfig+0x52>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a80:	d003      	beq.n	8002a8a <TIM_Base_SetConfig+0x52>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a1d      	ldr	r2, [pc, #116]	@ (8002afc <TIM_Base_SetConfig+0xc4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d108      	bne.n	8002a9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8002af8 <TIM_Base_SetConfig+0xc0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d103      	bne.n	8002ad0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f023 0201 	bic.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	611a      	str	r2, [r3, #16]
  }
}
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	40000400 	.word	0x40000400

08002b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f023 0201 	bic.w	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f023 030a 	bic.w	r3, r3, #10
 8002b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	621a      	str	r2, [r3, #32]
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	f023 0210 	bic.w	r2, r3, #16
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	031b      	lsls	r3, r3, #12
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	621a      	str	r2, [r3, #32]
}
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f043 0307 	orr.w	r3, r3, #7
 8002bdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	609a      	str	r2, [r3, #8]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr

08002bee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b087      	sub	sp, #28
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	021a      	lsls	r2, r3, #8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	609a      	str	r2, [r3, #8]
}
 8002c22:	bf00      	nop
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e041      	b.n	8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a14      	ldr	r2, [pc, #80]	@ (8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d009      	beq.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c90:	d004      	beq.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a10      	ldr	r2, [pc, #64]	@ (8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ca2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40000400 	.word	0x40000400

08002cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <memset>:
 8002d00:	4603      	mov	r3, r0
 8002d02:	4402      	add	r2, r0
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d100      	bne.n	8002d0a <memset+0xa>
 8002d08:	4770      	bx	lr
 8002d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d0e:	e7f9      	b.n	8002d04 <memset+0x4>

08002d10 <__libc_init_array>:
 8002d10:	b570      	push	{r4, r5, r6, lr}
 8002d12:	2600      	movs	r6, #0
 8002d14:	4d0c      	ldr	r5, [pc, #48]	@ (8002d48 <__libc_init_array+0x38>)
 8002d16:	4c0d      	ldr	r4, [pc, #52]	@ (8002d4c <__libc_init_array+0x3c>)
 8002d18:	1b64      	subs	r4, r4, r5
 8002d1a:	10a4      	asrs	r4, r4, #2
 8002d1c:	42a6      	cmp	r6, r4
 8002d1e:	d109      	bne.n	8002d34 <__libc_init_array+0x24>
 8002d20:	f000 f81a 	bl	8002d58 <_init>
 8002d24:	2600      	movs	r6, #0
 8002d26:	4d0a      	ldr	r5, [pc, #40]	@ (8002d50 <__libc_init_array+0x40>)
 8002d28:	4c0a      	ldr	r4, [pc, #40]	@ (8002d54 <__libc_init_array+0x44>)
 8002d2a:	1b64      	subs	r4, r4, r5
 8002d2c:	10a4      	asrs	r4, r4, #2
 8002d2e:	42a6      	cmp	r6, r4
 8002d30:	d105      	bne.n	8002d3e <__libc_init_array+0x2e>
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
 8002d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d38:	4798      	blx	r3
 8002d3a:	3601      	adds	r6, #1
 8002d3c:	e7ee      	b.n	8002d1c <__libc_init_array+0xc>
 8002d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d42:	4798      	blx	r3
 8002d44:	3601      	adds	r6, #1
 8002d46:	e7f2      	b.n	8002d2e <__libc_init_array+0x1e>
 8002d48:	08002d94 	.word	0x08002d94
 8002d4c:	08002d94 	.word	0x08002d94
 8002d50:	08002d94 	.word	0x08002d94
 8002d54:	08002d98 	.word	0x08002d98

08002d58 <_init>:
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5a:	bf00      	nop
 8002d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5e:	bc08      	pop	{r3}
 8002d60:	469e      	mov	lr, r3
 8002d62:	4770      	bx	lr

08002d64 <_fini>:
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d66:	bf00      	nop
 8002d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6a:	bc08      	pop	{r3}
 8002d6c:	469e      	mov	lr, r3
 8002d6e:	4770      	bx	lr
